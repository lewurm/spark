<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="3750" onload="init(evt)" viewBox="0 0 1200 3750" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="3733"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="3733"> </text>
<g id="frames">
<g>
<title>all (3,927 samples, 100.00%)</title><rect x="10.0" y="3699.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="3710.0">all</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (3 samples, 0.08%)</title><rect x="10.0" y="3683.0" width="0.9" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="3694.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.03%)</title><rect x="10.9" y="3683.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.9" y="3694.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="10.9" y="3667.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.9" y="3678.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="10.9" y="3651.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.9" y="3662.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="10.9" y="3635.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="13.9" y="3646.0"></text>
</g>
<g>
<title>[unknown] (20 samples, 0.51%)</title><rect x="11.2" y="3683.0" width="6.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="14.2" y="3694.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (10 samples, 0.25%)</title><rect x="11.2" y="3667.0" width="3.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="14.2" y="3678.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="14.2" y="3667.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="17.2" y="3678.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="14.2" y="3651.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="17.2" y="3662.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="14.2" y="3635.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="17.2" y="3646.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.03%)</title><rect x="14.5" y="3667.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="17.5" y="3678.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (1 samples, 0.03%)</title><rect x="14.8" y="3667.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="17.8" y="3678.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (2 samples, 0.05%)</title><rect x="15.1" y="3667.0" width="0.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="18.1" y="3678.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.05%)</title><rect x="15.1" y="3651.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="18.1" y="3662.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.05%)</title><rect x="15.1" y="3635.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="18.1" y="3646.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.05%)</title><rect x="15.1" y="3619.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="18.1" y="3630.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.05%)</title><rect x="15.1" y="3603.0" width="0.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="18.1" y="3614.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.05%)</title><rect x="15.1" y="3587.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="18.1" y="3598.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.05%)</title><rect x="15.1" y="3571.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="18.1" y="3582.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.05%)</title><rect x="15.1" y="3555.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="18.1" y="3566.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.05%)</title><rect x="15.1" y="3539.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="18.1" y="3550.0"></text>
</g>
<g>
<title>do_futex_wait.constprop.0 (2 samples, 0.05%)</title><rect x="15.7" y="3667.0" width="0.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="18.7" y="3678.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.05%)</title><rect x="15.7" y="3651.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="18.7" y="3662.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.05%)</title><rect x="15.7" y="3635.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="18.7" y="3646.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.05%)</title><rect x="15.7" y="3619.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="18.7" y="3630.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.05%)</title><rect x="15.7" y="3603.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="18.7" y="3614.0"></text>
</g>
<g>
<title>futex_wait (2 samples, 0.05%)</title><rect x="15.7" y="3587.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="18.7" y="3598.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.03%)</title><rect x="16.0" y="3571.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="19.0" y="3582.0"></text>
</g>
<g>
<title>get_futex_key (1 samples, 0.03%)</title><rect x="16.0" y="3555.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="19.0" y="3566.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (1 samples, 0.03%)</title><rect x="16.0" y="3539.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="19.0" y="3550.0"></text>
</g>
<g>
<title>open64 (1 samples, 0.03%)</title><rect x="16.3" y="3667.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="19.3" y="3678.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="16.3" y="3651.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="19.3" y="3662.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="16.3" y="3635.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="19.3" y="3646.0"></text>
</g>
<g>
<title>__x64_sys_openat (1 samples, 0.03%)</title><rect x="16.3" y="3619.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="19.3" y="3630.0"></text>
</g>
<g>
<title>do_sys_open (1 samples, 0.03%)</title><rect x="16.3" y="3603.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="19.3" y="3614.0"></text>
</g>
<g>
<title>do_filp_open (1 samples, 0.03%)</title><rect x="16.3" y="3587.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="19.3" y="3598.0"></text>
</g>
<g>
<title>path_openat (1 samples, 0.03%)</title><rect x="16.3" y="3571.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="19.3" y="3582.0"></text>
</g>
<g>
<title>link_path_walk.part.0 (1 samples, 0.03%)</title><rect x="16.3" y="3555.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="19.3" y="3566.0"></text>
</g>
<g>
<title>walk_component (1 samples, 0.03%)</title><rect x="16.3" y="3539.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="19.3" y="3550.0"></text>
</g>
<g>
<title>lookup_fast (1 samples, 0.03%)</title><rect x="16.3" y="3523.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="19.3" y="3534.0"></text>
</g>
<g>
<title>strcmp (1 samples, 0.03%)</title><rect x="16.3" y="3507.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="19.3" y="3518.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (2 samples, 0.05%)</title><rect x="16.6" y="3667.0" width="0.6" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="19.6" y="3678.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="16.9" y="3651.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="19.9" y="3662.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="16.9" y="3635.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="19.9" y="3646.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="16.9" y="3619.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="19.9" y="3630.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="16.9" y="3603.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="19.9" y="3614.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="16.9" y="3587.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="19.9" y="3598.0"></text>
</g>
<g>
<title>futex_wait_queue_me (1 samples, 0.03%)</title><rect x="16.9" y="3571.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="19.9" y="3582.0"></text>
</g>
<g>
<title>schedule (1 samples, 0.03%)</title><rect x="16.9" y="3555.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="19.9" y="3566.0"></text>
</g>
<g>
<title>[unknown_Java] (15 samples, 0.38%)</title><rect x="17.2" y="3683.0" width="4.5" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="20.2" y="3694.0"></text>
</g>
<g>
<title>Interpreter (12 samples, 0.31%)</title><rect x="17.2" y="3667.0" width="3.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="20.2" y="3678.0"></text>
</g>
<g>
<title>Runtime1::monitorenter(JavaThread*, oopDesc*, BasicObjectLock*) (2 samples, 0.05%)</title><rect x="20.8" y="3667.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="23.8" y="3678.0"></text>
</g>
<g>
<title>SharedRuntime::monitor_enter_helper(oopDesc*, BasicLock*, JavaThread*) (2 samples, 0.05%)</title><rect x="20.8" y="3651.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="23.8" y="3662.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;594020ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 594020ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="20.8" y="3635.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="23.8" y="3646.0"></text>
</g>
<g>
<title>ObjectMonitor::object_peek() const (1 samples, 0.03%)</title><rect x="21.1" y="3635.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="24.1" y="3646.0"></text>
</g>
<g>
<title>slow_subtype_check Runtime1 stub (1 samples, 0.03%)</title><rect x="21.4" y="3667.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="24.4" y="3678.0"></text>
</g>
<g>
<title>__libc_malloc (1 samples, 0.03%)</title><rect x="21.7" y="3683.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="24.7" y="3694.0"></text>
</g>
<g>
<title>__pthread_cond_broadcast (4 samples, 0.10%)</title><rect x="22.0" y="3683.0" width="1.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="25.0" y="3694.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.10%)</title><rect x="22.0" y="3667.0" width="1.2" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="25.0" y="3678.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.10%)</title><rect x="22.0" y="3651.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="25.0" y="3662.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.10%)</title><rect x="22.0" y="3635.0" width="1.2" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="25.0" y="3646.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.10%)</title><rect x="22.0" y="3619.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="25.0" y="3630.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.10%)</title><rect x="22.0" y="3603.0" width="1.2" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="25.0" y="3614.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 0.10%)</title><rect x="22.0" y="3587.0" width="1.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="25.0" y="3598.0"></text>
</g>
<g>
<title>try_to_wake_up (4 samples, 0.10%)</title><rect x="22.0" y="3571.0" width="1.2" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="25.0" y="3582.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.10%)</title><rect x="22.0" y="3555.0" width="1.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="25.0" y="3566.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.03%)</title><rect x="23.2" y="3683.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="26.2" y="3694.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,894 samples, 73.69%)</title><rect x="23.5" y="3683.0" width="869.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.5" y="3694.0">java/lang/Thread.run</text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocalRunnable.run (72 samples, 1.83%)</title><rect x="23.5" y="3667.0" width="21.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.5" y="3678.0">i..</text>
</g>
<g>
<title>io/netty/util/internal/ThreadExecutorMap$2.run (72 samples, 1.83%)</title><rect x="23.5" y="3651.0" width="21.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="26.5" y="3662.0">i..</text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor$4.run (72 samples, 1.83%)</title><rect x="23.5" y="3635.0" width="21.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.5" y="3646.0">i..</text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.run (72 samples, 1.83%)</title><rect x="23.5" y="3619.0" width="21.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.5" y="3630.0">i..</text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeys (69 samples, 1.76%)</title><rect x="23.5" y="3603.0" width="20.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.5" y="3614.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKeysOptimized (69 samples, 1.76%)</title><rect x="23.5" y="3587.0" width="20.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.5" y="3598.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.processSelectedKey (69 samples, 1.76%)</title><rect x="23.5" y="3571.0" width="20.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.5" y="3582.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.read (69 samples, 1.76%)</title><rect x="23.5" y="3555.0" width="20.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.5" y="3566.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.fireChannelRead (51 samples, 1.30%)</title><rect x="23.5" y="3539.0" width="15.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.5" y="3550.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (51 samples, 1.30%)</title><rect x="23.5" y="3523.0" width="15.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.5" y="3534.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (51 samples, 1.30%)</title><rect x="23.5" y="3507.0" width="15.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.5" y="3518.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (51 samples, 1.30%)</title><rect x="23.5" y="3491.0" width="15.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.5" y="3502.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (51 samples, 1.30%)</title><rect x="23.5" y="3475.0" width="15.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.5" y="3486.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (51 samples, 1.30%)</title><rect x="23.5" y="3459.0" width="15.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.5" y="3470.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (51 samples, 1.30%)</title><rect x="23.5" y="3443.0" width="15.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.5" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/network/util/TransportFrameDecoder.channelRead (51 samples, 1.30%)</title><rect x="23.5" y="3427.0" width="15.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.5" y="3438.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (49 samples, 1.25%)</title><rect x="23.5" y="3411.0" width="14.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="26.5" y="3422.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (49 samples, 1.25%)</title><rect x="23.5" y="3395.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.5" y="3406.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (49 samples, 1.25%)</title><rect x="23.5" y="3379.0" width="14.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.5" y="3390.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageDecoder.channelRead (49 samples, 1.25%)</title><rect x="23.5" y="3363.0" width="14.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="26.5" y="3374.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (49 samples, 1.25%)</title><rect x="23.5" y="3347.0" width="14.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.5" y="3358.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (49 samples, 1.25%)</title><rect x="23.5" y="3331.0" width="14.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.5" y="3342.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (49 samples, 1.25%)</title><rect x="23.5" y="3315.0" width="14.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.5" y="3326.0"></text>
</g>
<g>
<title>io/netty/handler/timeout/IdleStateHandler.channelRead (49 samples, 1.25%)</title><rect x="23.5" y="3299.0" width="14.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.5" y="3310.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (49 samples, 1.25%)</title><rect x="23.5" y="3283.0" width="14.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="26.5" y="3294.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (49 samples, 1.25%)</title><rect x="23.5" y="3267.0" width="14.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.5" y="3278.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (49 samples, 1.25%)</title><rect x="23.5" y="3251.0" width="14.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.5" y="3262.0"></text>
</g>
<g>
<title>io/netty/channel/SimpleChannelInboundHandler.channelRead (49 samples, 1.25%)</title><rect x="23.5" y="3235.0" width="14.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.5" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/network/server/TransportChannelHandler.channelRead0 (49 samples, 1.25%)</title><rect x="23.5" y="3219.0" width="14.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="26.5" y="3230.0"></text>
</g>
<g>
<title>org/apache/spark/network/server/TransportChannelHandler.channelRead0 (49 samples, 1.25%)</title><rect x="23.5" y="3203.0" width="14.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.5" y="3214.0"></text>
</g>
<g>
<title>org/apache/spark/network/client/TransportResponseHandler.handle (22 samples, 0.56%)</title><rect x="23.5" y="3187.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.5" y="3198.0"></text>
</g>
<g>
<title>org/apache/spark/network/shuffle/OneForOneBlockFetcher$1.onSuccess (1 samples, 0.03%)</title><rect x="23.5" y="3171.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.5" y="3182.0"></text>
</g>
<g>
<title>org/apache/spark/network/client/TransportClient.fetchChunk (1 samples, 0.03%)</title><rect x="23.5" y="3155.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.5" y="3166.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.writeAndFlush (1 samples, 0.03%)</title><rect x="23.5" y="3139.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.5" y="3150.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.writeAndFlush (1 samples, 0.03%)</title><rect x="23.5" y="3123.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.5" y="3134.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (1 samples, 0.03%)</title><rect x="23.5" y="3107.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="26.5" y="3118.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (1 samples, 0.03%)</title><rect x="23.5" y="3091.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="26.5" y="3102.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="23.5" y="3075.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="26.5" y="3086.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (1 samples, 0.03%)</title><rect x="23.5" y="3059.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.5" y="3070.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.03%)</title><rect x="23.5" y="3043.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.5" y="3054.0"></text>
</g>
<g>
<title>io/netty/handler/timeout/IdleStateHandler.write (1 samples, 0.03%)</title><rect x="23.5" y="3027.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.5" y="3038.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="23.5" y="3011.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.5" y="3022.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="23.5" y="2995.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="26.5" y="3006.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (1 samples, 0.03%)</title><rect x="23.5" y="2979.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="26.5" y="2990.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.03%)</title><rect x="23.5" y="2963.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.5" y="2974.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.write (1 samples, 0.03%)</title><rect x="23.5" y="2947.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.5" y="2958.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="23.5" y="2931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.5" y="2942.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="23.5" y="2915.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="26.5" y="2926.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (1 samples, 0.03%)</title><rect x="23.5" y="2899.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.5" y="2910.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.03%)</title><rect x="23.5" y="2883.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="26.5" y="2894.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.write (1 samples, 0.03%)</title><rect x="23.5" y="2867.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.5" y="2878.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.write (1 samples, 0.03%)</title><rect x="23.5" y="2851.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.5" y="2862.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.addMessage (1 samples, 0.03%)</title><rect x="23.5" y="2835.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.5" y="2846.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.incrementPendingOutboundBytes (1 samples, 0.03%)</title><rect x="23.5" y="2819.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="26.5" y="2830.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.addAndGet (1 samples, 0.03%)</title><rect x="23.5" y="2803.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.5" y="2814.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (1 samples, 0.03%)</title><rect x="23.5" y="2787.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="26.5" y="2798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getAndAddLong (1 samples, 0.03%)</title><rect x="23.5" y="2771.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="26.5" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/network/shuffle/OneForOneBlockFetcher$ChunkCallback.onSuccess (21 samples, 0.53%)</title><rect x="23.8" y="3171.0" width="6.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="26.8" y="3182.0"></text>
</g>
<g>
<title>org/apache/spark/network/shuffle/RetryingBlockFetcher$RetryingBlockFetchListener.onBlockFetchSuccess (21 samples, 0.53%)</title><rect x="23.8" y="3155.0" width="6.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.8" y="3166.0"></text>
</g>
<g>
<title>org/apache/spark/network/BlockTransferService$$anon$1.onBlockFetchSuccess (21 samples, 0.53%)</title><rect x="23.8" y="3139.0" width="6.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.8" y="3150.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4 samples, 0.10%)</title><rect x="23.8" y="3123.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="26.8" y="3134.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.10%)</title><rect x="23.8" y="3107.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.8" y="3118.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (4 samples, 0.10%)</title><rect x="23.8" y="3091.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="26.8" y="3102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.10%)</title><rect x="23.8" y="3075.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="26.8" y="3086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.10%)</title><rect x="23.8" y="3059.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="26.8" y="3070.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.08%)</title><rect x="23.8" y="3043.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="26.8" y="3054.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="24.7" y="3043.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="27.7" y="3054.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (1 samples, 0.03%)</title><rect x="24.7" y="3027.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="27.7" y="3038.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="24.7" y="3011.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="27.7" y="3022.0"></text>
</g>
<g>
<title>HeapRegionManager::allocate_humongous(unsigned int) (1 samples, 0.03%)</title><rect x="24.7" y="2995.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="27.7" y="3006.0"></text>
</g>
<g>
<title>HeapRegionManager::find_contiguous_in_free_list(unsigned int) (1 samples, 0.03%)</title><rect x="24.7" y="2979.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="27.7" y="2990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (3 samples, 0.08%)</title><rect x="25.0" y="3123.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.0" y="3134.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (3 samples, 0.08%)</title><rect x="25.0" y="3107.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="28.0" y="3118.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.putBuffer (3 samples, 0.08%)</title><rect x="25.0" y="3091.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.0" y="3102.0"></text>
</g>
<g>
<title>jdk/internal/misc/ScopedMemoryAccess.copyMemory (3 samples, 0.08%)</title><rect x="25.0" y="3075.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.0" y="3086.0"></text>
</g>
<g>
<title>jdk/internal/misc/ScopedMemoryAccess.copyMemoryInternal (3 samples, 0.08%)</title><rect x="25.0" y="3059.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.0" y="3070.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.08%)</title><rect x="25.0" y="3043.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="28.0" y="3054.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.05%)</title><rect x="25.0" y="3027.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.0" y="3038.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (2 samples, 0.05%)</title><rect x="25.0" y="3011.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.0" y="3022.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="25.0" y="2995.0" width="0.6" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="28.0" y="3006.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="25.6" y="3027.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="28.6" y="3038.0"></text>
</g>
<g>
<title>org/apache/spark/network/buffer/NettyManagedBuffer.nioByteBuffer (12 samples, 0.31%)</title><rect x="25.9" y="3123.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="28.9" y="3134.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.nioBuffer (12 samples, 0.31%)</title><rect x="25.9" y="3107.0" width="3.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="28.9" y="3118.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractDerivedByteBuf.nioBuffer (12 samples, 0.31%)</title><rect x="25.9" y="3091.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.9" y="3102.0"></text>
</g>
<g>
<title>io/netty/buffer/CompositeByteBuf.nioBuffer (12 samples, 0.31%)</title><rect x="25.9" y="3075.0" width="3.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="28.9" y="3086.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (3 samples, 0.08%)</title><rect x="25.9" y="3059.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="28.9" y="3070.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3 samples, 0.08%)</title><rect x="25.9" y="3043.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="28.9" y="3054.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (3 samples, 0.08%)</title><rect x="25.9" y="3027.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="28.9" y="3038.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.08%)</title><rect x="25.9" y="3011.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="28.9" y="3022.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.08%)</title><rect x="25.9" y="2995.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="28.9" y="3006.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.08%)</title><rect x="25.9" y="2979.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="28.9" y="2990.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (9 samples, 0.23%)</title><rect x="26.8" y="3059.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="29.8" y="3070.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (9 samples, 0.23%)</title><rect x="26.8" y="3043.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="29.8" y="3054.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.putBuffer (9 samples, 0.23%)</title><rect x="26.8" y="3027.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="29.8" y="3038.0"></text>
</g>
<g>
<title>jdk/internal/misc/ScopedMemoryAccess.copyMemory (9 samples, 0.23%)</title><rect x="26.8" y="3011.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="29.8" y="3022.0"></text>
</g>
<g>
<title>jdk/internal/misc/ScopedMemoryAccess.copyMemoryInternal (9 samples, 0.23%)</title><rect x="26.8" y="2995.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="29.8" y="3006.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (9 samples, 0.23%)</title><rect x="26.8" y="2979.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="29.8" y="2990.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="26.8" y="2963.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="29.8" y="2974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (3 samples, 0.08%)</title><rect x="27.1" y="2963.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="30.1" y="2974.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (3 samples, 0.08%)</title><rect x="27.1" y="2947.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="30.1" y="2958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="27.1" y="2931.0" width="0.9" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="30.1" y="2942.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="28.0" y="2963.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="31.0" y="2974.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="28.3" y="2963.0" width="0.6" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="31.3" y="2974.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="28.9" y="2963.0" width="0.6" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="31.9" y="2974.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.success (2 samples, 0.05%)</title><rect x="29.5" y="3123.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.5" y="3134.0"></text>
</g>
<g>
<title>scala/concurrent/Promise.success$ (2 samples, 0.05%)</title><rect x="29.5" y="3107.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.5" y="3118.0"></text>
</g>
<g>
<title>scala/concurrent/Promise.success (2 samples, 0.05%)</title><rect x="29.5" y="3091.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="32.5" y="3102.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.complete (2 samples, 0.05%)</title><rect x="29.5" y="3075.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.5" y="3086.0"></text>
</g>
<g>
<title>scala/concurrent/Promise.complete$ (2 samples, 0.05%)</title><rect x="29.5" y="3059.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="32.5" y="3070.0"></text>
</g>
<g>
<title>scala/concurrent/Promise.complete (2 samples, 0.05%)</title><rect x="29.5" y="3043.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.5" y="3054.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.tryComplete (2 samples, 0.05%)</title><rect x="29.5" y="3027.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.5" y="3038.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.$anonfun$tryComplete$1$adapted (2 samples, 0.05%)</title><rect x="29.5" y="3011.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.5" y="3022.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.$anonfun$tryComplete$1 (2 samples, 0.05%)</title><rect x="29.5" y="2995.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="32.5" y="3006.0"></text>
</g>
<g>
<title>scala/concurrent/impl/CallbackRunnable.executeWithValue (2 samples, 0.05%)</title><rect x="29.5" y="2979.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.5" y="2990.0"></text>
</g>
<g>
<title>scala/concurrent/Future$InternalCallbackExecutor$.execute (2 samples, 0.05%)</title><rect x="29.5" y="2963.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.5" y="2974.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor.execute$ (2 samples, 0.05%)</title><rect x="29.5" y="2947.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="32.5" y="2958.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor.execute (2 samples, 0.05%)</title><rect x="29.5" y="2931.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="32.5" y="2942.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="29.5" y="2915.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.5" y="2926.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (1 samples, 0.03%)</title><rect x="29.5" y="2899.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.5" y="2910.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="29.5" y="2883.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="32.5" y="2894.0"></text>
</g>
<g>
<title>scala/concurrent/Future$InternalCallbackExecutor$.unbatchedExecute (1 samples, 0.03%)</title><rect x="29.8" y="2915.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.8" y="2926.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor$Batch.run (1 samples, 0.03%)</title><rect x="29.8" y="2899.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="32.8" y="2910.0"></text>
</g>
<g>
<title>scala/concurrent/BlockContext$.withBlockContext (1 samples, 0.03%)</title><rect x="29.8" y="2883.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.8" y="2894.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcV$sp.apply (1 samples, 0.03%)</title><rect x="29.8" y="2867.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.8" y="2878.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor$Batch$$Lambda$550.0x0000000801abd898.apply$mcV$sp (1 samples, 0.03%)</title><rect x="29.8" y="2851.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="32.8" y="2862.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor$Batch.$anonfun$run$1 (1 samples, 0.03%)</title><rect x="29.8" y="2835.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="32.8" y="2846.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor$Batch.processBatch$1 (1 samples, 0.03%)</title><rect x="29.8" y="2819.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.8" y="2830.0"></text>
</g>
<g>
<title>scala/concurrent/impl/CallbackRunnable.run (1 samples, 0.03%)</title><rect x="29.8" y="2803.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.8" y="2814.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$CompletionLatch.apply (1 samples, 0.03%)</title><rect x="29.8" y="2787.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.8" y="2798.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$CompletionLatch.apply (1 samples, 0.03%)</title><rect x="29.8" y="2771.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="32.8" y="2782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (1 samples, 0.03%)</title><rect x="29.8" y="2755.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.8" y="2766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="29.8" y="2739.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="32.8" y="2750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="29.8" y="2723.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="32.8" y="2734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="29.8" y="2707.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.8" y="2718.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="29.8" y="2691.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="32.8" y="2702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="29.8" y="2675.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="32.8" y="2686.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="29.8" y="2659.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="32.8" y="2670.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="29.8" y="2643.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="32.8" y="2654.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="29.8" y="2627.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="32.8" y="2638.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="29.8" y="2611.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="32.8" y="2622.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="29.8" y="2595.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="32.8" y="2606.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="29.8" y="2579.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="32.8" y="2590.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="29.8" y="2563.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="32.8" y="2574.0"></text>
</g>
<g>
<title>org/apache/spark/network/server/TransportRequestHandler.handle (27 samples, 0.69%)</title><rect x="30.1" y="3187.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.1" y="3198.0"></text>
</g>
<g>
<title>org/apache/spark/network/server/ChunkFetchRequestHandler.processFetchRequest (23 samples, 0.59%)</title><rect x="30.1" y="3171.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.1" y="3182.0"></text>
</g>
<g>
<title>org/apache/spark/network/server/ChunkFetchRequestHandler.respond (23 samples, 0.59%)</title><rect x="30.1" y="3155.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.1" y="3166.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.writeAndFlush (23 samples, 0.59%)</title><rect x="30.1" y="3139.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="33.1" y="3150.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.writeAndFlush (23 samples, 0.59%)</title><rect x="30.1" y="3123.0" width="6.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="33.1" y="3134.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (23 samples, 0.59%)</title><rect x="30.1" y="3107.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.1" y="3118.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (23 samples, 0.59%)</title><rect x="30.1" y="3091.0" width="6.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.1" y="3102.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (23 samples, 0.59%)</title><rect x="30.1" y="3075.0" width="6.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.1" y="3086.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (23 samples, 0.59%)</title><rect x="30.1" y="3059.0" width="6.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="33.1" y="3070.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (23 samples, 0.59%)</title><rect x="30.1" y="3043.0" width="6.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.1" y="3054.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelDuplexHandler.flush (23 samples, 0.59%)</title><rect x="30.1" y="3027.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.1" y="3038.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (23 samples, 0.59%)</title><rect x="30.1" y="3011.0" width="6.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.1" y="3022.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (23 samples, 0.59%)</title><rect x="30.1" y="2995.0" width="6.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.1" y="3006.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (23 samples, 0.59%)</title><rect x="30.1" y="2979.0" width="6.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="33.1" y="2990.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (23 samples, 0.59%)</title><rect x="30.1" y="2963.0" width="6.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.1" y="2974.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (23 samples, 0.59%)</title><rect x="30.1" y="2947.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.1" y="2958.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.flush0 (23 samples, 0.59%)</title><rect x="30.1" y="2931.0" width="6.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.1" y="2942.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (23 samples, 0.59%)</title><rect x="30.1" y="2915.0" width="6.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="33.1" y="2926.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doWrite (23 samples, 0.59%)</title><rect x="30.1" y="2899.0" width="6.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.1" y="2910.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.doWrite0 (23 samples, 0.59%)</title><rect x="30.1" y="2883.0" width="6.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.1" y="2894.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.doWriteInternal (23 samples, 0.59%)</title><rect x="30.1" y="2867.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.1" y="2878.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.remove (1 samples, 0.03%)</title><rect x="30.1" y="2851.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.1" y="2862.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.safeRelease (1 samples, 0.03%)</title><rect x="30.1" y="2835.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.1" y="2846.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (1 samples, 0.03%)</title><rect x="30.1" y="2819.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="33.1" y="2830.0"></text>
</g>
<g>
<title>io/netty/util/AbstractReferenceCounted.release (1 samples, 0.03%)</title><rect x="30.1" y="2803.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.1" y="2814.0"></text>
</g>
<g>
<title>io/netty/util/AbstractReferenceCounted.handleRelease (1 samples, 0.03%)</title><rect x="30.1" y="2787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="33.1" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/network/protocol/MessageWithHeader.deallocate (1 samples, 0.03%)</title><rect x="30.1" y="2771.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.1" y="2782.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.release (1 samples, 0.03%)</title><rect x="30.1" y="2755.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="33.1" y="2766.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractReferenceCountedByteBuf.handleRelease (1 samples, 0.03%)</title><rect x="30.1" y="2739.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.1" y="2750.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.deallocate (1 samples, 0.03%)</title><rect x="30.1" y="2723.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.1" y="2734.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.free (1 samples, 0.03%)</title><rect x="30.1" y="2707.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="33.1" y="2718.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.add (1 samples, 0.03%)</title><rect x="30.1" y="2691.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="33.1" y="2702.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.add (1 samples, 0.03%)</title><rect x="30.1" y="2675.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.1" y="2686.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscArrayQueue.offer (1 samples, 0.03%)</title><rect x="30.1" y="2659.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.1" y="2670.0"></text>
</g>
<g>
<title>io/netty/util/internal/shaded/org/jctools/queues/MpscArrayQueueProducerIndexField.casProducerIndex (1 samples, 0.03%)</title><rect x="30.1" y="2643.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.1" y="2654.0"></text>
</g>
<g>
<title>sun/misc/Unsafe.compareAndSwapLong (1 samples, 0.03%)</title><rect x="30.1" y="2627.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="33.1" y="2638.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doWriteFileRegion (22 samples, 0.56%)</title><rect x="30.4" y="2851.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.4" y="2862.0"></text>
</g>
<g>
<title>org/apache/spark/network/protocol/MessageWithHeader.transferTo (22 samples, 0.56%)</title><rect x="30.4" y="2835.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.4" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/network/protocol/MessageWithHeader.copyByteBuf (1 samples, 0.03%)</title><rect x="30.4" y="2819.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.4" y="2830.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.03%)</title><rect x="30.4" y="2803.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="33.4" y="2814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.03%)</title><rect x="30.4" y="2787.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="33.4" y="2798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.03%)</title><rect x="30.4" y="2771.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.4" y="2782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1 samples, 0.03%)</title><rect x="30.4" y="2755.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.4" y="2766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (1 samples, 0.03%)</title><rect x="30.4" y="2739.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="33.4" y="2750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.03%)</title><rect x="30.4" y="2723.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.4" y="2734.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="30.4" y="2707.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="33.4" y="2718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="30.4" y="2691.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="33.4" y="2702.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="30.4" y="2675.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="33.4" y="2686.0"></text>
</g>
<g>
<title>__x64_sys_write (1 samples, 0.03%)</title><rect x="30.4" y="2659.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="33.4" y="2670.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.03%)</title><rect x="30.4" y="2643.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="33.4" y="2654.0"></text>
</g>
<g>
<title>vfs_write (1 samples, 0.03%)</title><rect x="30.4" y="2627.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="33.4" y="2638.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.03%)</title><rect x="30.4" y="2611.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="33.4" y="2622.0"></text>
</g>
<g>
<title>new_sync_write (1 samples, 0.03%)</title><rect x="30.4" y="2595.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="33.4" y="2606.0"></text>
</g>
<g>
<title>sock_write_iter (1 samples, 0.03%)</title><rect x="30.4" y="2579.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="33.4" y="2590.0"></text>
</g>
<g>
<title>sock_sendmsg (1 samples, 0.03%)</title><rect x="30.4" y="2563.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="33.4" y="2574.0"></text>
</g>
<g>
<title>inet6_sendmsg (1 samples, 0.03%)</title><rect x="30.4" y="2547.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="33.4" y="2558.0"></text>
</g>
<g>
<title>tcp_sendmsg (1 samples, 0.03%)</title><rect x="30.4" y="2531.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="33.4" y="2542.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.03%)</title><rect x="30.4" y="2515.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="33.4" y="2526.0"></text>
</g>
<g>
<title>tcp_push (1 samples, 0.03%)</title><rect x="30.4" y="2499.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="33.4" y="2510.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (1 samples, 0.03%)</title><rect x="30.4" y="2483.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="33.4" y="2494.0"></text>
</g>
<g>
<title>tcp_write_xmit (1 samples, 0.03%)</title><rect x="30.4" y="2467.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="33.4" y="2478.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (1 samples, 0.03%)</title><rect x="30.4" y="2451.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="33.4" y="2462.0"></text>
</g>
<g>
<title>ip_queue_xmit (1 samples, 0.03%)</title><rect x="30.4" y="2435.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="33.4" y="2446.0"></text>
</g>
<g>
<title>__ip_queue_xmit (1 samples, 0.03%)</title><rect x="30.4" y="2419.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="33.4" y="2430.0"></text>
</g>
<g>
<title>ip_local_out (1 samples, 0.03%)</title><rect x="30.4" y="2403.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="33.4" y="2414.0"></text>
</g>
<g>
<title>ip_output (1 samples, 0.03%)</title><rect x="30.4" y="2387.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="33.4" y="2398.0"></text>
</g>
<g>
<title>ip_finish_output (1 samples, 0.03%)</title><rect x="30.4" y="2371.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="33.4" y="2382.0"></text>
</g>
<g>
<title>__ip_finish_output (1 samples, 0.03%)</title><rect x="30.4" y="2355.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="33.4" y="2366.0"></text>
</g>
<g>
<title>ip_finish_output2 (1 samples, 0.03%)</title><rect x="30.4" y="2339.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="33.4" y="2350.0"></text>
</g>
<g>
<title>dev_queue_xmit (1 samples, 0.03%)</title><rect x="30.4" y="2323.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="33.4" y="2334.0"></text>
</g>
<g>
<title>__dev_queue_xmit (1 samples, 0.03%)</title><rect x="30.4" y="2307.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="33.4" y="2318.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (1 samples, 0.03%)</title><rect x="30.4" y="2291.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="33.4" y="2302.0"></text>
</g>
<g>
<title>loopback_xmit (1 samples, 0.03%)</title><rect x="30.4" y="2275.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="33.4" y="2286.0"></text>
</g>
<g>
<title>sk_free (1 samples, 0.03%)</title><rect x="30.4" y="2259.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="33.4" y="2270.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBufferFileRegion.transferTo (21 samples, 0.53%)</title><rect x="30.7" y="2819.0" width="6.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.7" y="2830.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="30.7" y="2803.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="33.7" y="2814.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (20 samples, 0.51%)</title><rect x="31.0" y="2803.0" width="6.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.0" y="2814.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (20 samples, 0.51%)</title><rect x="31.0" y="2787.0" width="6.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="34.0" y="2798.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (20 samples, 0.51%)</title><rect x="31.0" y="2771.0" width="6.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="34.0" y="2782.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.08%)</title><rect x="31.0" y="2755.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="34.0" y="2766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (3 samples, 0.08%)</title><rect x="31.0" y="2739.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="34.0" y="2750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.putBuffer (3 samples, 0.08%)</title><rect x="31.0" y="2723.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.0" y="2734.0"></text>
</g>
<g>
<title>jdk/internal/misc/ScopedMemoryAccess.copyMemory (3 samples, 0.08%)</title><rect x="31.0" y="2707.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="34.0" y="2718.0"></text>
</g>
<g>
<title>jdk/internal/misc/ScopedMemoryAccess.copyMemoryInternal (3 samples, 0.08%)</title><rect x="31.0" y="2691.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.0" y="2702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (3 samples, 0.08%)</title><rect x="31.0" y="2675.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="34.0" y="2686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemoryChecks (2 samples, 0.05%)</title><rect x="31.0" y="2659.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="34.0" y="2670.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.checkSize (2 samples, 0.05%)</title><rect x="31.0" y="2643.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="34.0" y="2654.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="31.0" y="2627.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="34.0" y="2638.0"></text>
</g>
<g>
<title>jshort_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="31.6" y="2659.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="34.6" y="2670.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (17 samples, 0.43%)</title><rect x="31.9" y="2755.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.9" y="2766.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (17 samples, 0.43%)</title><rect x="31.9" y="2739.0" width="5.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.9" y="2750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (17 samples, 0.43%)</title><rect x="31.9" y="2723.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.9" y="2734.0"></text>
</g>
<g>
<title>__write (17 samples, 0.43%)</title><rect x="31.9" y="2707.0" width="5.1" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="34.9" y="2718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (17 samples, 0.43%)</title><rect x="31.9" y="2691.0" width="5.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="34.9" y="2702.0"></text>
</g>
<g>
<title>do_syscall_64 (17 samples, 0.43%)</title><rect x="31.9" y="2675.0" width="5.1" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="34.9" y="2686.0"></text>
</g>
<g>
<title>__x64_sys_write (17 samples, 0.43%)</title><rect x="31.9" y="2659.0" width="5.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="34.9" y="2670.0"></text>
</g>
<g>
<title>ksys_write (17 samples, 0.43%)</title><rect x="31.9" y="2643.0" width="5.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="34.9" y="2654.0"></text>
</g>
<g>
<title>vfs_write (17 samples, 0.43%)</title><rect x="31.9" y="2627.0" width="5.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="34.9" y="2638.0"></text>
</g>
<g>
<title>__vfs_write (17 samples, 0.43%)</title><rect x="31.9" y="2611.0" width="5.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="34.9" y="2622.0"></text>
</g>
<g>
<title>new_sync_write (17 samples, 0.43%)</title><rect x="31.9" y="2595.0" width="5.1" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="34.9" y="2606.0"></text>
</g>
<g>
<title>sock_write_iter (17 samples, 0.43%)</title><rect x="31.9" y="2579.0" width="5.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="34.9" y="2590.0"></text>
</g>
<g>
<title>sock_sendmsg (16 samples, 0.41%)</title><rect x="32.2" y="2563.0" width="4.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="35.2" y="2574.0"></text>
</g>
<g>
<title>inet6_sendmsg (16 samples, 0.41%)</title><rect x="32.2" y="2547.0" width="4.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="35.2" y="2558.0"></text>
</g>
<g>
<title>tcp_sendmsg (16 samples, 0.41%)</title><rect x="32.2" y="2531.0" width="4.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="35.2" y="2542.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (16 samples, 0.41%)</title><rect x="32.2" y="2515.0" width="4.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="35.2" y="2526.0"></text>
</g>
<g>
<title>__sk_flush_backlog (1 samples, 0.03%)</title><rect x="32.2" y="2499.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="35.2" y="2510.0"></text>
</g>
<g>
<title>__release_sock (1 samples, 0.03%)</title><rect x="32.2" y="2483.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="35.2" y="2494.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (1 samples, 0.03%)</title><rect x="32.2" y="2467.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="35.2" y="2478.0"></text>
</g>
<g>
<title>tcp_data_queue (1 samples, 0.03%)</title><rect x="32.2" y="2451.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="35.2" y="2462.0"></text>
</g>
<g>
<title>_copy_from_iter_full (5 samples, 0.13%)</title><rect x="32.5" y="2499.0" width="1.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="35.5" y="2510.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (5 samples, 0.13%)</title><rect x="32.5" y="2483.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="35.5" y="2494.0"></text>
</g>
<g>
<title>sk_page_frag_refill (5 samples, 0.13%)</title><rect x="34.0" y="2499.0" width="1.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="37.0" y="2510.0"></text>
</g>
<g>
<title>skb_page_frag_refill (5 samples, 0.13%)</title><rect x="34.0" y="2483.0" width="1.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="37.0" y="2494.0"></text>
</g>
<g>
<title>alloc_pages_current (5 samples, 0.13%)</title><rect x="34.0" y="2467.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="37.0" y="2478.0"></text>
</g>
<g>
<title>__alloc_pages_nodemask (5 samples, 0.13%)</title><rect x="34.0" y="2451.0" width="1.5" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="37.0" y="2462.0"></text>
</g>
<g>
<title>get_page_from_freelist (5 samples, 0.13%)</title><rect x="34.0" y="2435.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="37.0" y="2446.0"></text>
</g>
<g>
<title>clear_page_orig (5 samples, 0.13%)</title><rect x="34.0" y="2419.0" width="1.5" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="37.0" y="2430.0"></text>
</g>
<g>
<title>skb_entail (1 samples, 0.03%)</title><rect x="35.5" y="2499.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="38.5" y="2510.0"></text>
</g>
<g>
<title>tcp_push_one (4 samples, 0.10%)</title><rect x="35.8" y="2499.0" width="1.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="38.8" y="2510.0"></text>
</g>
<g>
<title>tcp_write_xmit (4 samples, 0.10%)</title><rect x="35.8" y="2483.0" width="1.2" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="38.8" y="2494.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (3 samples, 0.08%)</title><rect x="35.8" y="2467.0" width="0.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="38.8" y="2478.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.05%)</title><rect x="35.8" y="2451.0" width="0.6" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="38.8" y="2462.0"></text>
</g>
<g>
<title>__ip_queue_xmit (2 samples, 0.05%)</title><rect x="35.8" y="2435.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="38.8" y="2446.0"></text>
</g>
<g>
<title>ip_local_out (2 samples, 0.05%)</title><rect x="35.8" y="2419.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="38.8" y="2430.0"></text>
</g>
<g>
<title>ip_output (2 samples, 0.05%)</title><rect x="35.8" y="2403.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="38.8" y="2414.0"></text>
</g>
<g>
<title>ip_finish_output (2 samples, 0.05%)</title><rect x="35.8" y="2387.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="38.8" y="2398.0"></text>
</g>
<g>
<title>__ip_finish_output (2 samples, 0.05%)</title><rect x="35.8" y="2371.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="38.8" y="2382.0"></text>
</g>
<g>
<title>ip_finish_output2 (2 samples, 0.05%)</title><rect x="35.8" y="2355.0" width="0.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="38.8" y="2366.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.05%)</title><rect x="35.8" y="2339.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="38.8" y="2350.0"></text>
</g>
<g>
<title>do_softirq.part.0 (2 samples, 0.05%)</title><rect x="35.8" y="2323.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="38.8" y="2334.0"></text>
</g>
<g>
<title>do_softirq_own_stack (2 samples, 0.05%)</title><rect x="35.8" y="2307.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="38.8" y="2318.0"></text>
</g>
<g>
<title>__softirqentry_text_start (2 samples, 0.05%)</title><rect x="35.8" y="2291.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="38.8" y="2302.0"></text>
</g>
<g>
<title>net_rx_action (1 samples, 0.03%)</title><rect x="36.1" y="2275.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="39.1" y="2286.0"></text>
</g>
<g>
<title>process_backlog (1 samples, 0.03%)</title><rect x="36.1" y="2259.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="39.1" y="2270.0"></text>
</g>
<g>
<title>__netif_receive_skb (1 samples, 0.03%)</title><rect x="36.1" y="2243.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="39.1" y="2254.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (1 samples, 0.03%)</title><rect x="36.1" y="2227.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="39.1" y="2238.0"></text>
</g>
<g>
<title>ip_rcv (1 samples, 0.03%)</title><rect x="36.1" y="2211.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="39.1" y="2222.0"></text>
</g>
<g>
<title>ip_rcv_finish (1 samples, 0.03%)</title><rect x="36.1" y="2195.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="39.1" y="2206.0"></text>
</g>
<g>
<title>ip_local_deliver (1 samples, 0.03%)</title><rect x="36.1" y="2179.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="39.1" y="2190.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (1 samples, 0.03%)</title><rect x="36.1" y="2163.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="39.1" y="2174.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (1 samples, 0.03%)</title><rect x="36.1" y="2147.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="39.1" y="2158.0"></text>
</g>
<g>
<title>tcp_v4_rcv (1 samples, 0.03%)</title><rect x="36.1" y="2131.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="39.1" y="2142.0"></text>
</g>
<g>
<title>__inet_lookup_established (1 samples, 0.03%)</title><rect x="36.1" y="2115.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="39.1" y="2126.0"></text>
</g>
<g>
<title>skb_clone (1 samples, 0.03%)</title><rect x="36.4" y="2451.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="39.4" y="2462.0"></text>
</g>
<g>
<title>__skb_clone (1 samples, 0.03%)</title><rect x="36.4" y="2435.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="39.4" y="2446.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (1 samples, 0.03%)</title><rect x="36.7" y="2467.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="39.7" y="2478.0"></text>
</g>
<g>
<title>sk_reset_timer (1 samples, 0.03%)</title><rect x="36.7" y="2451.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="39.7" y="2462.0"></text>
</g>
<g>
<title>mod_timer (1 samples, 0.03%)</title><rect x="36.7" y="2435.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="39.7" y="2446.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="36.7" y="2419.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="39.7" y="2430.0"></text>
</g>
<g>
<title>org/apache/spark/network/server/TransportRequestHandler.processRpcRequest (4 samples, 0.10%)</title><rect x="37.0" y="3171.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.0" y="3182.0"></text>
</g>
<g>
<title>org/apache/spark/network/netty/NettyBlockRpcServer.receive (4 samples, 0.10%)</title><rect x="37.0" y="3155.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.0" y="3166.0"></text>
</g>
<g>
<title>org/apache/spark/network/server/TransportRequestHandler$1.onSuccess (2 samples, 0.05%)</title><rect x="37.0" y="3139.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="40.0" y="3150.0"></text>
</g>
<g>
<title>org/apache/spark/network/server/TransportRequestHandler.access$000 (2 samples, 0.05%)</title><rect x="37.0" y="3123.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.0" y="3134.0"></text>
</g>
<g>
<title>org/apache/spark/network/server/TransportRequestHandler.respond (2 samples, 0.05%)</title><rect x="37.0" y="3107.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.0" y="3118.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.writeAndFlush (2 samples, 0.05%)</title><rect x="37.0" y="3091.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.0" y="3102.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.writeAndFlush (2 samples, 0.05%)</title><rect x="37.0" y="3075.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.0" y="3086.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (2 samples, 0.05%)</title><rect x="37.0" y="3059.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.0" y="3070.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (2 samples, 0.05%)</title><rect x="37.0" y="3043.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.0" y="3054.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (2 samples, 0.05%)</title><rect x="37.0" y="3027.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.0" y="3038.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (2 samples, 0.05%)</title><rect x="37.0" y="3011.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="40.0" y="3022.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (1 samples, 0.03%)</title><rect x="37.0" y="2995.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="40.0" y="3006.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelDuplexHandler.flush (1 samples, 0.03%)</title><rect x="37.0" y="2979.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="40.0" y="2990.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (1 samples, 0.03%)</title><rect x="37.0" y="2963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.0" y="2974.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (1 samples, 0.03%)</title><rect x="37.0" y="2947.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.0" y="2958.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (1 samples, 0.03%)</title><rect x="37.0" y="2931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.0" y="2942.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (1 samples, 0.03%)</title><rect x="37.0" y="2915.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.0" y="2926.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (1 samples, 0.03%)</title><rect x="37.0" y="2899.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.0" y="2910.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.flush0 (1 samples, 0.03%)</title><rect x="37.0" y="2883.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.0" y="2894.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (1 samples, 0.03%)</title><rect x="37.0" y="2867.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.0" y="2878.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doWrite (1 samples, 0.03%)</title><rect x="37.0" y="2851.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.0" y="2862.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.doWrite0 (1 samples, 0.03%)</title><rect x="37.0" y="2835.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="40.0" y="2846.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.doWriteInternal (1 samples, 0.03%)</title><rect x="37.0" y="2819.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.0" y="2830.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doWriteFileRegion (1 samples, 0.03%)</title><rect x="37.0" y="2803.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.0" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/network/protocol/MessageWithHeader.transferTo (1 samples, 0.03%)</title><rect x="37.0" y="2787.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.0" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/network/protocol/MessageWithHeader.copyByteBuf (1 samples, 0.03%)</title><rect x="37.0" y="2771.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.0" y="2782.0"></text>
</g>
<g>
<title>io/netty/buffer/UnpooledHeapByteBuf.nioBuffer (1 samples, 0.03%)</title><rect x="37.0" y="2755.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.0" y="2766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.slice (1 samples, 0.03%)</title><rect x="37.0" y="2739.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.0" y="2750.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="37.0" y="2723.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="40.0" y="2734.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="37.0" y="2707.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="40.0" y="2718.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, Thread*) (1 samples, 0.03%)</title><rect x="37.0" y="2691.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="40.0" y="2702.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, Thread*) (1 samples, 0.03%)</title><rect x="37.0" y="2675.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="40.0" y="2686.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::compile(methodHandle const&amp;, int, CompLevel, Thread*) (1 samples, 0.03%)</title><rect x="37.0" y="2659.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="40.0" y="2670.0"></text>
</g>
<g>
<title>CompileBroker::compile_method(methodHandle const&amp;, int, int, methodHandle const&amp;, int, CompileTask::CompileReason, Thread*) (1 samples, 0.03%)</title><rect x="37.0" y="2643.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="40.0" y="2654.0"></text>
</g>
<g>
<title>CompilerOracle::has_any_command_set() (1 samples, 0.03%)</title><rect x="37.0" y="2627.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="40.0" y="2638.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.03%)</title><rect x="37.3" y="2995.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.3" y="3006.0"></text>
</g>
<g>
<title>io/netty/handler/timeout/IdleStateHandler.write (1 samples, 0.03%)</title><rect x="37.3" y="2979.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.3" y="2990.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="37.3" y="2963.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.3" y="2974.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="37.3" y="2947.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="40.3" y="2958.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite (1 samples, 0.03%)</title><rect x="37.3" y="2931.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.3" y="2942.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWrite0 (1 samples, 0.03%)</title><rect x="37.3" y="2915.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.3" y="2926.0"></text>
</g>
<g>
<title>io/netty/handler/codec/MessageToMessageEncoder.write (1 samples, 0.03%)</title><rect x="37.3" y="2899.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.3" y="2910.0"></text>
</g>
<g>
<title>org/apache/spark/network/protocol/MessageEncoder.encode (1 samples, 0.03%)</title><rect x="37.3" y="2883.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.3" y="2894.0"></text>
</g>
<g>
<title>org/apache/spark/network/protocol/MessageEncoder.encode (1 samples, 0.03%)</title><rect x="37.3" y="2867.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.3" y="2878.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.buffer (1 samples, 0.03%)</title><rect x="37.3" y="2851.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.3" y="2862.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (1 samples, 0.03%)</title><rect x="37.3" y="2835.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.3" y="2846.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (1 samples, 0.03%)</title><rect x="37.3" y="2819.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.3" y="2830.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (1 samples, 0.03%)</title><rect x="37.3" y="2803.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="40.3" y="2814.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (1 samples, 0.03%)</title><rect x="37.3" y="2787.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.3" y="2798.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (1 samples, 0.03%)</title><rect x="37.3" y="2771.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.3" y="2782.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocateTiny (1 samples, 0.03%)</title><rect x="37.3" y="2755.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="40.3" y="2766.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache.allocate (1 samples, 0.03%)</title><rect x="37.3" y="2739.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.3" y="2750.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$MemoryRegionCache.allocate (1 samples, 0.03%)</title><rect x="37.3" y="2723.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="40.3" y="2734.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolThreadCache$SubPageMemoryRegionCache.initBuf (1 samples, 0.03%)</title><rect x="37.3" y="2707.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.3" y="2718.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (1 samples, 0.03%)</title><rect x="37.3" y="2691.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.3" y="2702.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (1 samples, 0.03%)</title><rect x="37.3" y="2675.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.3" y="2686.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledUnsafeDirectByteBuf.init (1 samples, 0.03%)</title><rect x="37.3" y="2659.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="40.3" y="2670.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.init (1 samples, 0.03%)</title><rect x="37.3" y="2643.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="40.3" y="2654.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.init0 (1 samples, 0.03%)</title><rect x="37.3" y="2627.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.3" y="2638.0"></text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.03%)</title><rect x="37.3" y="2611.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="40.3" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/network/shuffle/protocol/BlockTransferMessage$Decoder.fromByteBuffer (1 samples, 0.03%)</title><rect x="37.6" y="3139.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.6" y="3150.0"></text>
</g>
<g>
<title>io/netty/buffer/Unpooled.wrappedBuffer (1 samples, 0.03%)</title><rect x="37.6" y="3123.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.6" y="3134.0"></text>
</g>
<g>
<title>io/netty/buffer/UnpooledUnsafeDirectByteBuf.&lt;init&gt; (1 samples, 0.03%)</title><rect x="37.6" y="3107.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="40.6" y="3118.0"></text>
</g>
<g>
<title>io/netty/buffer/UnpooledDirectByteBuf.&lt;init&gt; (1 samples, 0.03%)</title><rect x="37.6" y="3091.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.6" y="3102.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="37.6" y="3075.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="40.6" y="3086.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.map (1 samples, 0.03%)</title><rect x="37.9" y="3139.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="40.9" y="3150.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map$ (1 samples, 0.03%)</title><rect x="37.9" y="3123.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="40.9" y="3134.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map (1 samples, 0.03%)</title><rect x="37.9" y="3107.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="40.9" y="3118.0"></text>
</g>
<g>
<title>scala/collection/immutable/Range.foreach (1 samples, 0.03%)</title><rect x="37.9" y="3091.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="40.9" y="3102.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike$$Lambda$89.0x0000000801826bb8.apply (1 samples, 0.03%)</title><rect x="37.9" y="3075.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="40.9" y="3086.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.$anonfun$map$1 (1 samples, 0.03%)</title><rect x="37.9" y="3059.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.9" y="3070.0"></text>
</g>
<g>
<title>org/apache/spark/network/netty/NettyBlockRpcServer$$Lambda$2633.0x000000080248c4d8.apply (1 samples, 0.03%)</title><rect x="37.9" y="3043.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.9" y="3054.0"></text>
</g>
<g>
<title>org/apache/spark/network/netty/NettyBlockRpcServer.$anonfun$receive$2$adapted (1 samples, 0.03%)</title><rect x="37.9" y="3027.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="40.9" y="3038.0"></text>
</g>
<g>
<title>org/apache/spark/network/netty/NettyBlockRpcServer.$anonfun$receive$2 (1 samples, 0.03%)</title><rect x="37.9" y="3011.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="40.9" y="3022.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.getLocalBlockData (1 samples, 0.03%)</title><rect x="37.9" y="2995.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="40.9" y="3006.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.getLocalBytes (1 samples, 0.03%)</title><rect x="37.9" y="2979.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="40.9" y="2990.0"></text>
</g>
<g>
<title>scala/Option.map (1 samples, 0.03%)</title><rect x="37.9" y="2963.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="40.9" y="2974.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$$Lambda$2637.0x000000080248d610.apply (1 samples, 0.03%)</title><rect x="37.9" y="2947.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="40.9" y="2958.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.$anonfun$getLocalBytes$3 (1 samples, 0.03%)</title><rect x="37.9" y="2931.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="40.9" y="2942.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.doGetLocalBytes (1 samples, 0.03%)</title><rect x="37.9" y="2915.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="40.9" y="2926.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="37.9" y="2899.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="40.9" y="2910.0"></text>
</g>
<g>
<title>org/apache/spark/network/util/TransportFrameDecoder.decodeNext (2 samples, 0.05%)</title><rect x="38.2" y="3411.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.2" y="3422.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="38.2" y="3395.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="41.2" y="3406.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.compositeBuffer (1 samples, 0.03%)</title><rect x="38.5" y="3395.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.5" y="3406.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.compositeDirectBuffer (1 samples, 0.03%)</title><rect x="38.5" y="3379.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="41.5" y="3390.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (1 samples, 0.03%)</title><rect x="38.5" y="3363.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="41.5" y="3374.0"></text>
</g>
<g>
<title>InterpreterRuntime::_new(JavaThread*, ConstantPool*, int) (1 samples, 0.03%)</title><rect x="38.5" y="3347.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="41.5" y="3358.0"></text>
</g>
<g>
<title>InstanceKlass::initialize_impl(Thread*) (1 samples, 0.03%)</title><rect x="38.5" y="3331.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="41.5" y="3342.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.03%)</title><rect x="38.5" y="3315.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="41.5" y="3326.0"></text>
</g>
<g>
<title>InstanceKlass::link_class_impl(Thread*) (1 samples, 0.03%)</title><rect x="38.5" y="3299.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="41.5" y="3310.0"></text>
</g>
<g>
<title>Verifier::verify(InstanceKlass*, bool, Thread*) (1 samples, 0.03%)</title><rect x="38.5" y="3283.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="41.5" y="3294.0"></text>
</g>
<g>
<title>ClassVerifier::verify_class(Thread*) (1 samples, 0.03%)</title><rect x="38.5" y="3267.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="41.5" y="3278.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultMaxMessagesRecvByteBufAllocator$MaxMessageHandle.allocate (3 samples, 0.08%)</title><rect x="38.8" y="3539.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="41.8" y="3550.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.ioBuffer (3 samples, 0.08%)</title><rect x="38.8" y="3523.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="41.8" y="3534.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (3 samples, 0.08%)</title><rect x="38.8" y="3507.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="41.8" y="3518.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.directBuffer (3 samples, 0.08%)</title><rect x="38.8" y="3491.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="41.8" y="3502.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.newDirectBuffer (3 samples, 0.08%)</title><rect x="38.8" y="3475.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="41.8" y="3486.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBufAllocator.toLeakAwareBuffer (1 samples, 0.03%)</title><rect x="38.8" y="3459.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="41.8" y="3470.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track (1 samples, 0.03%)</title><rect x="38.8" y="3443.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="41.8" y="3454.0"></text>
</g>
<g>
<title>io/netty/util/ResourceLeakDetector.track0 (1 samples, 0.03%)</title><rect x="38.8" y="3427.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="41.8" y="3438.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="38.8" y="3411.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="41.8" y="3422.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="38.8" y="3395.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="41.8" y="3406.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="38.8" y="3379.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="41.8" y="3390.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="38.8" y="3363.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="41.8" y="3374.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="38.8" y="3347.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="41.8" y="3358.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="38.8" y="3331.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="41.8" y="3342.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (2 samples, 0.05%)</title><rect x="39.1" y="3459.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="42.1" y="3470.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocate (2 samples, 0.05%)</title><rect x="39.1" y="3443.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.1" y="3454.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolArena.allocateNormal (2 samples, 0.05%)</title><rect x="39.1" y="3427.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="42.1" y="3438.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunkList.allocate (2 samples, 0.05%)</title><rect x="39.1" y="3411.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.1" y="3422.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.allocate (2 samples, 0.05%)</title><rect x="39.1" y="3395.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="42.1" y="3406.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.allocateRun (1 samples, 0.03%)</title><rect x="39.1" y="3379.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="42.1" y="3390.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.allocateNode (1 samples, 0.03%)</title><rect x="39.1" y="3363.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.1" y="3374.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.updateParentsAlloc (1 samples, 0.03%)</title><rect x="39.1" y="3347.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="42.1" y="3358.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBuf (1 samples, 0.03%)</title><rect x="39.4" y="3379.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.4" y="3390.0"></text>
</g>
<g>
<title>io/netty/buffer/PoolChunk.initBufWithSubpage (1 samples, 0.03%)</title><rect x="39.4" y="3363.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="42.4" y="3374.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBufAllocator.threadCache (1 samples, 0.03%)</title><rect x="39.4" y="3347.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="42.4" y="3358.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/FastThreadLocal.get (1 samples, 0.03%)</title><rect x="39.4" y="3331.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="42.4" y="3342.0"></text>
</g>
<g>
<title>io/netty/util/internal/InternalThreadLocalMap.indexedVariable (1 samples, 0.03%)</title><rect x="39.4" y="3315.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="42.4" y="3326.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.shouldBreakReadReady (1 samples, 0.03%)</title><rect x="39.7" y="3539.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="42.7" y="3550.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.isInputShutdown0 (1 samples, 0.03%)</title><rect x="39.7" y="3523.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="42.7" y="3534.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.isInputShutdown (1 samples, 0.03%)</title><rect x="39.7" y="3507.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="42.7" y="3518.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doReadBytes (14 samples, 0.36%)</title><rect x="40.0" y="3539.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="43.0" y="3550.0"></text>
</g>
<g>
<title>io/netty/buffer/AbstractByteBuf.writeBytes (14 samples, 0.36%)</title><rect x="40.0" y="3523.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.0" y="3534.0"></text>
</g>
<g>
<title>io/netty/buffer/PooledByteBuf.setBytes (14 samples, 0.36%)</title><rect x="40.0" y="3507.0" width="4.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="43.0" y="3518.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.read (14 samples, 0.36%)</title><rect x="40.0" y="3491.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="43.0" y="3502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="40.0" y="3475.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.0" y="3486.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="40.0" y="3459.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="43.0" y="3470.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (13 samples, 0.33%)</title><rect x="40.3" y="3475.0" width="4.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="43.3" y="3486.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.read (13 samples, 0.33%)</title><rect x="40.3" y="3459.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="43.3" y="3470.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.readIntoNativeBuffer (13 samples, 0.33%)</title><rect x="40.3" y="3443.0" width="4.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="43.3" y="3454.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read (13 samples, 0.33%)</title><rect x="40.3" y="3427.0" width="4.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="43.3" y="3438.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.read0 (13 samples, 0.33%)</title><rect x="40.3" y="3411.0" width="4.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="43.3" y="3422.0"></text>
</g>
<g>
<title>read (13 samples, 0.33%)</title><rect x="40.3" y="3395.0" width="4.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="43.3" y="3406.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (13 samples, 0.33%)</title><rect x="40.3" y="3379.0" width="4.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="43.3" y="3390.0"></text>
</g>
<g>
<title>do_syscall_64 (13 samples, 0.33%)</title><rect x="40.3" y="3363.0" width="4.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="43.3" y="3374.0"></text>
</g>
<g>
<title>__x64_sys_read (13 samples, 0.33%)</title><rect x="40.3" y="3347.0" width="4.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="43.3" y="3358.0"></text>
</g>
<g>
<title>ksys_read (13 samples, 0.33%)</title><rect x="40.3" y="3331.0" width="4.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="43.3" y="3342.0"></text>
</g>
<g>
<title>vfs_read (13 samples, 0.33%)</title><rect x="40.3" y="3315.0" width="4.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="43.3" y="3326.0"></text>
</g>
<g>
<title>__vfs_read (13 samples, 0.33%)</title><rect x="40.3" y="3299.0" width="4.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="43.3" y="3310.0"></text>
</g>
<g>
<title>new_sync_read (13 samples, 0.33%)</title><rect x="40.3" y="3283.0" width="4.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="43.3" y="3294.0"></text>
</g>
<g>
<title>sock_read_iter (13 samples, 0.33%)</title><rect x="40.3" y="3267.0" width="4.0" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="43.3" y="3278.0"></text>
</g>
<g>
<title>sock_recvmsg (13 samples, 0.33%)</title><rect x="40.3" y="3251.0" width="4.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="43.3" y="3262.0"></text>
</g>
<g>
<title>inet6_recvmsg (13 samples, 0.33%)</title><rect x="40.3" y="3235.0" width="4.0" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="43.3" y="3246.0"></text>
</g>
<g>
<title>tcp_recvmsg (13 samples, 0.33%)</title><rect x="40.3" y="3219.0" width="4.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="43.3" y="3230.0"></text>
</g>
<g>
<title>__kfree_skb (1 samples, 0.03%)</title><rect x="40.6" y="3203.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="43.6" y="3214.0"></text>
</g>
<g>
<title>skb_release_all (1 samples, 0.03%)</title><rect x="40.6" y="3187.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="43.6" y="3198.0"></text>
</g>
<g>
<title>skb_release_data (1 samples, 0.03%)</title><rect x="40.6" y="3171.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="43.6" y="3182.0"></text>
</g>
<g>
<title>__put_page (1 samples, 0.03%)</title><rect x="40.6" y="3155.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="43.6" y="3166.0"></text>
</g>
<g>
<title>__put_compound_page (1 samples, 0.03%)</title><rect x="40.6" y="3139.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="43.6" y="3150.0"></text>
</g>
<g>
<title>free_compound_page (1 samples, 0.03%)</title><rect x="40.6" y="3123.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="43.6" y="3134.0"></text>
</g>
<g>
<title>__free_pages_ok (1 samples, 0.03%)</title><rect x="40.6" y="3107.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="43.6" y="3118.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (11 samples, 0.28%)</title><rect x="40.9" y="3203.0" width="3.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="43.9" y="3214.0"></text>
</g>
<g>
<title>__skb_datagram_iter (11 samples, 0.28%)</title><rect x="40.9" y="3187.0" width="3.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="43.9" y="3198.0"></text>
</g>
<g>
<title>simple_copy_to_iter (11 samples, 0.28%)</title><rect x="40.9" y="3171.0" width="3.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="43.9" y="3182.0"></text>
</g>
<g>
<title>_copy_to_iter (11 samples, 0.28%)</title><rect x="40.9" y="3155.0" width="3.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="43.9" y="3166.0"></text>
</g>
<g>
<title>copy_user_generic_unrolled (11 samples, 0.28%)</title><rect x="40.9" y="3139.0" width="3.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="43.9" y="3150.0"></text>
</g>
<g>
<title>io/netty/channel/nio/NioEventLoop.select (1 samples, 0.03%)</title><rect x="44.3" y="3603.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.3" y="3614.0"></text>
</g>
<g>
<title>io/netty/channel/nio/SelectedSelectionKeySetSelector.select (1 samples, 0.03%)</title><rect x="44.3" y="3587.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.3" y="3598.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.select (1 samples, 0.03%)</title><rect x="44.3" y="3571.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.3" y="3582.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.lockAndDoSelect (1 samples, 0.03%)</title><rect x="44.3" y="3555.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="47.3" y="3566.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.doSelect (1 samples, 0.03%)</title><rect x="44.3" y="3539.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="47.3" y="3550.0"></text>
</g>
<g>
<title>sun/nio/ch/EPollSelectorImpl.processEvents (1 samples, 0.03%)</title><rect x="44.3" y="3523.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="47.3" y="3534.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectorImpl.processReadyEvents (1 samples, 0.03%)</title><rect x="44.3" y="3507.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.3" y="3518.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.translateAndSetReadyOps (1 samples, 0.03%)</title><rect x="44.3" y="3491.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.3" y="3502.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateAndSetReadyOps (1 samples, 0.03%)</title><rect x="44.3" y="3475.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.3" y="3486.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.translateReadyOps (1 samples, 0.03%)</title><rect x="44.3" y="3459.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="47.3" y="3470.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/SingleThreadEventExecutor.runAllTasks (2 samples, 0.05%)</title><rect x="44.6" y="3603.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.6" y="3614.0"></text>
</g>
<g>
<title>io/netty/util/concurrent/AbstractEventExecutor.safeExecute (2 samples, 0.05%)</title><rect x="44.6" y="3587.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.6" y="3598.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask.run (2 samples, 0.05%)</title><rect x="44.6" y="3571.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="47.6" y="3582.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (2 samples, 0.05%)</title><rect x="44.6" y="3555.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.6" y="3566.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (2 samples, 0.05%)</title><rect x="44.6" y="3539.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.6" y="3550.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelDuplexHandler.flush (2 samples, 0.05%)</title><rect x="44.6" y="3523.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="47.6" y="3534.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.flush (2 samples, 0.05%)</title><rect x="44.6" y="3507.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="47.6" y="3518.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush (2 samples, 0.05%)</title><rect x="44.6" y="3491.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="47.6" y="3502.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (2 samples, 0.05%)</title><rect x="44.6" y="3475.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="47.6" y="3486.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline$HeadContext.flush (2 samples, 0.05%)</title><rect x="44.6" y="3459.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.6" y="3470.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush (2 samples, 0.05%)</title><rect x="44.6" y="3443.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="47.6" y="3454.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.flush0 (2 samples, 0.05%)</title><rect x="44.6" y="3427.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="47.6" y="3438.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (2 samples, 0.05%)</title><rect x="44.6" y="3411.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.6" y="3422.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doWrite (2 samples, 0.05%)</title><rect x="44.6" y="3395.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.6" y="3406.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.doWrite0 (2 samples, 0.05%)</title><rect x="44.6" y="3379.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="47.6" y="3390.0"></text>
</g>
<g>
<title>io/netty/channel/nio/AbstractNioByteChannel.doWriteInternal (2 samples, 0.05%)</title><rect x="44.6" y="3363.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="47.6" y="3374.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.remove (1 samples, 0.03%)</title><rect x="44.6" y="3347.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="47.6" y="3358.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.safeRelease (1 samples, 0.03%)</title><rect x="44.6" y="3331.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="47.6" y="3342.0"></text>
</g>
<g>
<title>io/netty/util/ReferenceCountUtil.release (1 samples, 0.03%)</title><rect x="44.6" y="3315.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="47.6" y="3326.0"></text>
</g>
<g>
<title>io/netty/util/AbstractReferenceCounted.release (1 samples, 0.03%)</title><rect x="44.6" y="3299.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.6" y="3310.0"></text>
</g>
<g>
<title>io/netty/util/internal/ReferenceCountUpdater.release (1 samples, 0.03%)</title><rect x="44.6" y="3283.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.6" y="3294.0"></text>
</g>
<g>
<title>io/netty/channel/socket/nio/NioSocketChannel.doWriteFileRegion (1 samples, 0.03%)</title><rect x="44.9" y="3347.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.9" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/network/protocol/MessageWithHeader.transferTo (1 samples, 0.03%)</title><rect x="44.9" y="3331.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="47.9" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/network/protocol/MessageWithHeader.copyByteBuf (1 samples, 0.03%)</title><rect x="44.9" y="3315.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="47.9" y="3326.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketChannelImpl.write (1 samples, 0.03%)</title><rect x="44.9" y="3299.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="47.9" y="3310.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.03%)</title><rect x="44.9" y="3283.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="47.9" y="3294.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (1 samples, 0.03%)</title><rect x="44.9" y="3267.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="47.9" y="3278.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (1 samples, 0.03%)</title><rect x="44.9" y="3251.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="47.9" y="3262.0"></text>
</g>
<g>
<title>sun/nio/ch/SocketDispatcher.write (1 samples, 0.03%)</title><rect x="44.9" y="3235.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="47.9" y="3246.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.03%)</title><rect x="44.9" y="3219.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="47.9" y="3230.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="44.9" y="3203.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="47.9" y="3214.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="44.9" y="3187.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="47.9" y="3198.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="44.9" y="3171.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="47.9" y="3182.0"></text>
</g>
<g>
<title>__x64_sys_write (1 samples, 0.03%)</title><rect x="44.9" y="3155.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="47.9" y="3166.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.03%)</title><rect x="44.9" y="3139.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="47.9" y="3150.0"></text>
</g>
<g>
<title>vfs_write (1 samples, 0.03%)</title><rect x="44.9" y="3123.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="47.9" y="3134.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.03%)</title><rect x="44.9" y="3107.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="47.9" y="3118.0"></text>
</g>
<g>
<title>new_sync_write (1 samples, 0.03%)</title><rect x="44.9" y="3091.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="47.9" y="3102.0"></text>
</g>
<g>
<title>sock_write_iter (1 samples, 0.03%)</title><rect x="44.9" y="3075.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="47.9" y="3086.0"></text>
</g>
<g>
<title>sock_sendmsg (1 samples, 0.03%)</title><rect x="44.9" y="3059.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="47.9" y="3070.0"></text>
</g>
<g>
<title>inet6_sendmsg (1 samples, 0.03%)</title><rect x="44.9" y="3043.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="47.9" y="3054.0"></text>
</g>
<g>
<title>tcp_sendmsg (1 samples, 0.03%)</title><rect x="44.9" y="3027.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="47.9" y="3038.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (1 samples, 0.03%)</title><rect x="44.9" y="3011.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="47.9" y="3022.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (1 samples, 0.03%)</title><rect x="44.9" y="2995.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="47.9" y="3006.0"></text>
</g>
<g>
<title>__alloc_skb (1 samples, 0.03%)</title><rect x="44.9" y="2979.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="47.9" y="2990.0"></text>
</g>
<g>
<title>ksize (1 samples, 0.03%)</title><rect x="44.9" y="2963.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="47.9" y="2974.0"></text>
</g>
<g>
<title>__ksize (1 samples, 0.03%)</title><rect x="44.9" y="2947.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="47.9" y="2958.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,057 samples, 52.38%)</title><rect x="45.2" y="3667.0" width="618.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="48.2" y="3678.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,057 samples, 52.38%)</title><rect x="45.2" y="3651.0" width="618.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="48.2" y="3662.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (38 samples, 0.97%)</title><rect x="45.2" y="3635.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="48.2" y="3646.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (38 samples, 0.97%)</title><rect x="45.2" y="3619.0" width="11.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="48.2" y="3630.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/MessageLoop$$anon$1.run (37 samples, 0.94%)</title><rect x="45.2" y="3603.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.2" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/MessageLoop.org$apache$spark$rpc$netty$MessageLoop$$receiveLoop (37 samples, 0.94%)</title><rect x="45.2" y="3587.0" width="11.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="48.2" y="3598.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (5 samples, 0.13%)</title><rect x="45.2" y="3571.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="48.2" y="3582.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (5 samples, 0.13%)</title><rect x="45.2" y="3555.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.2" y="3566.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinPool.managedBlock (3 samples, 0.08%)</title><rect x="45.2" y="3539.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="48.2" y="3550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionNode.block (3 samples, 0.08%)</title><rect x="45.2" y="3523.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="48.2" y="3534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.08%)</title><rect x="45.2" y="3507.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="48.2" y="3518.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.08%)</title><rect x="45.2" y="3491.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="48.2" y="3502.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.03%)</title><rect x="45.2" y="3475.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="48.2" y="3486.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="45.5" y="3475.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="48.5" y="3486.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.05%)</title><rect x="45.5" y="3459.0" width="0.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="48.5" y="3470.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="45.8" y="3443.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="48.8" y="3454.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="45.8" y="3427.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="48.8" y="3438.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="45.8" y="3411.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="48.8" y="3422.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="45.8" y="3395.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="48.8" y="3406.0"></text>
</g>
<g>
<title>futex_wait (1 samples, 0.03%)</title><rect x="45.8" y="3379.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="48.8" y="3390.0"></text>
</g>
<g>
<title>futex_wait_setup (1 samples, 0.03%)</title><rect x="45.8" y="3363.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="48.8" y="3374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.enableWait (1 samples, 0.03%)</title><rect x="46.1" y="3539.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="49.1" y="3550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (1 samples, 0.03%)</title><rect x="46.4" y="3539.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="49.4" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Inbox.process (32 samples, 0.81%)</title><rect x="46.7" y="3571.0" width="9.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="49.7" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Inbox.safelyCall (31 samples, 0.79%)</title><rect x="47.0" y="3555.0" width="9.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.0" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Inbox$$Lambda$387.0x0000000801a06ae0.apply$mcV$sp (31 samples, 0.79%)</title><rect x="47.0" y="3539.0" width="9.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.0" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Inbox.$anonfun$process$1 (31 samples, 0.79%)</title><rect x="47.0" y="3523.0" width="9.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.0" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint$$anonfun$receiveAndReply$1.applyOrElse (27 samples, 0.69%)</title><rect x="47.3" y="3507.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.3" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcCallContext.reply (3 samples, 0.08%)</title><rect x="47.3" y="3491.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="50.3" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/LocalNettyRpcCallContext.send (3 samples, 0.08%)</title><rect x="47.3" y="3475.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="50.3" y="3486.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.success (3 samples, 0.08%)</title><rect x="47.3" y="3459.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="50.3" y="3470.0"></text>
</g>
<g>
<title>scala/concurrent/Promise.success$ (3 samples, 0.08%)</title><rect x="47.3" y="3443.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.3" y="3454.0"></text>
</g>
<g>
<title>scala/concurrent/Promise.success (3 samples, 0.08%)</title><rect x="47.3" y="3427.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.3" y="3438.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.complete (3 samples, 0.08%)</title><rect x="47.3" y="3411.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.3" y="3422.0"></text>
</g>
<g>
<title>scala/concurrent/Promise.complete$ (3 samples, 0.08%)</title><rect x="47.3" y="3395.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.3" y="3406.0"></text>
</g>
<g>
<title>scala/concurrent/Promise.complete (3 samples, 0.08%)</title><rect x="47.3" y="3379.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.3" y="3390.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.tryComplete (3 samples, 0.08%)</title><rect x="47.3" y="3363.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.3" y="3374.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.$anonfun$tryComplete$1$adapted (3 samples, 0.08%)</title><rect x="47.3" y="3347.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="50.3" y="3358.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.$anonfun$tryComplete$1 (3 samples, 0.08%)</title><rect x="47.3" y="3331.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.3" y="3342.0"></text>
</g>
<g>
<title>scala/concurrent/impl/CallbackRunnable.executeWithValue (3 samples, 0.08%)</title><rect x="47.3" y="3315.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.3" y="3326.0"></text>
</g>
<g>
<title>scala/concurrent/impl/ExecutionContextImpl$$anon$4.execute (3 samples, 0.08%)</title><rect x="47.3" y="3299.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.3" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/util/ThreadUtils$$anon$1.execute (3 samples, 0.08%)</title><rect x="47.3" y="3283.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="50.3" y="3294.0"></text>
</g>
<g>
<title>scala/concurrent/impl/CallbackRunnable.run (3 samples, 0.08%)</title><rect x="47.3" y="3267.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.3" y="3278.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv$$Lambda$539.0x0000000801ab9c10.apply (3 samples, 0.08%)</title><rect x="47.3" y="3251.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.3" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.$anonfun$askAbortable$5$adapted (3 samples, 0.08%)</title><rect x="47.3" y="3235.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.3" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.$anonfun$askAbortable$5 (3 samples, 0.08%)</title><rect x="47.3" y="3219.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="50.3" y="3230.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.onSuccess$1 (3 samples, 0.08%)</title><rect x="47.3" y="3203.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="50.3" y="3214.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.trySuccess (3 samples, 0.08%)</title><rect x="47.3" y="3187.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.3" y="3198.0"></text>
</g>
<g>
<title>scala/concurrent/Promise.trySuccess$ (3 samples, 0.08%)</title><rect x="47.3" y="3171.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="50.3" y="3182.0"></text>
</g>
<g>
<title>scala/concurrent/Promise.trySuccess (3 samples, 0.08%)</title><rect x="47.3" y="3155.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="50.3" y="3166.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.tryComplete (3 samples, 0.08%)</title><rect x="47.3" y="3139.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="50.3" y="3150.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.$anonfun$tryComplete$1$adapted (2 samples, 0.05%)</title><rect x="47.3" y="3123.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.3" y="3134.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.$anonfun$tryComplete$1 (2 samples, 0.05%)</title><rect x="47.3" y="3107.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.3" y="3118.0"></text>
</g>
<g>
<title>scala/concurrent/impl/CallbackRunnable.executeWithValue (2 samples, 0.05%)</title><rect x="47.3" y="3091.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="50.3" y="3102.0"></text>
</g>
<g>
<title>scala/concurrent/Future$InternalCallbackExecutor$.execute (2 samples, 0.05%)</title><rect x="47.3" y="3075.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.3" y="3086.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor.execute$ (2 samples, 0.05%)</title><rect x="47.3" y="3059.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="50.3" y="3070.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor.execute (2 samples, 0.05%)</title><rect x="47.3" y="3043.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.3" y="3054.0"></text>
</g>
<g>
<title>scala/concurrent/Future$InternalCallbackExecutor$.unbatchedExecute (2 samples, 0.05%)</title><rect x="47.3" y="3027.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.3" y="3038.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor$Batch.run (2 samples, 0.05%)</title><rect x="47.3" y="3011.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.3" y="3022.0"></text>
</g>
<g>
<title>scala/concurrent/BlockContext$.withBlockContext (2 samples, 0.05%)</title><rect x="47.3" y="2995.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="50.3" y="3006.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcV$sp.apply (2 samples, 0.05%)</title><rect x="47.3" y="2979.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="50.3" y="2990.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor$Batch$$Lambda$550.0x0000000801abd898.apply$mcV$sp (2 samples, 0.05%)</title><rect x="47.3" y="2963.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="50.3" y="2974.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor$Batch.$anonfun$run$1 (2 samples, 0.05%)</title><rect x="47.3" y="2947.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="50.3" y="2958.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv$$Lambda$542.0x0000000801abb720.apply (1 samples, 0.03%)</title><rect x="47.3" y="2931.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="50.3" y="2942.0"></text>
</g>
<g>
<title>scala/concurrent/BatchingExecutor$Batch.processBatch$1 (1 samples, 0.03%)</title><rect x="47.6" y="2931.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="50.6" y="2942.0"></text>
</g>
<g>
<title>scala/collection/immutable/Nil$.equals (1 samples, 0.03%)</title><rect x="47.6" y="2915.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="50.6" y="2926.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="47.6" y="2899.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="50.6" y="2910.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.tryCompleteAndGetListeners (1 samples, 0.03%)</title><rect x="47.9" y="3123.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.9" y="3134.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicReference.compareAndSet (1 samples, 0.03%)</title><rect x="47.9" y="3107.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.9" y="3118.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (1 samples, 0.03%)</title><rect x="47.9" y="3091.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="50.9" y="3102.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleReferences$FieldInstanceReadWrite.compareAndSet (1 samples, 0.03%)</title><rect x="47.9" y="3075.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="50.9" y="3086.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/LiveListenerBus.post (4 samples, 0.10%)</title><rect x="48.2" y="3491.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="51.2" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/LiveListenerBus.postToQueues (4 samples, 0.10%)</title><rect x="48.2" y="3475.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.2" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/AsyncEventQueue.post (4 samples, 0.10%)</title><rect x="48.2" y="3459.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="51.2" y="3470.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (4 samples, 0.10%)</title><rect x="48.2" y="3443.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="51.2" y="3454.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (4 samples, 0.10%)</title><rect x="48.2" y="3427.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="51.2" y="3438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (1 samples, 0.03%)</title><rect x="48.2" y="3411.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="51.2" y="3422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (1 samples, 0.03%)</title><rect x="48.2" y="3395.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="51.2" y="3406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (3 samples, 0.08%)</title><rect x="48.5" y="3411.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="51.5" y="3422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.08%)</title><rect x="48.5" y="3395.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.5" y="3406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (3 samples, 0.08%)</title><rect x="48.5" y="3379.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="51.5" y="3390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.08%)</title><rect x="48.5" y="3363.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="51.5" y="3374.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (3 samples, 0.08%)</title><rect x="48.5" y="3347.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="51.5" y="3358.0"></text>
</g>
<g>
<title>__pthread_cond_signal (3 samples, 0.08%)</title><rect x="48.5" y="3331.0" width="0.9" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="51.5" y="3342.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.08%)</title><rect x="48.5" y="3315.0" width="0.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="51.5" y="3326.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.08%)</title><rect x="48.5" y="3299.0" width="0.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="51.5" y="3310.0"></text>
</g>
<g>
<title>__x64_sys_futex (3 samples, 0.08%)</title><rect x="48.5" y="3283.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="51.5" y="3294.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.05%)</title><rect x="48.8" y="3267.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="51.8" y="3278.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.05%)</title><rect x="48.8" y="3251.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="51.8" y="3262.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.05%)</title><rect x="48.8" y="3235.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="51.8" y="3246.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.05%)</title><rect x="48.8" y="3219.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="51.8" y="3230.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.05%)</title><rect x="48.8" y="3203.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="51.8" y="3214.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint.org$apache$spark$storage$BlockManagerMasterEndpoint$$getLocationsAndStatus (1 samples, 0.03%)</title><rect x="49.4" y="3491.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="52.4" y="3502.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayBuffer.find (1 samples, 0.03%)</title><rect x="49.4" y="3475.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.4" y="3486.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.find$ (1 samples, 0.03%)</title><rect x="49.4" y="3459.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="52.4" y="3470.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.find (1 samples, 0.03%)</title><rect x="49.4" y="3443.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="52.4" y="3454.0"></text>
</g>
<g>
<title>scala/collection/AbstractSeq.prefixLength (1 samples, 0.03%)</title><rect x="49.4" y="3427.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="52.4" y="3438.0"></text>
</g>
<g>
<title>scala/collection/GenSeqLike.prefixLength$ (1 samples, 0.03%)</title><rect x="49.4" y="3411.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="52.4" y="3422.0"></text>
</g>
<g>
<title>scala/collection/GenSeqLike.prefixLength (1 samples, 0.03%)</title><rect x="49.4" y="3395.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="52.4" y="3406.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayBuffer.segmentLength (1 samples, 0.03%)</title><rect x="49.4" y="3379.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="52.4" y="3390.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.segmentLength$ (1 samples, 0.03%)</title><rect x="49.4" y="3363.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="52.4" y="3374.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.segmentLength (1 samples, 0.03%)</title><rect x="49.4" y="3347.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="52.4" y="3358.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized$$Lambda$806.0x0000000801b71b00.apply (1 samples, 0.03%)</title><rect x="49.4" y="3331.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="52.4" y="3342.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.$anonfun$find$1$adapted (1 samples, 0.03%)</title><rect x="49.4" y="3315.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="52.4" y="3326.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.$anonfun$find$1 (1 samples, 0.03%)</title><rect x="49.4" y="3299.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="52.4" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint$$Lambda$2618.0x0000000802461138.apply (1 samples, 0.03%)</title><rect x="49.4" y="3283.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="52.4" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint.$anonfun$getLocationsAndStatus$5$adapted (1 samples, 0.03%)</title><rect x="49.4" y="3267.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="52.4" y="3278.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint.$anonfun$getLocationsAndStatus$5 (1 samples, 0.03%)</title><rect x="49.4" y="3251.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="52.4" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint.org$apache$spark$storage$BlockManagerMasterEndpoint$$getLocationsMultipleBlockIds (1 samples, 0.03%)</title><rect x="49.7" y="3491.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="52.7" y="3502.0"></text>
</g>
<g>
<title>scala/Predef$DummyImplicit$.dummyImplicit (1 samples, 0.03%)</title><rect x="49.7" y="3475.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="52.7" y="3486.0"></text>
</g>
<g>
<title>scala/Predef$DummyImplicit.&lt;init&gt; (1 samples, 0.03%)</title><rect x="49.7" y="3459.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="52.7" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint.org$apache$spark$storage$BlockManagerMasterEndpoint$$removeBlockFromWorkers (2 samples, 0.05%)</title><rect x="50.0" y="3491.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.0" y="3502.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashSet.foreach (2 samples, 0.05%)</title><rect x="50.0" y="3475.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.0" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint$$Lambda$2645.0x00000008024922c0.apply (2 samples, 0.05%)</title><rect x="50.0" y="3459.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.0" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint.$anonfun$removeBlockFromWorkers$1 (2 samples, 0.05%)</title><rect x="50.0" y="3443.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.0" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.ask (1 samples, 0.03%)</title><rect x="50.0" y="3427.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.0" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.ask (1 samples, 0.03%)</title><rect x="50.0" y="3411.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.0" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.askAbortable (1 samples, 0.03%)</title><rect x="50.0" y="3395.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.0" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.askAbortable (1 samples, 0.03%)</title><rect x="50.0" y="3379.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.0" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postLocalMessage (1 samples, 0.03%)</title><rect x="50.0" y="3363.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.0" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postMessage (1 samples, 0.03%)</title><rect x="50.0" y="3347.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.0" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/DedicatedMessageLoop.post (1 samples, 0.03%)</title><rect x="50.0" y="3331.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="53.0" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/MessageLoop.setActive (1 samples, 0.03%)</title><rect x="50.0" y="3315.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.0" y="3326.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.03%)</title><rect x="50.0" y="3299.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.0" y="3310.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.03%)</title><rect x="50.0" y="3283.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.0" y="3294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="50.0" y="3267.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.0" y="3278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="50.0" y="3251.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.0" y="3262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="50.0" y="3235.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="53.0" y="3246.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="50.0" y="3219.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.0" y="3230.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="50.0" y="3203.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.0" y="3214.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="50.0" y="3187.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="53.0" y="3198.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="50.0" y="3171.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="53.0" y="3182.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="50.0" y="3155.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="53.0" y="3166.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="50.0" y="3139.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="53.0" y="3150.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="50.0" y="3123.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="53.0" y="3134.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="50.0" y="3107.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="53.0" y="3118.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="50.0" y="3091.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="53.0" y="3102.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="50.0" y="3075.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="53.0" y="3086.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="50.0" y="3059.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="53.0" y="3070.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMessages$RemoveBlock.&lt;init&gt; (1 samples, 0.03%)</title><rect x="50.3" y="3427.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="53.3" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint.org$apache$spark$storage$BlockManagerMasterEndpoint$$removeBroadcast (2 samples, 0.05%)</title><rect x="50.6" y="3491.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="53.6" y="3502.0"></text>
</g>
<g>
<title>scala/collection/concurrent/TrieMap.values (1 samples, 0.03%)</title><rect x="50.6" y="3475.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="53.6" y="3486.0"></text>
</g>
<g>
<title>scala/collection/concurrent/TrieMap.values (1 samples, 0.03%)</title><rect x="50.6" y="3459.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.6" y="3470.0"></text>
</g>
<g>
<title>scala/collection/MapLike.values$ (1 samples, 0.03%)</title><rect x="50.6" y="3443.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="53.6" y="3454.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="50.6" y="3427.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="53.6" y="3438.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="50.6" y="3411.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="53.6" y="3422.0"></text>
</g>
<g>
<title>Handle::Handle(Thread*, oopDesc*) (1 samples, 0.03%)</title><rect x="50.6" y="3395.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="53.6" y="3406.0"></text>
</g>
<g>
<title>scala/collection/immutable/List.map (1 samples, 0.03%)</title><rect x="50.9" y="3475.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="53.9" y="3486.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map$ (1 samples, 0.03%)</title><rect x="50.9" y="3459.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="53.9" y="3470.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map (1 samples, 0.03%)</title><rect x="50.9" y="3443.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="53.9" y="3454.0"></text>
</g>
<g>
<title>scala/collection/immutable/List.foreach (1 samples, 0.03%)</title><rect x="50.9" y="3427.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.9" y="3438.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike$$Lambda$89.0x0000000801826bb8.apply (1 samples, 0.03%)</title><rect x="50.9" y="3411.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.9" y="3422.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.$anonfun$map$1 (1 samples, 0.03%)</title><rect x="50.9" y="3395.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="53.9" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint$$Lambda$2665.0x0000000802499890.apply (1 samples, 0.03%)</title><rect x="50.9" y="3379.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.9" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint.$anonfun$removeBroadcast$2 (1 samples, 0.03%)</title><rect x="50.9" y="3363.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.9" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.ask (1 samples, 0.03%)</title><rect x="50.9" y="3347.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="53.9" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.ask (1 samples, 0.03%)</title><rect x="50.9" y="3331.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.9" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.askAbortable (1 samples, 0.03%)</title><rect x="50.9" y="3315.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="53.9" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.askAbortable (1 samples, 0.03%)</title><rect x="50.9" y="3299.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="53.9" y="3310.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.mapTo (1 samples, 0.03%)</title><rect x="50.9" y="3283.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="53.9" y="3294.0"></text>
</g>
<g>
<title>scala/concurrent/Future.mapTo$ (1 samples, 0.03%)</title><rect x="50.9" y="3267.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="53.9" y="3278.0"></text>
</g>
<g>
<title>scala/concurrent/Future.mapTo (1 samples, 0.03%)</title><rect x="50.9" y="3251.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.9" y="3262.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.map (1 samples, 0.03%)</title><rect x="50.9" y="3235.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="53.9" y="3246.0"></text>
</g>
<g>
<title>scala/concurrent/Future.map$ (1 samples, 0.03%)</title><rect x="50.9" y="3219.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="53.9" y="3230.0"></text>
</g>
<g>
<title>scala/concurrent/Future.map (1 samples, 0.03%)</title><rect x="50.9" y="3203.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.9" y="3214.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.transform (1 samples, 0.03%)</title><rect x="50.9" y="3187.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="53.9" y="3198.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise.transform$ (1 samples, 0.03%)</title><rect x="50.9" y="3171.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="53.9" y="3182.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise.transform (1 samples, 0.03%)</title><rect x="50.9" y="3155.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="53.9" y="3166.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="50.9" y="3139.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="53.9" y="3150.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="50.9" y="3123.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="53.9" y="3134.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="50.9" y="3107.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="53.9" y="3118.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateInstance (1 samples, 0.03%)</title><rect x="50.9" y="3091.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="53.9" y="3102.0"></text>
</g>
<g>
<title>Unsafe_AllocateInstance (1 samples, 0.03%)</title><rect x="50.9" y="3075.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="53.9" y="3086.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="50.9" y="3059.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="53.9" y="3070.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (1 samples, 0.03%)</title><rect x="50.9" y="3043.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="53.9" y="3054.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint.org$apache$spark$storage$BlockManagerMasterEndpoint$$updateBlockInfo (14 samples, 0.36%)</title><rect x="51.2" y="3491.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.2" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerInfo.updateBlockInfo (14 samples, 0.36%)</title><rect x="51.2" y="3475.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.2" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerInfo.logInfo (14 samples, 0.36%)</title><rect x="51.2" y="3459.0" width="4.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.2" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (14 samples, 0.36%)</title><rect x="51.2" y="3443.0" width="4.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="54.2" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (14 samples, 0.36%)</title><rect x="51.2" y="3427.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="54.2" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerInfo$$Lambda$1779.0x000000080216f840.apply (4 samples, 0.10%)</title><rect x="51.2" y="3411.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="54.2" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerInfo.$anonfun$updateBlockInfo$2 (4 samples, 0.10%)</title><rect x="51.2" y="3395.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.2" y="3406.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.03%)</title><rect x="51.2" y="3379.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="54.2" y="3390.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.03%)</title><rect x="51.2" y="3363.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.2" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockId.toString (1 samples, 0.03%)</title><rect x="51.2" y="3347.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="54.2" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/storage/TaskResultBlockId.name (1 samples, 0.03%)</title><rect x="51.2" y="3331.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="54.2" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerId.hostPort (1 samples, 0.03%)</title><rect x="51.5" y="3379.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.5" y="3390.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.03%)</title><rect x="51.5" y="3363.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="54.5" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.bytesToString (2 samples, 0.05%)</title><rect x="51.8" y="3379.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="54.8" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.bytesToString (2 samples, 0.05%)</title><rect x="51.8" y="3363.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.8" y="3374.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringOps.formatLocal (2 samples, 0.05%)</title><rect x="51.8" y="3347.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.8" y="3358.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.formatLocal$ (2 samples, 0.05%)</title><rect x="51.8" y="3331.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="54.8" y="3342.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.formatLocal (2 samples, 0.05%)</title><rect x="51.8" y="3315.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="54.8" y="3326.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.03%)</title><rect x="51.8" y="3299.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.8" y="3310.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="51.8" y="3283.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="54.8" y="3294.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="51.8" y="3267.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.8" y="3278.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (1 samples, 0.03%)</title><rect x="51.8" y="3251.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.8" y="3262.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.find (1 samples, 0.03%)</title><rect x="51.8" y="3235.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="54.8" y="3246.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.search (1 samples, 0.03%)</title><rect x="51.8" y="3219.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.8" y="3230.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Start.match (1 samples, 0.03%)</title><rect x="51.8" y="3203.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="54.8" y="3214.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (1 samples, 0.03%)</title><rect x="51.8" y="3187.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="54.8" y="3198.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.03%)</title><rect x="51.8" y="3171.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="54.8" y="3182.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.03%)</title><rect x="51.8" y="3155.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="54.8" y="3166.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (1 samples, 0.03%)</title><rect x="51.8" y="3139.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="54.8" y="3150.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.map (1 samples, 0.03%)</title><rect x="52.1" y="3299.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.1" y="3310.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map$ (1 samples, 0.03%)</title><rect x="52.1" y="3283.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="55.1" y="3294.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map (1 samples, 0.03%)</title><rect x="52.1" y="3267.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.1" y="3278.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="52.1" y="3251.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="55.1" y="3262.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="52.1" y="3235.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="55.1" y="3246.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="52.1" y="3219.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.1" y="3230.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="52.1" y="3203.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="55.1" y="3214.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerInfo$$Lambda$2659.0x00000008024986b0.apply (5 samples, 0.13%)</title><rect x="52.4" y="3411.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="55.4" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerInfo.$anonfun$updateBlockInfo$7 (5 samples, 0.13%)</title><rect x="52.4" y="3395.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="55.4" y="3406.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="52.4" y="3379.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="55.4" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.bytesToString (4 samples, 0.10%)</title><rect x="52.7" y="3379.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="55.7" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.bytesToString (4 samples, 0.10%)</title><rect x="52.7" y="3363.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="55.7" y="3374.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringOps.formatLocal (4 samples, 0.10%)</title><rect x="52.7" y="3347.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="55.7" y="3358.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.formatLocal$ (4 samples, 0.10%)</title><rect x="52.7" y="3331.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="55.7" y="3342.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.formatLocal (4 samples, 0.10%)</title><rect x="52.7" y="3315.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.7" y="3326.0"></text>
</g>
<g>
<title>java/lang/String.format (2 samples, 0.05%)</title><rect x="52.7" y="3299.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="55.7" y="3310.0"></text>
</g>
<g>
<title>java/util/Formatter.format (2 samples, 0.05%)</title><rect x="52.7" y="3283.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="55.7" y="3294.0"></text>
</g>
<g>
<title>java/util/Formatter.format (2 samples, 0.05%)</title><rect x="52.7" y="3267.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="55.7" y="3278.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.03%)</title><rect x="52.7" y="3251.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.7" y="3262.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printFloat (1 samples, 0.03%)</title><rect x="52.7" y="3235.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="55.7" y="3246.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (1 samples, 0.03%)</title><rect x="53.0" y="3251.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="56.0" y="3262.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.find (1 samples, 0.03%)</title><rect x="53.0" y="3235.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.0" y="3246.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.search (1 samples, 0.03%)</title><rect x="53.0" y="3219.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.0" y="3230.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Start.match (1 samples, 0.03%)</title><rect x="53.0" y="3203.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.0" y="3214.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (1 samples, 0.03%)</title><rect x="53.0" y="3187.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.0" y="3198.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.03%)</title><rect x="53.0" y="3171.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.0" y="3182.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (1 samples, 0.03%)</title><rect x="53.0" y="3155.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="56.0" y="3166.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (1 samples, 0.03%)</title><rect x="53.0" y="3139.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="56.0" y="3150.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="53.3" y="3299.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.3" y="3310.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="53.3" y="3283.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.3" y="3294.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike$$Lambda$425.0x0000000801a35b30.&lt;init&gt; (1 samples, 0.03%)</title><rect x="53.3" y="3267.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="56.3" y="3278.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.toArray (1 samples, 0.03%)</title><rect x="53.6" y="3299.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="56.6" y="3310.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.toArray$ (1 samples, 0.03%)</title><rect x="53.6" y="3283.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="56.6" y="3294.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.toArray (1 samples, 0.03%)</title><rect x="53.6" y="3267.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="56.6" y="3278.0"></text>
</g>
<g>
<title>scala/reflect/ManifestFactory$ObjectManifest.newArray (1 samples, 0.03%)</title><rect x="53.6" y="3251.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.6" y="3262.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (5 samples, 0.13%)</title><rect x="53.9" y="3411.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="56.9" y="3422.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (5 samples, 0.13%)</title><rect x="53.9" y="3395.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="56.9" y="3406.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (5 samples, 0.13%)</title><rect x="53.9" y="3379.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="56.9" y="3390.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (5 samples, 0.13%)</title><rect x="53.9" y="3363.0" width="1.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="56.9" y="3374.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (5 samples, 0.13%)</title><rect x="53.9" y="3347.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.9" y="3358.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (5 samples, 0.13%)</title><rect x="53.9" y="3331.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="56.9" y="3342.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (5 samples, 0.13%)</title><rect x="53.9" y="3315.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="56.9" y="3326.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (5 samples, 0.13%)</title><rect x="53.9" y="3299.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="56.9" y="3310.0"></text>
</g>
<g>
<title>org/apache/log4j/PatternLayout.format (1 samples, 0.03%)</title><rect x="53.9" y="3283.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.9" y="3294.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternConverter.format (1 samples, 0.03%)</title><rect x="53.9" y="3267.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.9" y="3278.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternParser$DatePatternConverter.convert (1 samples, 0.03%)</title><rect x="53.9" y="3251.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="56.9" y="3262.0"></text>
</g>
<g>
<title>java/text/DateFormat.format (1 samples, 0.03%)</title><rect x="53.9" y="3235.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="56.9" y="3246.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/QuietWriter.flush (4 samples, 0.10%)</title><rect x="54.2" y="3283.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="57.2" y="3294.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flush (4 samples, 0.10%)</title><rect x="54.2" y="3267.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="57.2" y="3278.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flush (4 samples, 0.10%)</title><rect x="54.2" y="3251.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="57.2" y="3262.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlush (4 samples, 0.10%)</title><rect x="54.2" y="3235.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="57.2" y="3246.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (4 samples, 0.10%)</title><rect x="54.2" y="3219.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="57.2" y="3230.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (4 samples, 0.10%)</title><rect x="54.2" y="3203.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="57.2" y="3214.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (4 samples, 0.10%)</title><rect x="54.2" y="3187.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="57.2" y="3198.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (4 samples, 0.10%)</title><rect x="54.2" y="3171.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="57.2" y="3182.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (4 samples, 0.10%)</title><rect x="54.2" y="3155.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="57.2" y="3166.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (4 samples, 0.10%)</title><rect x="54.2" y="3139.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="57.2" y="3150.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (3 samples, 0.08%)</title><rect x="54.5" y="3123.0" width="0.9" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="57.5" y="3134.0"></text>
</g>
<g>
<title>writeBytes (3 samples, 0.08%)</title><rect x="54.5" y="3107.0" width="0.9" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="57.5" y="3118.0"></text>
</g>
<g>
<title>__write (3 samples, 0.08%)</title><rect x="54.5" y="3091.0" width="0.9" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="57.5" y="3102.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.08%)</title><rect x="54.5" y="3075.0" width="0.9" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="57.5" y="3086.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.08%)</title><rect x="54.5" y="3059.0" width="0.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="57.5" y="3070.0"></text>
</g>
<g>
<title>__x64_sys_write (3 samples, 0.08%)</title><rect x="54.5" y="3043.0" width="0.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="57.5" y="3054.0"></text>
</g>
<g>
<title>ksys_write (3 samples, 0.08%)</title><rect x="54.5" y="3027.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="57.5" y="3038.0"></text>
</g>
<g>
<title>vfs_write (3 samples, 0.08%)</title><rect x="54.5" y="3011.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="57.5" y="3022.0"></text>
</g>
<g>
<title>__vfs_write (3 samples, 0.08%)</title><rect x="54.5" y="2995.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="57.5" y="3006.0"></text>
</g>
<g>
<title>tty_write (3 samples, 0.08%)</title><rect x="54.5" y="2979.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="57.5" y="2990.0"></text>
</g>
<g>
<title>n_tty_write (3 samples, 0.08%)</title><rect x="54.5" y="2963.0" width="0.9" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="57.5" y="2974.0"></text>
</g>
<g>
<title>pty_write (3 samples, 0.08%)</title><rect x="54.5" y="2947.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="57.5" y="2958.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="54.5" y="2931.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="57.5" y="2942.0"></text>
</g>
<g>
<title>tty_flip_buffer_push (2 samples, 0.05%)</title><rect x="54.8" y="2931.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="57.8" y="2942.0"></text>
</g>
<g>
<title>queue_work_on (2 samples, 0.05%)</title><rect x="54.8" y="2915.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="57.8" y="2926.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMasterEndpoint.receiveAndReply (1 samples, 0.03%)</title><rect x="55.4" y="3507.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.4" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerSlaveEndpoint$$anonfun$receiveAndReply$1.applyOrElse (2 samples, 0.05%)</title><rect x="55.7" y="3507.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="58.7" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerSlaveEndpoint.org$apache$spark$storage$BlockManagerSlaveEndpoint$$doAsync (2 samples, 0.05%)</title><rect x="55.7" y="3491.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="58.7" y="3502.0"></text>
</g>
<g>
<title>scala/concurrent/Future$.apply (1 samples, 0.03%)</title><rect x="56.0" y="3475.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.0" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore$$anon$1.run (1 samples, 0.03%)</title><rect x="56.3" y="3603.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="59.3" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryLog (1 samples, 0.03%)</title><rect x="56.3" y="3587.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.3" y="3598.0"></text>
</g>
<g>
<title>scala/util/Success.&lt;init&gt; (1 samples, 0.03%)</title><rect x="56.3" y="3571.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="59.3" y="3582.0"></text>
</g>
<g>
<title>scala/util/Try.&lt;init&gt; (1 samples, 0.03%)</title><rect x="56.3" y="3555.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="59.3" y="3566.0"></text>
</g>
<g>
<title>g1_post_barrier_slow (1 samples, 0.03%)</title><rect x="56.3" y="3539.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="59.3" y="3550.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (1 samples, 0.03%)</title><rect x="56.6" y="3635.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.6" y="3646.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.runAndReset (1 samples, 0.03%)</title><rect x="56.6" y="3619.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="59.6" y="3630.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (1 samples, 0.03%)</title><rect x="56.6" y="3603.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.6" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/Heartbeater$$anon$1.run (1 samples, 0.03%)</title><rect x="56.6" y="3587.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.6" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.logUncaughtExceptions (1 samples, 0.03%)</title><rect x="56.6" y="3571.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="59.6" y="3582.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcV$sp.apply (1 samples, 0.03%)</title><rect x="56.6" y="3555.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="59.6" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/executor/Executor$$Lambda$603.0x0000000801b00000.apply$mcV$sp (1 samples, 0.03%)</title><rect x="56.6" y="3539.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="59.6" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/executor/Executor.$anonfun$heartbeater$1 (1 samples, 0.03%)</title><rect x="56.6" y="3523.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="59.6" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/executor/Executor.reportHeartBeat (1 samples, 0.03%)</title><rect x="56.6" y="3507.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.6" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/executor/ExecutorMetricsPoller.poll (1 samples, 0.03%)</title><rect x="56.6" y="3491.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.6" y="3502.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.forEachValue (1 samples, 0.03%)</title><rect x="56.6" y="3475.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="59.6" y="3486.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.invoke (1 samples, 0.03%)</title><rect x="56.6" y="3459.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="59.6" y="3470.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.doInvoke (1 samples, 0.03%)</title><rect x="56.6" y="3443.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="59.6" y="3454.0"></text>
</g>
<g>
<title>java/util/concurrent/ForkJoinTask.doExec (1 samples, 0.03%)</title><rect x="56.6" y="3427.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.6" y="3438.0"></text>
</g>
<g>
<title>java/util/concurrent/CountedCompleter.exec (1 samples, 0.03%)</title><rect x="56.6" y="3411.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.6" y="3422.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$ForEachValueTask.compute (1 samples, 0.03%)</title><rect x="56.6" y="3395.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="59.6" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/executor/ExecutorMetricsPoller$$Lambda$2720.0x00000008024c5210.accept (1 samples, 0.03%)</title><rect x="56.6" y="3379.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="59.6" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/executor/ExecutorMetricsPoller.$anonfun$poll$4 (1 samples, 0.03%)</title><rect x="56.6" y="3363.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="59.6" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/executor/ExecutorMetricsPoller.updatePeaks$1 (1 samples, 0.03%)</title><rect x="56.6" y="3347.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.6" y="3358.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="56.6" y="3331.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="59.6" y="3342.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="56.6" y="3315.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="59.6" y="3326.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="56.6" y="3299.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="59.6" y="3310.0"></text>
</g>
<g>
<title>LinkInfo::LinkInfo(constantPoolHandle const&amp;, int, Thread*) (1 samples, 0.03%)</title><rect x="56.6" y="3283.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="59.6" y="3294.0"></text>
</g>
<g>
<title>ConstantPool::klass_ref_at(int, Thread*) (1 samples, 0.03%)</title><rect x="56.6" y="3267.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="59.6" y="3278.0"></text>
</g>
<g>
<title>LinkResolver::check_klass_accessibility(Klass*, Klass*, Thread*) (1 samples, 0.03%)</title><rect x="56.6" y="3251.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="59.6" y="3262.0"></text>
</g>
<g>
<title>Reflection::verify_class_access(Klass const*, InstanceKlass const*, bool) (1 samples, 0.03%)</title><rect x="56.6" y="3235.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="59.6" y="3246.0"></text>
</g>
<g>
<title>InstanceKlass::module() const (1 samples, 0.03%)</title><rect x="56.6" y="3219.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="59.6" y="3230.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (2 samples, 0.05%)</title><rect x="56.9" y="3635.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="59.9" y="3646.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.take (2 samples, 0.05%)</title><rect x="56.9" y="3619.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="59.9" y="3630.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.take (2 samples, 0.05%)</title><rect x="56.9" y="3603.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="59.9" y="3614.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="56.9" y="3587.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="59.9" y="3598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.awaitNanos (1 samples, 0.03%)</title><rect x="57.2" y="3587.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="60.2" y="3598.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.parkNanos (1 samples, 0.03%)</title><rect x="57.2" y="3571.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.2" y="3582.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (1 samples, 0.03%)</title><rect x="57.2" y="3555.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="60.2" y="3566.0"></text>
</g>
<g>
<title>Unsafe_Park (1 samples, 0.03%)</title><rect x="57.2" y="3539.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="60.2" y="3550.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="57.2" y="3523.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="60.2" y="3534.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="57.2" y="3507.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="60.2" y="3518.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="57.2" y="3491.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="60.2" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/executor/Executor$TaskRunner.run (1,956 samples, 49.81%)</title><rect x="57.5" y="3635.0" width="587.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="60.5" y="3646.0">org/apache/spark/executor/Executor$TaskRunner.run</text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="57.8" y="3619.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="60.8" y="3630.0"></text>
</g>
<g>
<title>java/lang/Thread.setName (1 samples, 0.03%)</title><rect x="58.1" y="3619.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="61.1" y="3630.0"></text>
</g>
<g>
<title>java/lang/Thread.checkAccess (1 samples, 0.03%)</title><rect x="58.1" y="3603.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="61.1" y="3614.0"></text>
</g>
<g>
<title>sbt/TrapExit.checkAccess (1 samples, 0.03%)</title><rect x="58.1" y="3587.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="61.1" y="3598.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory.getThreadMXBean (1 samples, 0.03%)</title><rect x="58.4" y="3619.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="61.4" y="3630.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory.getPlatformMXBean (1 samples, 0.03%)</title><rect x="58.4" y="3603.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="61.4" y="3614.0"></text>
</g>
<g>
<title>sun/management/spi/PlatformMBeanProvider$PlatformComponent.getMBeans (1 samples, 0.03%)</title><rect x="58.4" y="3587.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.4" y="3598.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (1 samples, 0.03%)</title><rect x="58.4" y="3571.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="61.4" y="3582.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (1 samples, 0.03%)</title><rect x="58.4" y="3555.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.4" y="3566.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.03%)</title><rect x="58.4" y="3539.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.4" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/executor/Executor.logInfo (2 samples, 0.05%)</title><rect x="58.7" y="3619.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.7" y="3630.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (2 samples, 0.05%)</title><rect x="58.7" y="3603.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="61.7" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (2 samples, 0.05%)</title><rect x="58.7" y="3587.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="61.7" y="3598.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (2 samples, 0.05%)</title><rect x="58.7" y="3571.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="61.7" y="3582.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (2 samples, 0.05%)</title><rect x="58.7" y="3555.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="61.7" y="3566.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (2 samples, 0.05%)</title><rect x="58.7" y="3539.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="61.7" y="3550.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (2 samples, 0.05%)</title><rect x="58.7" y="3523.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="61.7" y="3534.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (2 samples, 0.05%)</title><rect x="58.7" y="3507.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="61.7" y="3518.0"></text>
</g>
<g>
<title>java/util/Vector.size (1 samples, 0.03%)</title><rect x="58.7" y="3491.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="61.7" y="3502.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (1 samples, 0.03%)</title><rect x="59.0" y="3491.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.0" y="3502.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (1 samples, 0.03%)</title><rect x="59.0" y="3475.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.0" y="3486.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (1 samples, 0.03%)</title><rect x="59.0" y="3459.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.0" y="3470.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/QuietWriter.flush (1 samples, 0.03%)</title><rect x="59.0" y="3443.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.0" y="3454.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flush (1 samples, 0.03%)</title><rect x="59.0" y="3427.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.0" y="3438.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flush (1 samples, 0.03%)</title><rect x="59.0" y="3411.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="62.0" y="3422.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlush (1 samples, 0.03%)</title><rect x="59.0" y="3395.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.0" y="3406.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (1 samples, 0.03%)</title><rect x="59.0" y="3379.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="62.0" y="3390.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (1 samples, 0.03%)</title><rect x="59.0" y="3363.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.0" y="3374.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (1 samples, 0.03%)</title><rect x="59.0" y="3347.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="62.0" y="3358.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.03%)</title><rect x="59.0" y="3331.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.0" y="3342.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.03%)</title><rect x="59.0" y="3315.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="62.0" y="3326.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (1 samples, 0.03%)</title><rect x="59.0" y="3299.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.0" y="3310.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.03%)</title><rect x="59.0" y="3283.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.0" y="3294.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (1 samples, 0.03%)</title><rect x="59.0" y="3267.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="62.0" y="3278.0"></text>
</g>
<g>
<title>writeBytes (1 samples, 0.03%)</title><rect x="59.0" y="3251.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="62.0" y="3262.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="59.0" y="3235.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="62.0" y="3246.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="59.0" y="3219.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="62.0" y="3230.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="59.0" y="3203.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="62.0" y="3214.0"></text>
</g>
<g>
<title>__x64_sys_write (1 samples, 0.03%)</title><rect x="59.0" y="3187.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="62.0" y="3198.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.03%)</title><rect x="59.0" y="3171.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="62.0" y="3182.0"></text>
</g>
<g>
<title>vfs_write (1 samples, 0.03%)</title><rect x="59.0" y="3155.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="62.0" y="3166.0"></text>
</g>
<g>
<title>rw_verify_area (1 samples, 0.03%)</title><rect x="59.0" y="3139.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="62.0" y="3150.0"></text>
</g>
<g>
<title>security_file_permission (1 samples, 0.03%)</title><rect x="59.0" y="3123.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="62.0" y="3134.0"></text>
</g>
<g>
<title>apparmor_file_permission (1 samples, 0.03%)</title><rect x="59.0" y="3107.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="62.0" y="3118.0"></text>
</g>
<g>
<title>common_file_perm (1 samples, 0.03%)</title><rect x="59.0" y="3091.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="62.0" y="3102.0"></text>
</g>
<g>
<title>aa_file_perm (1 samples, 0.03%)</title><rect x="59.0" y="3075.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="62.0" y="3086.0"></text>
</g>
<g>
<title>org/apache/spark/executor/Executor.org$apache$spark$executor$Executor$$computeTotalGcTime (7 samples, 0.18%)</title><rect x="59.3" y="3619.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.3" y="3630.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory.getGarbageCollectorMXBeans (4 samples, 0.10%)</title><rect x="59.6" y="3603.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="62.6" y="3614.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory.getPlatformMXBeans (4 samples, 0.10%)</title><rect x="59.6" y="3587.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="62.6" y="3598.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (4 samples, 0.10%)</title><rect x="59.6" y="3571.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="62.6" y="3582.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (4 samples, 0.10%)</title><rect x="59.6" y="3555.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.6" y="3566.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (4 samples, 0.10%)</title><rect x="59.6" y="3539.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.6" y="3550.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (4 samples, 0.10%)</title><rect x="59.6" y="3523.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="62.6" y="3534.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (4 samples, 0.10%)</title><rect x="59.6" y="3507.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="62.6" y="3518.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (4 samples, 0.10%)</title><rect x="59.6" y="3491.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="62.6" y="3502.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline$7$1.accept (4 samples, 0.10%)</title><rect x="59.6" y="3475.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.6" y="3486.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory$$Lambda$2054.0x00000008020df0f0.apply (4 samples, 0.10%)</title><rect x="59.6" y="3459.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="62.6" y="3470.0"></text>
</g>
<g>
<title>java/lang/management/ManagementFactory.lambda$getPlatformMXBeans$3 (4 samples, 0.10%)</title><rect x="59.6" y="3443.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.6" y="3454.0"></text>
</g>
<g>
<title>sun/management/spi/PlatformMBeanProvider$PlatformComponent.getMBeans (4 samples, 0.10%)</title><rect x="59.6" y="3427.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="62.6" y="3438.0"></text>
</g>
<g>
<title>com/sun/management/internal/PlatformMBeanProviderImpl$1.nameToMBeanMap (2 samples, 0.05%)</title><rect x="59.6" y="3411.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="62.6" y="3422.0"></text>
</g>
<g>
<title>sun/management/GarbageCollectorImpl.getObjectName (2 samples, 0.05%)</title><rect x="59.6" y="3395.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="62.6" y="3406.0"></text>
</g>
<g>
<title>sun/management/Util.newObjectName (2 samples, 0.05%)</title><rect x="59.6" y="3379.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="62.6" y="3390.0"></text>
</g>
<g>
<title>sun/management/Util.newObjectName (2 samples, 0.05%)</title><rect x="59.6" y="3363.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="62.6" y="3374.0"></text>
</g>
<g>
<title>javax/management/ObjectName.getInstance (2 samples, 0.05%)</title><rect x="59.6" y="3347.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="62.6" y="3358.0"></text>
</g>
<g>
<title>javax/management/ObjectName.&lt;init&gt; (2 samples, 0.05%)</title><rect x="59.6" y="3331.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="62.6" y="3342.0"></text>
</g>
<g>
<title>javax/management/ObjectName.construct (2 samples, 0.05%)</title><rect x="59.6" y="3315.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="62.6" y="3326.0"></text>
</g>
<g>
<title>javax/management/ObjectName.setCanonicalName (1 samples, 0.03%)</title><rect x="59.9" y="3299.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="62.9" y="3310.0"></text>
</g>
<g>
<title>java/lang/String.intern (1 samples, 0.03%)</title><rect x="59.9" y="3283.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="62.9" y="3294.0"></text>
</g>
<g>
<title>JVM_InternString (1 samples, 0.03%)</title><rect x="59.9" y="3267.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="62.9" y="3278.0"></text>
</g>
<g>
<title>StringTable::intern(oopDesc*, Thread*) (1 samples, 0.03%)</title><rect x="59.9" y="3251.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="62.9" y="3262.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short const*, int, Thread*) (1 samples, 0.03%)</title><rect x="59.9" y="3235.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="62.9" y="3246.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;594020ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 594020ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="59.9" y="3219.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="62.9" y="3230.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.collect (2 samples, 0.05%)</title><rect x="60.2" y="3411.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.2" y="3422.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (2 samples, 0.05%)</title><rect x="60.2" y="3395.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="63.2" y="3406.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$3.getOpFlags (1 samples, 0.03%)</title><rect x="60.2" y="3379.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.2" y="3390.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="60.2" y="3363.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="63.2" y="3374.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (1 samples, 0.03%)</title><rect x="60.5" y="3379.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.5" y="3390.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.wrapAndCopyInto (1 samples, 0.03%)</title><rect x="60.5" y="3363.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="63.5" y="3374.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.copyInto (1 samples, 0.03%)</title><rect x="60.5" y="3347.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.5" y="3358.0"></text>
</g>
<g>
<title>java/util/HashMap$ValueSpliterator.forEachRemaining (1 samples, 0.03%)</title><rect x="60.5" y="3331.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="63.5" y="3342.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.map (1 samples, 0.03%)</title><rect x="60.8" y="3603.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="63.8" y="3614.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map$ (1 samples, 0.03%)</title><rect x="60.8" y="3587.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="63.8" y="3598.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map (1 samples, 0.03%)</title><rect x="60.8" y="3571.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="63.8" y="3582.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.builder$1 (1 samples, 0.03%)</title><rect x="60.8" y="3555.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="63.8" y="3566.0"></text>
</g>
<g>
<title>scala/collection/generic/GenTraversableFactory$GenericCanBuildFrom.apply (1 samples, 0.03%)</title><rect x="60.8" y="3539.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="63.8" y="3550.0"></text>
</g>
<g>
<title>scala/collection/generic/GenTraversableFactory$GenericCanBuildFrom.apply (1 samples, 0.03%)</title><rect x="60.8" y="3523.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="63.8" y="3534.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.genericBuilder (1 samples, 0.03%)</title><rect x="60.8" y="3507.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="63.8" y="3518.0"></text>
</g>
<g>
<title>scala/collection/generic/GenericTraversableTemplate.genericBuilder$ (1 samples, 0.03%)</title><rect x="60.8" y="3491.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="63.8" y="3502.0"></text>
</g>
<g>
<title>scala/collection/generic/GenericTraversableTemplate.genericBuilder (1 samples, 0.03%)</title><rect x="60.8" y="3475.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="63.8" y="3486.0"></text>
</g>
<g>
<title>scala/collection/mutable/AbstractBuffer.companion (1 samples, 0.03%)</title><rect x="60.8" y="3459.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="63.8" y="3470.0"></text>
</g>
<g>
<title>scala/collection/mutable/Buffer.companion$ (1 samples, 0.03%)</title><rect x="60.8" y="3443.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="63.8" y="3454.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="60.8" y="3427.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="63.8" y="3438.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="60.8" y="3411.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="63.8" y="3422.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="60.8" y="3395.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="63.8" y="3406.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.sum (1 samples, 0.03%)</title><rect x="61.1" y="3603.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.1" y="3614.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.sum$ (1 samples, 0.03%)</title><rect x="61.1" y="3587.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="64.1" y="3598.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.sum (1 samples, 0.03%)</title><rect x="61.1" y="3571.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="64.1" y="3582.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayBuffer.foldLeft (1 samples, 0.03%)</title><rect x="61.1" y="3555.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.1" y="3566.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foldLeft$ (1 samples, 0.03%)</title><rect x="61.1" y="3539.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="64.1" y="3550.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foldLeft (1 samples, 0.03%)</title><rect x="61.1" y="3523.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.1" y="3534.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce$$Lambda$422.0x0000000801a34dd0.apply (1 samples, 0.03%)</title><rect x="61.1" y="3507.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="64.1" y="3518.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.$anonfun$sum$1 (1 samples, 0.03%)</title><rect x="61.1" y="3491.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.1" y="3502.0"></text>
</g>
<g>
<title>scala/math/Numeric$LongIsIntegral$.plus (1 samples, 0.03%)</title><rect x="61.1" y="3475.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.1" y="3486.0"></text>
</g>
<g>
<title>scala/math/Numeric$LongIsIntegral$.plus (1 samples, 0.03%)</title><rect x="61.1" y="3459.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.1" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/executor/Executor.org$apache$spark$executor$Executor$$updateDependencies (1 samples, 0.03%)</title><rect x="61.4" y="3619.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.4" y="3630.0"></text>
</g>
<g>
<title>org/apache/spark/executor/ExecutorMetricsPoller.onTaskCompletion (1 samples, 0.03%)</title><rect x="61.7" y="3619.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="64.7" y="3630.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfPresent (1 samples, 0.03%)</title><rect x="61.7" y="3603.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="64.7" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/executor/ExecutorMetricsPoller$$Lambda$2158.0x0000000802272280.apply (1 samples, 0.03%)</title><rect x="61.7" y="3587.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="64.7" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/executor/ExecutorMetricsPoller.$anonfun$onTaskCompletion$3 (1 samples, 0.03%)</title><rect x="61.7" y="3571.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="64.7" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/executor/ExecutorMetricsPoller.decrementCount$1 (1 samples, 0.03%)</title><rect x="61.7" y="3555.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.7" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/executor/ExecutorMetricsPoller.logDebug (1 samples, 0.03%)</title><rect x="61.7" y="3539.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="64.7" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logDebug$ (1 samples, 0.03%)</title><rect x="61.7" y="3523.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="64.7" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logDebug (1 samples, 0.03%)</title><rect x="61.7" y="3507.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="64.7" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/executor/ExecutorMetricsPoller.log (1 samples, 0.03%)</title><rect x="61.7" y="3491.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="64.7" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.log$ (1 samples, 0.03%)</title><rect x="61.7" y="3475.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="64.7" y="3486.0"></text>
</g>
<g>
<title>SharedRuntime::handle_wrong_method(JavaThread*) (1 samples, 0.03%)</title><rect x="61.7" y="3459.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="64.7" y="3470.0"></text>
</g>
<g>
<title>SharedRuntime::reresolve_call_site(JavaThread*, Thread*) (1 samples, 0.03%)</title><rect x="61.7" y="3443.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="64.7" y="3454.0"></text>
</g>
<g>
<title>DirectNativeCallWrapper::instruction_address() const (1 samples, 0.03%)</title><rect x="61.7" y="3427.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="64.7" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.deserialize (3 samples, 0.08%)</title><rect x="62.0" y="3619.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="65.0" y="3630.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="62.0" y="3603.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="65.0" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaDeserializationStream.readObject (2 samples, 0.05%)</title><rect x="62.3" y="3603.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.3" y="3614.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (2 samples, 0.05%)</title><rect x="62.3" y="3587.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.3" y="3598.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (2 samples, 0.05%)</title><rect x="62.3" y="3571.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="65.3" y="3582.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (2 samples, 0.05%)</title><rect x="62.3" y="3555.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="65.3" y="3566.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (2 samples, 0.05%)</title><rect x="62.3" y="3539.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="65.3" y="3550.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="62.3" y="3523.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="65.3" y="3534.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="62.3" y="3507.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="65.3" y="3518.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="62.3" y="3491.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="65.3" y="3502.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="62.3" y="3475.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="65.3" y="3486.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="62.6" y="3523.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.6" y="3534.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="62.6" y="3507.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="65.6" y="3518.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="62.6" y="3491.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="65.6" y="3502.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="62.6" y="3475.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.6" y="3486.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.forClass (1 samples, 0.03%)</title><rect x="62.6" y="3459.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="65.6" y="3470.0"></text>
</g>
<g>
<title>jdk/internal/reflect/Reflection.getCallerClass (1 samples, 0.03%)</title><rect x="62.6" y="3443.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.6" y="3454.0"></text>
</g>
<g>
<title>JVM_GetCallerClass (1 samples, 0.03%)</title><rect x="62.6" y="3427.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="65.6" y="3438.0"></text>
</g>
<g>
<title>vframeStream::vframeStream(JavaThread*, bool, bool) (1 samples, 0.03%)</title><rect x="62.6" y="3411.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="65.6" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.serialize (76 samples, 1.94%)</title><rect x="62.9" y="3619.0" width="22.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="65.9" y="3630.0">o..</text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializationStream.close (2 samples, 0.05%)</title><rect x="62.9" y="3603.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="65.9" y="3614.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.close (2 samples, 0.05%)</title><rect x="62.9" y="3587.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="65.9" y="3598.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.clear (2 samples, 0.05%)</title><rect x="62.9" y="3571.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="65.9" y="3582.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="63.2" y="3555.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="66.2" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializationStream.writeObject (74 samples, 1.88%)</title><rect x="63.5" y="3603.0" width="22.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="66.5" y="3614.0">o..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (74 samples, 1.88%)</title><rect x="63.5" y="3587.0" width="22.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="66.5" y="3598.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (74 samples, 1.88%)</title><rect x="63.5" y="3571.0" width="22.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="66.5" y="3582.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (74 samples, 1.88%)</title><rect x="63.5" y="3555.0" width="22.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="66.5" y="3566.0">j..</text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeExternalData (19 samples, 0.48%)</title><rect x="63.5" y="3539.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="66.5" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DirectTaskResult.writeExternal (19 samples, 0.48%)</title><rect x="63.5" y="3523.0" width="5.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.5" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryOrIOException (19 samples, 0.48%)</title><rect x="63.5" y="3507.0" width="5.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="66.5" y="3518.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcV$sp.apply (19 samples, 0.48%)</title><rect x="63.5" y="3491.0" width="5.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="66.5" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DirectTaskResult$$Lambda$2154.0x00000008022714e0.apply$mcV$sp (19 samples, 0.48%)</title><rect x="63.5" y="3475.0" width="5.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.5" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DirectTaskResult.$anonfun$writeExternal$1 (19 samples, 0.48%)</title><rect x="63.5" y="3459.0" width="5.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.5" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.writeByteBuffer (18 samples, 0.46%)</title><rect x="63.5" y="3443.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="66.5" y="3454.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.write (18 samples, 0.46%)</title><rect x="63.5" y="3427.0" width="5.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="66.5" y="3438.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.write (18 samples, 0.46%)</title><rect x="63.5" y="3411.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="66.5" y="3422.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeBlockHeader (1 samples, 0.03%)</title><rect x="65.9" y="3395.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="68.9" y="3406.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (9 samples, 0.23%)</title><rect x="66.2" y="3395.0" width="2.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="69.2" y="3406.0"></text>
</g>
<g>
<title>scala/collection/AbstractSeq.size (1 samples, 0.03%)</title><rect x="68.9" y="3443.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="71.9" y="3454.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (55 samples, 1.40%)</title><rect x="69.2" y="3539.0" width="16.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="72.2" y="3550.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (55 samples, 1.40%)</title><rect x="69.2" y="3523.0" width="16.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="72.2" y="3534.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (55 samples, 1.40%)</title><rect x="69.2" y="3507.0" width="16.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.2" y="3518.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (55 samples, 1.40%)</title><rect x="69.2" y="3491.0" width="16.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="72.2" y="3502.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.03%)</title><rect x="69.2" y="3475.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="72.2" y="3486.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.03%)</title><rect x="69.2" y="3459.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="72.2" y="3470.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.03%)</title><rect x="69.2" y="3443.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="72.2" y="3454.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.03%)</title><rect x="69.2" y="3427.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="72.2" y="3438.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.forClass (1 samples, 0.03%)</title><rect x="69.2" y="3411.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="72.2" y="3422.0"></text>
</g>
<g>
<title>jdk/internal/reflect/Reflection.getCallerClass (1 samples, 0.03%)</title><rect x="69.2" y="3395.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="72.2" y="3406.0"></text>
</g>
<g>
<title>JVM_GetCallerClass (1 samples, 0.03%)</title><rect x="69.2" y="3379.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="72.2" y="3390.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.0] (1 samples, 0.03%)</title><rect x="69.2" y="3363.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="72.2" y="3374.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (54 samples, 1.38%)</title><rect x="69.5" y="3475.0" width="16.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="72.5" y="3486.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (54 samples, 1.38%)</title><rect x="69.5" y="3459.0" width="16.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="72.5" y="3470.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (54 samples, 1.38%)</title><rect x="69.5" y="3443.0" width="16.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="72.5" y="3454.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (54 samples, 1.38%)</title><rect x="69.5" y="3427.0" width="16.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="72.5" y="3438.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeDoubles (54 samples, 1.38%)</title><rect x="69.5" y="3411.0" width="16.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.5" y="3422.0"></text>
</g>
<g>
<title>java/io/Bits.putDouble (40 samples, 1.02%)</title><rect x="69.8" y="3395.0" width="12.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="72.8" y="3406.0"></text>
</g>
<g>
<title>java/io/Bits.putLong (40 samples, 1.02%)</title><rect x="69.8" y="3379.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="72.8" y="3390.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.writeDouble (13 samples, 0.33%)</title><rect x="81.8" y="3395.0" width="3.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="84.8" y="3406.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.writeLong (13 samples, 0.33%)</title><rect x="81.8" y="3379.0" width="3.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.8" y="3390.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.write (13 samples, 0.33%)</title><rect x="81.8" y="3363.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="84.8" y="3374.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.write (12 samples, 0.31%)</title><rect x="82.1" y="3347.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.1" y="3358.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (12 samples, 0.31%)</title><rect x="82.1" y="3331.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="85.1" y="3342.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4BlockOutputStream.write (11 samples, 0.28%)</title><rect x="82.1" y="3315.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="85.1" y="3326.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (9 samples, 0.23%)</title><rect x="82.7" y="3299.0" width="2.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="85.7" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/util/ByteBufferOutputStream.write (1 samples, 0.03%)</title><rect x="85.4" y="3315.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="88.4" y="3326.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (1 samples, 0.03%)</title><rect x="85.4" y="3299.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="88.4" y="3310.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.ensureCapacity (1 samples, 0.03%)</title><rect x="85.4" y="3283.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="88.4" y="3294.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.03%)</title><rect x="85.4" y="3267.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="88.4" y="3278.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="85.4" y="3251.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="88.4" y="3262.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="85.4" y="3235.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="88.4" y="3246.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="85.4" y="3219.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="88.4" y="3230.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="85.4" y="3203.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="88.4" y="3214.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (1 samples, 0.03%)</title><rect x="85.4" y="3187.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="88.4" y="3198.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="85.4" y="3171.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="88.4" y="3182.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_sizes() (1 samples, 0.03%)</title><rect x="85.4" y="3155.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="88.4" y="3166.0"></text>
</g>
<g>
<title>MetaspaceCounters::update_performance_counters() (1 samples, 0.03%)</title><rect x="85.4" y="3139.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="88.4" y="3150.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.putBytes (12 samples, 0.31%)</title><rect x="85.7" y="3619.0" width="3.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="88.7" y="3630.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater.save (12 samples, 0.31%)</title><rect x="85.7" y="3603.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="88.7" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$doPut (12 samples, 0.31%)</title><rect x="85.7" y="3587.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="88.7" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockInfoManager.lockNewBlockForWriting (1 samples, 0.03%)</title><rect x="85.7" y="3571.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="88.7" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockInfoManager.lockForWriting (1 samples, 0.03%)</title><rect x="85.7" y="3555.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="88.7" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockInfoManager.currentTaskAttemptId (1 samples, 0.03%)</title><rect x="85.7" y="3539.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="88.7" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/TaskContext$.get (1 samples, 0.03%)</title><rect x="85.7" y="3523.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="88.7" y="3534.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (1 samples, 0.03%)</title><rect x="85.7" y="3507.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="88.7" y="3518.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="85.7" y="3491.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="88.7" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockInfoManager.unlock (1 samples, 0.03%)</title><rect x="86.0" y="3571.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.0" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockInfoManager$$anon$1.removeBinding (1 samples, 0.03%)</title><rect x="86.0" y="3555.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.0" y="3566.0"></text>
</g>
<g>
<title>scala/collection/mutable/MultiMap.removeBinding$ (1 samples, 0.03%)</title><rect x="86.0" y="3539.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="89.0" y="3550.0"></text>
</g>
<g>
<title>scala/collection/mutable/MultiMap.removeBinding (1 samples, 0.03%)</title><rect x="86.0" y="3523.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.0" y="3534.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashSet.$minus$eq (1 samples, 0.03%)</title><rect x="86.0" y="3507.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="89.0" y="3518.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashSet.$minus$eq (1 samples, 0.03%)</title><rect x="86.0" y="3491.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.0" y="3502.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashSet.removeElem (1 samples, 0.03%)</title><rect x="86.0" y="3475.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.0" y="3486.0"></text>
</g>
<g>
<title>scala/collection/mutable/FlatHashTable.removeElem$ (1 samples, 0.03%)</title><rect x="86.0" y="3459.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="89.0" y="3470.0"></text>
</g>
<g>
<title>scala/collection/mutable/FlatHashTable.removeElem (1 samples, 0.03%)</title><rect x="86.0" y="3443.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.0" y="3454.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashSet.nnSizeMapRemove (1 samples, 0.03%)</title><rect x="86.0" y="3427.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="89.0" y="3438.0"></text>
</g>
<g>
<title>scala/collection/mutable/FlatHashTable.nnSizeMapRemove$ (1 samples, 0.03%)</title><rect x="86.0" y="3411.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.0" y="3422.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="86.0" y="3395.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="89.0" y="3406.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="86.0" y="3379.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="89.0" y="3390.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="86.0" y="3363.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="89.0" y="3374.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="86.0" y="3347.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="89.0" y="3358.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="86.0" y="3331.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="89.0" y="3342.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="86.0" y="3315.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="89.0" y="3326.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="86.0" y="3299.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="89.0" y="3310.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0] (1 samples, 0.03%)</title><rect x="86.0" y="3283.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="89.0" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater$$Lambda$1775.0x000000080216e588.apply (10 samples, 0.25%)</title><rect x="86.3" y="3571.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="89.3" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater.$anonfun$save$1 (10 samples, 0.25%)</title><rect x="86.3" y="3555.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="89.3" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater.saveSerializedValuesToMemoryStore (7 samples, 0.18%)</title><rect x="86.3" y="3539.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="89.3" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.putBytes (7 samples, 0.18%)</title><rect x="86.3" y="3523.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="89.3" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.logInfo (7 samples, 0.18%)</title><rect x="86.3" y="3507.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="89.3" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (7 samples, 0.18%)</title><rect x="86.3" y="3491.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="89.3" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (7 samples, 0.18%)</title><rect x="86.3" y="3475.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="89.3" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore$$Lambda$1778.0x000000080216f210.apply (5 samples, 0.13%)</title><rect x="86.3" y="3459.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.3" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.$anonfun$putBytes$2 (5 samples, 0.13%)</title><rect x="86.3" y="3443.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.3" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.bytesToString (3 samples, 0.08%)</title><rect x="86.6" y="3427.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="89.6" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.bytesToString (3 samples, 0.08%)</title><rect x="86.6" y="3411.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="89.6" y="3422.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringOps.formatLocal (3 samples, 0.08%)</title><rect x="86.6" y="3395.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="89.6" y="3406.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.formatLocal$ (3 samples, 0.08%)</title><rect x="86.6" y="3379.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.6" y="3390.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.formatLocal (3 samples, 0.08%)</title><rect x="86.6" y="3363.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.6" y="3374.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.03%)</title><rect x="86.6" y="3347.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="89.6" y="3358.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="86.6" y="3331.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.6" y="3342.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="86.6" y="3315.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="89.6" y="3326.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.03%)</title><rect x="86.6" y="3299.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="89.6" y="3310.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printFloat (1 samples, 0.03%)</title><rect x="86.6" y="3283.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="89.6" y="3294.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.03%)</title><rect x="86.6" y="3267.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="89.6" y="3278.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.03%)</title><rect x="86.6" y="3251.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.6" y="3262.0"></text>
</g>
<g>
<title>java/math/BigDecimal.&lt;init&gt; (1 samples, 0.03%)</title><rect x="86.6" y="3235.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.6" y="3246.0"></text>
</g>
<g>
<title>java/math/BigDecimal.longDigitLength (1 samples, 0.03%)</title><rect x="86.6" y="3219.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="89.6" y="3230.0"></text>
</g>
<g>
<title>java/lang/Long.numberOfLeadingZeros (1 samples, 0.03%)</title><rect x="86.6" y="3203.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.6" y="3214.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="86.9" y="3347.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="89.9" y="3358.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="86.9" y="3331.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="89.9" y="3342.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="86.9" y="3315.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="89.9" y="3326.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateInstance (1 samples, 0.03%)</title><rect x="86.9" y="3299.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="89.9" y="3310.0"></text>
</g>
<g>
<title>Unsafe_AllocateInstance (1 samples, 0.03%)</title><rect x="86.9" y="3283.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="89.9" y="3294.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="86.9" y="3267.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="89.9" y="3278.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="86.9" y="3251.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="89.9" y="3262.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.toArray (1 samples, 0.03%)</title><rect x="87.2" y="3347.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.2" y="3358.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.toArray$ (1 samples, 0.03%)</title><rect x="87.2" y="3331.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="90.2" y="3342.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.toArray (1 samples, 0.03%)</title><rect x="87.2" y="3315.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.2" y="3326.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.copyToArray (1 samples, 0.03%)</title><rect x="87.2" y="3299.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="90.2" y="3310.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringOps.format (1 samples, 0.03%)</title><rect x="87.5" y="3427.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="90.5" y="3438.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.format$ (1 samples, 0.03%)</title><rect x="87.5" y="3411.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="90.5" y="3422.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.format (1 samples, 0.03%)</title><rect x="87.5" y="3395.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="90.5" y="3406.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.03%)</title><rect x="87.5" y="3379.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.5" y="3390.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="87.5" y="3363.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="90.5" y="3374.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="87.5" y="3347.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="90.5" y="3358.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.03%)</title><rect x="87.5" y="3331.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="90.5" y="3342.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printString (1 samples, 0.03%)</title><rect x="87.5" y="3315.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.5" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockId.toString (1 samples, 0.03%)</title><rect x="87.5" y="3299.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="90.5" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/storage/TaskResultBlockId.name (1 samples, 0.03%)</title><rect x="87.5" y="3283.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="90.5" y="3294.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.03%)</title><rect x="87.5" y="3267.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.5" y="3278.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="87.5" y="3251.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="90.5" y="3262.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="87.5" y="3235.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="90.5" y="3246.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="87.5" y="3219.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="90.5" y="3230.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="87.5" y="3203.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="90.5" y="3214.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.03%)</title><rect x="87.5" y="3187.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="90.5" y="3198.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="87.5" y="3171.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="90.5" y="3182.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (2 samples, 0.05%)</title><rect x="87.8" y="3459.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="90.8" y="3470.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (2 samples, 0.05%)</title><rect x="87.8" y="3443.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="90.8" y="3454.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (2 samples, 0.05%)</title><rect x="87.8" y="3427.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="90.8" y="3438.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (1 samples, 0.03%)</title><rect x="88.1" y="3411.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="91.1" y="3422.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.03%)</title><rect x="88.1" y="3395.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="91.1" y="3406.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (1 samples, 0.03%)</title><rect x="88.1" y="3379.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="91.1" y="3390.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (1 samples, 0.03%)</title><rect x="88.1" y="3363.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="91.1" y="3374.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (1 samples, 0.03%)</title><rect x="88.1" y="3347.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.1" y="3358.0"></text>
</g>
<g>
<title>org/apache/log4j/PatternLayout.format (1 samples, 0.03%)</title><rect x="88.1" y="3331.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="91.1" y="3342.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternConverter.format (1 samples, 0.03%)</title><rect x="88.1" y="3315.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="91.1" y="3326.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternParser$DatePatternConverter.convert (1 samples, 0.03%)</title><rect x="88.1" y="3299.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="91.1" y="3310.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.toString (1 samples, 0.03%)</title><rect x="88.1" y="3283.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.1" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$getCurrentBlockStatus (1 samples, 0.03%)</title><rect x="88.4" y="3539.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="91.4" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/storage/DiskStore.contains (1 samples, 0.03%)</title><rect x="88.4" y="3523.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="91.4" y="3534.0"></text>
</g>
<g>
<title>java/io/File.exists (1 samples, 0.03%)</title><rect x="88.4" y="3507.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="91.4" y="3518.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.hasBooleanAttributes (1 samples, 0.03%)</title><rect x="88.4" y="3491.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="91.4" y="3502.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.getBooleanAttributes0 (1 samples, 0.03%)</title><rect x="88.4" y="3475.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.4" y="3486.0"></text>
</g>
<g>
<title>__xstat (1 samples, 0.03%)</title><rect x="88.4" y="3459.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="91.4" y="3470.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="88.4" y="3443.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="91.4" y="3454.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="88.4" y="3427.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="91.4" y="3438.0"></text>
</g>
<g>
<title>__x64_sys_newstat (1 samples, 0.03%)</title><rect x="88.4" y="3411.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="91.4" y="3422.0"></text>
</g>
<g>
<title>__do_sys_newstat (1 samples, 0.03%)</title><rect x="88.4" y="3395.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="91.4" y="3406.0"></text>
</g>
<g>
<title>vfs_statx (1 samples, 0.03%)</title><rect x="88.4" y="3379.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="91.4" y="3390.0"></text>
</g>
<g>
<title>user_path_at_empty (1 samples, 0.03%)</title><rect x="88.4" y="3363.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="91.4" y="3374.0"></text>
</g>
<g>
<title>path_lookupat.isra.0 (1 samples, 0.03%)</title><rect x="88.4" y="3347.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="91.4" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$reportBlockStatus (2 samples, 0.05%)</title><rect x="88.7" y="3539.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="91.7" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.tryToReportBlockStatus (2 samples, 0.05%)</title><rect x="88.7" y="3523.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="91.7" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMaster.updateBlockInfo (2 samples, 0.05%)</title><rect x="88.7" y="3507.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="91.7" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (2 samples, 0.05%)</title><rect x="88.7" y="3491.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.7" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (2 samples, 0.05%)</title><rect x="88.7" y="3475.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.7" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.ask (2 samples, 0.05%)</title><rect x="88.7" y="3459.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="91.7" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.askAbortable (2 samples, 0.05%)</title><rect x="88.7" y="3443.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.7" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.askAbortable (2 samples, 0.05%)</title><rect x="88.7" y="3427.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="91.7" y="3438.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor.schedule (1 samples, 0.03%)</title><rect x="88.7" y="3411.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="91.7" y="3422.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor.delayedExecute (1 samples, 0.03%)</title><rect x="88.7" y="3395.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="91.7" y="3406.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.add (1 samples, 0.03%)</title><rect x="88.7" y="3379.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="91.7" y="3390.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.add (1 samples, 0.03%)</title><rect x="88.7" y="3363.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="91.7" y="3374.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.offer (1 samples, 0.03%)</title><rect x="88.7" y="3347.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="91.7" y="3358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="88.7" y="3331.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="91.7" y="3342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="88.7" y="3315.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="91.7" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postLocalMessage (1 samples, 0.03%)</title><rect x="89.0" y="3411.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.0" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postMessage (1 samples, 0.03%)</title><rect x="89.0" y="3395.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.0" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/DedicatedMessageLoop.post (1 samples, 0.03%)</title><rect x="89.0" y="3379.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.0" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/MessageLoop.setActive (1 samples, 0.03%)</title><rect x="89.0" y="3363.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="92.0" y="3374.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.03%)</title><rect x="89.0" y="3347.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="92.0" y="3358.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.03%)</title><rect x="89.0" y="3331.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.0" y="3342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="89.0" y="3315.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="92.0" y="3326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="89.0" y="3299.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.0" y="3310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="89.0" y="3283.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="92.0" y="3294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="89.0" y="3267.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.0" y="3278.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="89.0" y="3251.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.0" y="3262.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="89.0" y="3235.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="92.0" y="3246.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="89.0" y="3219.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="92.0" y="3230.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="89.0" y="3203.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="92.0" y="3214.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="89.0" y="3187.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="92.0" y="3198.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="89.0" y="3171.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="92.0" y="3182.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="89.0" y="3155.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="92.0" y="3166.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="89.0" y="3139.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="92.0" y="3150.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="89.0" y="3123.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="92.0" y="3134.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="89.0" y="3107.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="92.0" y="3118.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinally (1,849 samples, 47.08%)</title><rect x="89.3" y="3619.0" width="555.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.3" y="3630.0">org/apache/spark/util/Utils$.tryWithSafeFinally</text>
</g>
<g>
<title>org/apache/spark/executor/Executor$TaskRunner$$Lambda$2058.0x0000000802227628.apply (1,848 samples, 47.06%)</title><rect x="89.3" y="3603.0" width="555.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.3" y="3614.0">org/apache/spark/executor/Executor$TaskRunner$$Lambda$2058.0x0000000802227628..</text>
</g>
<g>
<title>org/apache/spark/executor/Executor$TaskRunner.$anonfun$run$3 (1,848 samples, 47.06%)</title><rect x="89.3" y="3587.0" width="555.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="92.3" y="3598.0">org/apache/spark/executor/Executor$TaskRunner.$anonfun$run$3</text>
</g>
<g>
<title>org/apache/spark/scheduler/Task.run (1,848 samples, 47.06%)</title><rect x="89.3" y="3571.0" width="555.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="92.3" y="3582.0">org/apache/spark/scheduler/Task.run</text>
</g>
<g>
<title>org/apache/spark/TaskContextImpl.markTaskCompleted (1 samples, 0.03%)</title><rect x="89.6" y="3555.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="92.6" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/TaskContextImpl.invokeListeners (1 samples, 0.03%)</title><rect x="89.6" y="3539.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="92.6" y="3550.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayBuffer.foreach (1 samples, 0.03%)</title><rect x="89.6" y="3523.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="92.6" y="3534.0"></text>
</g>
<g>
<title>scala/collection/mutable/ResizableArray.foreach$ (1 samples, 0.03%)</title><rect x="89.6" y="3507.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="92.6" y="3518.0"></text>
</g>
<g>
<title>scala/collection/mutable/ResizableArray.foreach (1 samples, 0.03%)</title><rect x="89.6" y="3491.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="92.6" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/TaskContextImpl$$Lambda$2138.0x000000080226b690.apply (1 samples, 0.03%)</title><rect x="89.6" y="3475.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.6" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/TaskContextImpl.$anonfun$invokeListeners$1$adapted (1 samples, 0.03%)</title><rect x="89.6" y="3459.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="92.6" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/TaskContextImpl.$anonfun$invokeListeners$1 (1 samples, 0.03%)</title><rect x="89.6" y="3443.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="92.6" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/TaskContextImpl$$Lambda$2137.0x000000080226b2b0.apply (1 samples, 0.03%)</title><rect x="89.6" y="3427.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="92.6" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/TaskContextImpl.$anonfun$markTaskCompleted$1$adapted (1 samples, 0.03%)</title><rect x="89.6" y="3411.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="92.6" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/TaskContextImpl.$anonfun$markTaskCompleted$1 (1 samples, 0.03%)</title><rect x="89.6" y="3395.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.6" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/TaskContext$$anon$1.onTaskCompletion (1 samples, 0.03%)</title><rect x="89.6" y="3379.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.6" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$Lambda$2086.0x0000000802231ea8.apply (1 samples, 0.03%)</title><rect x="89.6" y="3363.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="92.6" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.$anonfun$releaseBlockManagerLock$1$adapted (1 samples, 0.03%)</title><rect x="89.6" y="3347.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="92.6" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.$anonfun$releaseBlockManagerLock$1 (1 samples, 0.03%)</title><rect x="89.6" y="3331.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="92.6" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.releaseLock (1 samples, 0.03%)</title><rect x="89.6" y="3315.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="92.6" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockInfoManager.unlock (1 samples, 0.03%)</title><rect x="89.6" y="3299.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="92.6" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/ResultTask.runTask (1,840 samples, 46.86%)</title><rect x="89.9" y="3555.0" width="552.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="92.9" y="3566.0">org/apache/spark/scheduler/ResultTask.runTask</text>
</g>
<g>
<title>org/apache/spark/SparkContext$$Lambda$2104.0x0000000802256428.apply (15 samples, 0.38%)</title><rect x="90.2" y="3539.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="93.2" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.$anonfun$runJob$6 (15 samples, 0.38%)</title><rect x="90.2" y="3523.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.2" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$2593.0x0000000802450000.apply (15 samples, 0.38%)</title><rect x="90.2" y="3507.0" width="4.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="93.2" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$fold$2 (15 samples, 0.38%)</title><rect x="90.2" y="3491.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="93.2" y="3502.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterator.fold (15 samples, 0.38%)</title><rect x="90.2" y="3475.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.2" y="3486.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.fold$ (15 samples, 0.38%)</title><rect x="90.2" y="3459.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="93.2" y="3470.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="90.2" y="3443.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="93.2" y="3454.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="90.2" y="3427.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="93.2" y="3438.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="90.2" y="3411.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="93.2" y="3422.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="90.2" y="3395.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="93.2" y="3406.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="90.2" y="3379.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="93.2" y="3390.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="90.2" y="3363.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="93.2" y="3374.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.fold (14 samples, 0.36%)</title><rect x="90.5" y="3443.0" width="4.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="93.5" y="3454.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterator.foldLeft (14 samples, 0.36%)</title><rect x="90.5" y="3427.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="93.5" y="3438.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.foldLeft$ (14 samples, 0.36%)</title><rect x="90.5" y="3411.0" width="4.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.5" y="3422.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.foldLeft (14 samples, 0.36%)</title><rect x="90.5" y="3395.0" width="4.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.5" y="3406.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterator.foreach (14 samples, 0.36%)</title><rect x="90.5" y="3379.0" width="4.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="93.5" y="3390.0"></text>
</g>
<g>
<title>scala/collection/Iterator.foreach$ (14 samples, 0.36%)</title><rect x="90.5" y="3363.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.5" y="3374.0"></text>
</g>
<g>
<title>scala/collection/Iterator.foreach (14 samples, 0.36%)</title><rect x="90.5" y="3347.0" width="4.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="93.5" y="3358.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce$$Lambda$309.0x000000080193bb68.apply (14 samples, 0.36%)</title><rect x="90.5" y="3331.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.5" y="3342.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.$anonfun$foldLeft$1$adapted (14 samples, 0.36%)</title><rect x="90.5" y="3315.0" width="4.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="93.5" y="3326.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.$anonfun$foldLeft$1 (14 samples, 0.36%)</title><rect x="90.5" y="3299.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="93.5" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$CostFun$$Lambda$2590.0x000000080244ef40.apply (14 samples, 0.36%)</title><rect x="90.5" y="3283.0" width="4.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="93.5" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$CostFun.$anonfun$calculate$2 (14 samples, 0.36%)</title><rect x="90.5" y="3267.0" width="4.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="93.5" y="3278.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/BLAS$.axpy (11 samples, 0.28%)</title><rect x="90.5" y="3251.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="93.5" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/BLAS$.axpy (11 samples, 0.28%)</title><rect x="90.5" y="3235.0" width="3.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="93.5" y="3246.0"></text>
</g>
<g>
<title>com/github/fommil/netlib/F2jBLAS.daxpy (11 samples, 0.28%)</title><rect x="90.5" y="3219.0" width="3.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="93.5" y="3230.0"></text>
</g>
<g>
<title>org/netlib/blas/Daxpy.daxpy (11 samples, 0.28%)</title><rect x="90.5" y="3203.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="93.5" y="3214.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/SparseVector.toDense (3 samples, 0.08%)</title><rect x="93.8" y="3251.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="96.8" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/Vector.toDense$ (3 samples, 0.08%)</title><rect x="93.8" y="3235.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="96.8" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/Vector.toDense (3 samples, 0.08%)</title><rect x="93.8" y="3219.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="96.8" y="3230.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/SparseVector.toArray (3 samples, 0.08%)</title><rect x="93.8" y="3203.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="96.8" y="3214.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (2 samples, 0.05%)</title><rect x="93.8" y="3187.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="96.8" y="3198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="93.8" y="3171.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="96.8" y="3182.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="93.8" y="3155.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="96.8" y="3166.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="93.8" y="3139.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="96.8" y="3150.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="94.1" y="3139.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="97.1" y="3150.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (1 samples, 0.03%)</title><rect x="94.1" y="3123.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="97.1" y="3134.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="94.1" y="3107.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="97.1" y="3118.0"></text>
</g>
<g>
<title>HeapRegionManager::allocate_humongous(unsigned int) (1 samples, 0.03%)</title><rect x="94.1" y="3091.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="97.1" y="3102.0"></text>
</g>
<g>
<title>HeapRegionManager::find_contiguous_in_free_list(unsigned int) (1 samples, 0.03%)</title><rect x="94.1" y="3075.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="97.1" y="3086.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.03%)</title><rect x="94.4" y="3187.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="97.4" y="3198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="94.4" y="3171.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="97.4" y="3182.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="94.4" y="3155.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="97.4" y="3166.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="94.4" y="3139.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="97.4" y="3150.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (1 samples, 0.03%)</title><rect x="94.4" y="3123.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="97.4" y="3134.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="94.4" y="3107.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="97.4" y="3118.0"></text>
</g>
<g>
<title>HeapRegionManager::allocate_humongous(unsigned int) (1 samples, 0.03%)</title><rect x="94.4" y="3091.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="97.4" y="3102.0"></text>
</g>
<g>
<title>HeapRegionManager::find_contiguous_in_free_list(unsigned int) (1 samples, 0.03%)</title><rect x="94.4" y="3075.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="97.4" y="3086.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/Broadcast.value (2 samples, 0.05%)</title><rect x="94.7" y="3539.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="97.7" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.getValue (2 samples, 0.05%)</title><rect x="94.7" y="3523.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.7" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.readBroadcastBlock (2 samples, 0.05%)</title><rect x="94.7" y="3507.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="97.7" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryOrIOException (2 samples, 0.05%)</title><rect x="94.7" y="3491.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="97.7" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$Lambda$2077.0x000000080222e5c8.apply (2 samples, 0.05%)</title><rect x="94.7" y="3475.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.7" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.$anonfun$readBroadcastBlock$1 (2 samples, 0.05%)</title><rect x="94.7" y="3459.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.7" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/util/KeyLock.withLock (2 samples, 0.05%)</title><rect x="94.7" y="3443.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="97.7" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$Lambda$2078.0x000000080222e898.apply (2 samples, 0.05%)</title><rect x="94.7" y="3427.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.7" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.$anonfun$readBroadcastBlock$2 (2 samples, 0.05%)</title><rect x="94.7" y="3411.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="97.7" y="3422.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedMap.get (1 samples, 0.03%)</title><rect x="94.7" y="3395.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.7" y="3406.0"></text>
</g>
<g>
<title>org/apache/commons/collections/map/AbstractReferenceMap.get (1 samples, 0.03%)</title><rect x="94.7" y="3379.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="97.7" y="3390.0"></text>
</g>
<g>
<title>org/apache/commons/collections/map/AbstractReferenceMap.purgeBeforeRead (1 samples, 0.03%)</title><rect x="94.7" y="3363.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="97.7" y="3374.0"></text>
</g>
<g>
<title>org/apache/commons/collections/map/AbstractReferenceMap.purge (1 samples, 0.03%)</title><rect x="94.7" y="3347.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="97.7" y="3358.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.poll (1 samples, 0.03%)</title><rect x="94.7" y="3331.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="97.7" y="3342.0"></text>
</g>
<g>
<title>scala/Option.getOrElse (1 samples, 0.03%)</title><rect x="95.0" y="3395.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.0" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$Lambda$2080.0x000000080222ef40.apply (1 samples, 0.03%)</title><rect x="95.0" y="3379.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="98.0" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.$anonfun$readBroadcastBlock$4 (1 samples, 0.03%)</title><rect x="95.0" y="3363.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.0" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.setConf (1 samples, 0.03%)</title><rect x="95.0" y="3347.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="98.0" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/io/CompressionCodec$.createCodec (1 samples, 0.03%)</title><rect x="95.0" y="3331.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.0" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/io/CompressionCodec$.createCodec (1 samples, 0.03%)</title><rect x="95.0" y="3315.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.0" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.iterator (1,787 samples, 45.51%)</title><rect x="95.3" y="3539.0" width="537.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="98.3" y="3550.0">org/apache/spark/rdd/RDD.iterator</text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.computeOrReadCheckpoint (1,787 samples, 45.51%)</title><rect x="95.3" y="3523.0" width="537.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.3" y="3534.0">org/apache/spark/rdd/RDD.computeOrReadCheckpoint</text>
</g>
<g>
<title>org/apache/spark/rdd/MapPartitionsRDD.compute (1,787 samples, 45.51%)</title><rect x="95.3" y="3507.0" width="537.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.3" y="3518.0">org/apache/spark/rdd/MapPartitionsRDD.compute</text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$2098.0x000000080224c640.apply (1,786 samples, 45.48%)</title><rect x="95.3" y="3491.0" width="536.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.3" y="3502.0">org/apache/spark/rdd/RDD$$Lambda$2098.0x000000080224c640.apply</text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$mapPartitions$2$adapted (1,786 samples, 45.48%)</title><rect x="95.3" y="3475.0" width="536.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.3" y="3486.0">org/apache/spark/rdd/RDD.$anonfun$mapPartitions$2$adapted</text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$mapPartitions$2 (1,786 samples, 45.48%)</title><rect x="95.3" y="3459.0" width="536.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="98.3" y="3470.0">org/apache/spark/rdd/RDD.$anonfun$mapPartitions$2</text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$2592.0x000000080244f8d8.apply (1,786 samples, 45.48%)</title><rect x="95.3" y="3443.0" width="536.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="98.3" y="3454.0">org/apache/spark/rdd/RDD$$Lambda$2592.0x000000080244f8d8.apply</text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$treeAggregate$5 (1,786 samples, 45.48%)</title><rect x="95.3" y="3427.0" width="536.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="98.3" y="3438.0">org/apache/spark/rdd/RDD.$anonfun$treeAggregate$5</text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$2591.0x000000080244f4f8.apply (1,786 samples, 45.48%)</title><rect x="95.3" y="3411.0" width="536.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="98.3" y="3422.0">org/apache/spark/rdd/RDD$$Lambda$2591.0x000000080244f4f8.apply</text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$treeAggregate$3 (1,785 samples, 45.45%)</title><rect x="95.6" y="3395.0" width="536.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="98.6" y="3406.0">org/apache/spark/rdd/RDD.$anonfun$treeAggregate$3</text>
</g>
<g>
<title>org/apache/spark/InterruptibleIterator.aggregate (1,785 samples, 45.45%)</title><rect x="95.6" y="3379.0" width="536.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="98.6" y="3390.0">org/apache/spark/InterruptibleIterator.aggregate</text>
</g>
<g>
<title>scala/collection/TraversableOnce.aggregate$ (1,785 samples, 45.45%)</title><rect x="95.6" y="3363.0" width="536.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="98.6" y="3374.0">scala/collection/TraversableOnce.aggregate$</text>
</g>
<g>
<title>scala/collection/TraversableOnce.aggregate (1,785 samples, 45.45%)</title><rect x="95.6" y="3347.0" width="536.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="98.6" y="3358.0">scala/collection/TraversableOnce.aggregate</text>
</g>
<g>
<title>org/apache/spark/InterruptibleIterator.foldLeft (1,785 samples, 45.45%)</title><rect x="95.6" y="3331.0" width="536.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.6" y="3342.0">org/apache/spark/InterruptibleIterator.foldLeft</text>
</g>
<g>
<title>scala/collection/TraversableOnce.foldLeft$ (1,785 samples, 45.45%)</title><rect x="95.6" y="3315.0" width="536.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="98.6" y="3326.0">scala/collection/TraversableOnce.foldLeft$</text>
</g>
<g>
<title>scala/collection/TraversableOnce.foldLeft (1,785 samples, 45.45%)</title><rect x="95.6" y="3299.0" width="536.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.6" y="3310.0">scala/collection/TraversableOnce.foldLeft</text>
</g>
<g>
<title>org/apache/spark/InterruptibleIterator.foreach (1,785 samples, 45.45%)</title><rect x="95.6" y="3283.0" width="536.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="98.6" y="3294.0">org/apache/spark/InterruptibleIterator.foreach</text>
</g>
<g>
<title>scala/collection/Iterator.foreach$ (1,785 samples, 45.45%)</title><rect x="95.6" y="3267.0" width="536.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.6" y="3278.0">scala/collection/Iterator.foreach$</text>
</g>
<g>
<title>scala/collection/Iterator.foreach (1,785 samples, 45.45%)</title><rect x="95.6" y="3251.0" width="536.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="98.6" y="3262.0">scala/collection/Iterator.foreach</text>
</g>
<g>
<title>org/apache/spark/InterruptibleIterator.hasNext (1 samples, 0.03%)</title><rect x="95.6" y="3235.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="98.6" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/util/CompletionIterator.hasNext (1 samples, 0.03%)</title><rect x="95.6" y="3219.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="98.6" y="3230.0"></text>
</g>
<g>
<title>org/apache/spark/util/CompletionIterator$$anon$1.completion (1 samples, 0.03%)</title><rect x="95.6" y="3203.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="98.6" y="3214.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$$Lambda$2085.0x00000008022316e8.apply$mcV$sp (1 samples, 0.03%)</title><rect x="95.6" y="3187.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="98.6" y="3198.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.$anonfun$getLocalValues$4 (1 samples, 0.03%)</title><rect x="95.6" y="3171.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="98.6" y="3182.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.releaseLock (1 samples, 0.03%)</title><rect x="95.6" y="3155.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="98.6" y="3166.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockInfoManager.unlock (1 samples, 0.03%)</title><rect x="95.6" y="3139.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="98.6" y="3150.0"></text>
</g>
<g>
<title>com/google/common/collect/ConcurrentHashMultiset.remove (1 samples, 0.03%)</title><rect x="95.6" y="3123.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="98.6" y="3134.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce$$Lambda$309.0x000000080193bb68.apply (1,784 samples, 45.43%)</title><rect x="95.9" y="3235.0" width="536.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.9" y="3246.0">scala/collection/TraversableOnce$$Lambda$309.0x000000080193bb68.apply</text>
</g>
<g>
<title>scala/collection/TraversableOnce.$anonfun$foldLeft$1$adapted (1,784 samples, 45.43%)</title><rect x="95.9" y="3219.0" width="536.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="98.9" y="3230.0">scala/collection/TraversableOnce.$anonfun$foldLeft$1$adapted</text>
</g>
<g>
<title>scala/collection/TraversableOnce.$anonfun$foldLeft$1 (1,784 samples, 45.43%)</title><rect x="95.9" y="3203.0" width="536.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.9" y="3214.0">scala/collection/TraversableOnce.$anonfun$foldLeft$1</text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$CostFun$$Lambda$2589.0x000000080244e980.apply (1,784 samples, 45.43%)</title><rect x="95.9" y="3187.0" width="536.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="98.9" y="3198.0">org/apache/spark/mllib/optimization/LBFGS$CostFun$$Lambda$2589.0x000000080..</text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$CostFun.$anonfun$calculate$1 (1,784 samples, 45.43%)</title><rect x="95.9" y="3171.0" width="536.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="98.9" y="3182.0">org/apache/spark/mllib/optimization/LBFGS$CostFun.$anonfun$calculate$1</text>
</g>
<g>
<title>org/apache/spark/ml/ann/ANNGradient.compute (1,780 samples, 45.33%)</title><rect x="95.9" y="3155.0" width="534.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="98.9" y="3166.0">org/apache/spark/ml/ann/ANNGradient.compute</text>
</g>
<g>
<title>org/apache/spark/ml/ann/FeedForwardModel.computeGradient (1,780 samples, 45.33%)</title><rect x="95.9" y="3139.0" width="534.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="98.9" y="3150.0">org/apache/spark/ml/ann/FeedForwardModel.computeGradient</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="96.2" y="3123.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.2" y="3134.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$DMH.0x0000000801a95400.newInvokeSpecial (1 samples, 0.03%)</title><rect x="96.2" y="3107.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="99.2" y="3118.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="96.2" y="3091.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="99.2" y="3102.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateInstance (1 samples, 0.03%)</title><rect x="96.2" y="3075.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.2" y="3086.0"></text>
</g>
<g>
<title>JNIHandles::make_local(Thread*, oopDesc*, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="96.2" y="3059.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="99.2" y="3070.0"></text>
</g>
<g>
<title>org/apache/spark/ml/ann/FeedForwardModel.forward (561 samples, 14.29%)</title><rect x="96.5" y="3123.0" width="168.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="99.5" y="3134.0">org/apache/spark/ml/an..</text>
</g>
<g>
<title>org/apache/spark/ml/ann/AffineLayerModel.eval (2 samples, 0.05%)</title><rect x="96.5" y="3107.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="99.5" y="3118.0"></text>
</g>
<g>
<title>org/apache/spark/ml/ann/BreezeUtil$.dgemm (2 samples, 0.05%)</title><rect x="96.5" y="3091.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="99.5" y="3102.0"></text>
</g>
<g>
<title>com/github/fommil/netlib/F2jBLAS.dgemm (2 samples, 0.05%)</title><rect x="96.5" y="3075.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="99.5" y="3086.0"></text>
</g>
<g>
<title>org/netlib/blas/Dgemm.dgemm (2 samples, 0.05%)</title><rect x="96.5" y="3059.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="99.5" y="3070.0"></text>
</g>
<g>
<title>scala/collection/immutable/Range.foreach$mVc$sp (559 samples, 14.23%)</title><rect x="97.1" y="3107.0" width="168.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="100.1" y="3118.0">scala/collection/immu..</text>
</g>
<g>
<title>org/apache/spark/ml/ann/FeedForwardModel$$Lambda$2603.0x0000000802457b58.apply$mcVI$sp (559 samples, 14.23%)</title><rect x="97.1" y="3091.0" width="168.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="100.1" y="3102.0">org/apache/spark/ml/a..</text>
</g>
<g>
<title>org/apache/spark/ml/ann/FeedForwardModel.$anonfun$forward$2 (559 samples, 14.23%)</title><rect x="97.1" y="3075.0" width="168.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="100.1" y="3086.0">org/apache/spark/ml/a..</text>
</g>
<g>
<title>org/apache/spark/ml/ann/AffineLayerModel.eval (533 samples, 13.57%)</title><rect x="97.1" y="3059.0" width="160.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="100.1" y="3070.0">org/apache/spark/ml/..</text>
</g>
<g>
<title>breeze/linalg/BroadcastedColumns.$colon$eq (1 samples, 0.03%)</title><rect x="97.1" y="3043.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="100.1" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$eq$ (1 samples, 0.03%)</title><rect x="97.1" y="3027.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="100.1" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$eq (1 samples, 0.03%)</title><rect x="97.1" y="3011.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="100.1" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/BroadcastedColumns$$anon$6.apply (1 samples, 0.03%)</title><rect x="97.1" y="2995.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.1" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/BroadcastedColumns$$anon$6.apply (1 samples, 0.03%)</title><rect x="97.1" y="2979.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="100.1" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/DenseMatrix$$anon$23.apply (1 samples, 0.03%)</title><rect x="97.1" y="2963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="100.1" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/DenseMatrix$$anon$23.apply (1 samples, 0.03%)</title><rect x="97.1" y="2947.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.1" y="2958.0"></text>
</g>
<g>
<title>breeze/linalg/BroadcastedColumns$$anon$6$$Lambda$2599.0x0000000802454568.apply (1 samples, 0.03%)</title><rect x="97.1" y="2931.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="100.1" y="2942.0"></text>
</g>
<g>
<title>breeze/linalg/BroadcastedColumns$$anon$6.$anonfun$apply$5$adapted (1 samples, 0.03%)</title><rect x="97.1" y="2915.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="100.1" y="2926.0"></text>
</g>
<g>
<title>breeze/linalg/BroadcastedColumns$$anon$6.$anonfun$apply$5 (1 samples, 0.03%)</title><rect x="97.1" y="2899.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="100.1" y="2910.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$166.apply (1 samples, 0.03%)</title><rect x="97.1" y="2883.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="100.1" y="2894.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$166.apply (1 samples, 0.03%)</title><rect x="97.1" y="2867.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="100.1" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/ml/ann/BreezeUtil$.dgemm (532 samples, 13.55%)</title><rect x="97.4" y="3043.0" width="159.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="100.4" y="3054.0">org/apache/spark/ml/..</text>
</g>
<g>
<title>com/github/fommil/netlib/F2jBLAS.dgemm (531 samples, 13.52%)</title><rect x="97.7" y="3027.0" width="159.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="100.7" y="3038.0">com/github/fommil/ne..</text>
</g>
<g>
<title>org/netlib/blas/Dgemm.dgemm (531 samples, 13.52%)</title><rect x="97.7" y="3011.0" width="159.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="100.7" y="3022.0">org/netlib/blas/Dgem..</text>
</g>
<g>
<title>org/apache/spark/ml/ann/FunctionalLayerModel.eval (26 samples, 0.66%)</title><rect x="257.3" y="3059.0" width="7.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="260.3" y="3070.0"></text>
</g>
<g>
<title>org/apache/spark/ml/ann/ApplyInPlace$.apply (26 samples, 0.66%)</title><rect x="257.3" y="3043.0" width="7.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="260.3" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/DenseMatrix$mcD$sp.apply$mcD$sp (26 samples, 0.66%)</title><rect x="257.3" y="3027.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.3" y="3038.0"></text>
</g>
<g>
<title>libmExp (10 samples, 0.25%)</title><rect x="262.1" y="3011.0" width="3.0" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="265.1" y="3022.0"></text>
</g>
<g>
<title>org/apache/spark/ml/ann/SoftmaxLayerModelWithCrossEntropyLoss.loss (1 samples, 0.03%)</title><rect x="265.1" y="3123.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="268.1" y="3134.0"></text>
</g>
<g>
<title>breeze/numerics/package$log$.apply (1 samples, 0.03%)</title><rect x="265.1" y="3107.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="268.1" y="3118.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply$ (1 samples, 0.03%)</title><rect x="265.1" y="3091.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="268.1" y="3102.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply (1 samples, 0.03%)</title><rect x="265.1" y="3075.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.1" y="3086.0"></text>
</g>
<g>
<title>breeze/generic/MappingUFunc$$anon$2.apply (1 samples, 0.03%)</title><rect x="265.1" y="3059.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.1" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/DenseMatrix$$anon$29.apply (1 samples, 0.03%)</title><rect x="265.1" y="3043.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.1" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/DenseMatrix$$anon$29.apply (1 samples, 0.03%)</title><rect x="265.1" y="3027.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="268.1" y="3038.0"></text>
</g>
<g>
<title>scala/collection/immutable/Range.foreach$mVc$sp (1,215 samples, 30.94%)</title><rect x="265.4" y="3123.0" width="365.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="268.4" y="3134.0">scala/collection/immutable/Range.foreach$mVc$sp</text>
</g>
<g>
<title>org/apache/spark/ml/ann/FeedForwardModel$$Lambda$2608.0x000000080245de90.apply$mcVI$sp (711 samples, 18.11%)</title><rect x="265.4" y="3107.0" width="213.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.4" y="3118.0">org/apache/spark/ml/ann/Feed..</text>
</g>
<g>
<title>org/apache/spark/ml/ann/FeedForwardModel.$anonfun$computeGradient$2 (711 samples, 18.11%)</title><rect x="265.4" y="3091.0" width="213.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="268.4" y="3102.0">org/apache/spark/ml/ann/Feed..</text>
</g>
<g>
<title>org/apache/spark/ml/ann/AffineLayerModel.computePrevDelta (702 samples, 17.88%)</title><rect x="265.4" y="3075.0" width="211.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="268.4" y="3086.0">org/apache/spark/ml/ann/Affi..</text>
</g>
<g>
<title>org/apache/spark/ml/ann/BreezeUtil$.dgemm (702 samples, 17.88%)</title><rect x="265.4" y="3059.0" width="211.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="268.4" y="3070.0">org/apache/spark/ml/ann/Bree..</text>
</g>
<g>
<title>com/github/fommil/netlib/F2jBLAS.dgemm (700 samples, 17.83%)</title><rect x="265.4" y="3043.0" width="210.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="268.4" y="3054.0">com/github/fommil/netlib/F2j..</text>
</g>
<g>
<title>org/netlib/blas/Dgemm.dgemm (700 samples, 17.83%)</title><rect x="265.4" y="3027.0" width="210.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="268.4" y="3038.0">org/netlib/blas/Dgemm.dgemm</text>
</g>
<g>
<title>scala/Predef$.println (2 samples, 0.05%)</title><rect x="475.7" y="3043.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="478.7" y="3054.0"></text>
</g>
<g>
<title>scala/Console$.println (2 samples, 0.05%)</title><rect x="475.7" y="3027.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="478.7" y="3038.0"></text>
</g>
<g>
<title>java/io/PrintStream.println (2 samples, 0.05%)</title><rect x="475.7" y="3011.0" width="0.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="478.7" y="3022.0"></text>
</g>
<g>
<title>java/io/PrintStream.writeln (2 samples, 0.05%)</title><rect x="475.7" y="2995.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="478.7" y="3006.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (2 samples, 0.05%)</title><rect x="475.7" y="2979.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="478.7" y="2990.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (2 samples, 0.05%)</title><rect x="475.7" y="2963.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="478.7" y="2974.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (2 samples, 0.05%)</title><rect x="475.7" y="2947.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="478.7" y="2958.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (2 samples, 0.05%)</title><rect x="475.7" y="2931.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="478.7" y="2942.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (2 samples, 0.05%)</title><rect x="475.7" y="2915.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="478.7" y="2926.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (2 samples, 0.05%)</title><rect x="475.7" y="2899.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.7" y="2910.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (2 samples, 0.05%)</title><rect x="475.7" y="2883.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="478.7" y="2894.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (2 samples, 0.05%)</title><rect x="475.7" y="2867.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="478.7" y="2878.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (2 samples, 0.05%)</title><rect x="475.7" y="2851.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="478.7" y="2862.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (2 samples, 0.05%)</title><rect x="475.7" y="2835.0" width="0.7" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="478.7" y="2846.0"></text>
</g>
<g>
<title>writeBytes (2 samples, 0.05%)</title><rect x="475.7" y="2819.0" width="0.7" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="478.7" y="2830.0"></text>
</g>
<g>
<title>__write (2 samples, 0.05%)</title><rect x="475.7" y="2803.0" width="0.7" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="478.7" y="2814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.05%)</title><rect x="475.7" y="2787.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="478.7" y="2798.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.05%)</title><rect x="475.7" y="2771.0" width="0.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="478.7" y="2782.0"></text>
</g>
<g>
<title>__x64_sys_write (2 samples, 0.05%)</title><rect x="475.7" y="2755.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="478.7" y="2766.0"></text>
</g>
<g>
<title>ksys_write (2 samples, 0.05%)</title><rect x="475.7" y="2739.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="478.7" y="2750.0"></text>
</g>
<g>
<title>vfs_write (2 samples, 0.05%)</title><rect x="475.7" y="2723.0" width="0.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="478.7" y="2734.0"></text>
</g>
<g>
<title>__vfs_write (2 samples, 0.05%)</title><rect x="475.7" y="2707.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="478.7" y="2718.0"></text>
</g>
<g>
<title>new_sync_write (2 samples, 0.05%)</title><rect x="475.7" y="2691.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="478.7" y="2702.0"></text>
</g>
<g>
<title>pipe_write (2 samples, 0.05%)</title><rect x="475.7" y="2675.0" width="0.7" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="478.7" y="2686.0"></text>
</g>
<g>
<title>__wake_up_sync_key (2 samples, 0.05%)</title><rect x="475.7" y="2659.0" width="0.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="478.7" y="2670.0"></text>
</g>
<g>
<title>__wake_up_common_lock (2 samples, 0.05%)</title><rect x="475.7" y="2643.0" width="0.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="478.7" y="2654.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.05%)</title><rect x="475.7" y="2627.0" width="0.7" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="478.7" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/ml/ann/FunctionalLayerModel.computePrevDelta (9 samples, 0.23%)</title><rect x="476.4" y="3075.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.4" y="3086.0"></text>
</g>
<g>
<title>breeze/linalg/DenseMatrix.$colon$times$eq (4 samples, 0.10%)</title><rect x="476.4" y="3059.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="479.4" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$times$eq$ (4 samples, 0.10%)</title><rect x="476.4" y="3043.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="479.4" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$times$eq (4 samples, 0.10%)</title><rect x="476.4" y="3027.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="479.4" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseMatrixOps$$anon$14.apply (4 samples, 0.10%)</title><rect x="476.4" y="3011.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="479.4" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseMatrixOps$$anon$14.apply (4 samples, 0.10%)</title><rect x="476.4" y="2995.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="479.4" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/DenseMatrix.size (1 samples, 0.03%)</title><rect x="476.4" y="2979.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="479.4" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/Matrix.size$ (1 samples, 0.03%)</title><rect x="476.4" y="2963.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="479.4" y="2974.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="476.4" y="2947.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="479.4" y="2958.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="476.4" y="2931.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="479.4" y="2942.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="476.4" y="2915.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="479.4" y="2926.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="476.4" y="2899.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="479.4" y="2910.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$colon$times$eq (3 samples, 0.08%)</title><rect x="476.7" y="2979.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="479.7" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$times$eq$ (3 samples, 0.08%)</title><rect x="476.7" y="2963.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="479.7" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$times$eq (3 samples, 0.08%)</title><rect x="476.7" y="2947.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="479.7" y="2958.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$158.apply (3 samples, 0.08%)</title><rect x="476.7" y="2931.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="479.7" y="2942.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$158.apply (3 samples, 0.08%)</title><rect x="476.7" y="2915.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="479.7" y="2926.0"></text>
</g>
<g>
<title>org/apache/spark/ml/ann/ApplyInPlace$.apply (5 samples, 0.13%)</title><rect x="477.6" y="3059.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="480.6" y="3070.0"></text>
</g>
<g>
<title>org/apache/spark/ml/ann/FeedForwardModel$$Lambda$2610.0x000000080245e8a8.apply$mcVI$sp (504 samples, 12.83%)</title><rect x="479.1" y="3107.0" width="151.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.1" y="3118.0">org/apache/spark/ml..</text>
</g>
<g>
<title>org/apache/spark/ml/ann/FeedForwardModel.$anonfun$computeGradient$3 (504 samples, 12.83%)</title><rect x="479.1" y="3091.0" width="151.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="482.1" y="3102.0">org/apache/spark/ml..</text>
</g>
<g>
<title>org/apache/spark/ml/ann/AffineLayerModel.grad (503 samples, 12.81%)</title><rect x="479.4" y="3075.0" width="151.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="482.4" y="3086.0">org/apache/spark/ml..</text>
</g>
<g>
<title>breeze/linalg/DenseMatrix$mcD$sp.&lt;init&gt; (1 samples, 0.03%)</title><rect x="479.7" y="3059.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="482.7" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/DenseMatrix$mcD$sp.&lt;init&gt; (1 samples, 0.03%)</title><rect x="479.7" y="3043.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="482.7" y="3054.0"></text>
</g>
<g>
<title>scala/runtime/ScalaRunTime$.array_length (1 samples, 0.03%)</title><rect x="479.7" y="3027.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="482.7" y="3038.0"></text>
</g>
<g>
<title>org/apache/spark/ml/ann/BreezeUtil$.dgemm (501 samples, 12.76%)</title><rect x="480.0" y="3059.0" width="150.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="483.0" y="3070.0">org/apache/spark/ml..</text>
</g>
<g>
<title>com/github/fommil/netlib/F2jBLAS.dgemm (499 samples, 12.71%)</title><rect x="480.0" y="3043.0" width="149.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="483.0" y="3054.0">com/github/fommil/n..</text>
</g>
<g>
<title>org/netlib/blas/Dgemm.dgemm (499 samples, 12.71%)</title><rect x="480.0" y="3027.0" width="149.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="483.0" y="3038.0">org/netlib/blas/Dge..</text>
</g>
<g>
<title>scala/Predef$.println (2 samples, 0.05%)</title><rect x="629.9" y="3043.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="632.9" y="3054.0"></text>
</g>
<g>
<title>scala/Console$.println (2 samples, 0.05%)</title><rect x="629.9" y="3027.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="632.9" y="3038.0"></text>
</g>
<g>
<title>java/io/PrintStream.println (2 samples, 0.05%)</title><rect x="629.9" y="3011.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="632.9" y="3022.0"></text>
</g>
<g>
<title>java/io/PrintStream.writeln (2 samples, 0.05%)</title><rect x="629.9" y="2995.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="632.9" y="3006.0"></text>
</g>
<g>
<title>java/io/BufferedWriter.flushBuffer (1 samples, 0.03%)</title><rect x="629.9" y="2979.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="632.9" y="2990.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.write (1 samples, 0.03%)</title><rect x="629.9" y="2963.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.9" y="2974.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.write (1 samples, 0.03%)</title><rect x="629.9" y="2947.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="632.9" y="2958.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (1 samples, 0.03%)</title><rect x="629.9" y="2931.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="632.9" y="2942.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implWrite (1 samples, 0.03%)</title><rect x="629.9" y="2915.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="632.9" y="2926.0"></text>
</g>
<g>
<title>java/nio/charset/CharsetEncoder.encode (1 samples, 0.03%)</title><rect x="629.9" y="2899.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="632.9" y="2910.0"></text>
</g>
<g>
<title>sun/nio/cs/US_ASCII$Encoder.encodeLoop (1 samples, 0.03%)</title><rect x="629.9" y="2883.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="632.9" y="2894.0"></text>
</g>
<g>
<title>sun/nio/cs/US_ASCII$Encoder.encodeArrayLoop (1 samples, 0.03%)</title><rect x="629.9" y="2867.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="632.9" y="2878.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flushBuffer (1 samples, 0.03%)</title><rect x="630.2" y="2979.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="633.2" y="2990.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flushBuffer (1 samples, 0.03%)</title><rect x="630.2" y="2963.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="633.2" y="2974.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (1 samples, 0.03%)</title><rect x="630.2" y="2947.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.2" y="2958.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (1 samples, 0.03%)</title><rect x="630.2" y="2931.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="633.2" y="2942.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (1 samples, 0.03%)</title><rect x="630.2" y="2915.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="633.2" y="2926.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.03%)</title><rect x="630.2" y="2899.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="633.2" y="2910.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.03%)</title><rect x="630.2" y="2883.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="633.2" y="2894.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (1 samples, 0.03%)</title><rect x="630.2" y="2867.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="633.2" y="2878.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.03%)</title><rect x="630.2" y="2851.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="633.2" y="2862.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (1 samples, 0.03%)</title><rect x="630.2" y="2835.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="633.2" y="2846.0"></text>
</g>
<g>
<title>writeBytes (1 samples, 0.03%)</title><rect x="630.2" y="2819.0" width="0.3" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="633.2" y="2830.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="630.2" y="2803.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="633.2" y="2814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="630.2" y="2787.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="633.2" y="2798.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="630.2" y="2771.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="633.2" y="2782.0"></text>
</g>
<g>
<title>__x64_sys_write (1 samples, 0.03%)</title><rect x="630.2" y="2755.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="633.2" y="2766.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.03%)</title><rect x="630.2" y="2739.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="633.2" y="2750.0"></text>
</g>
<g>
<title>vfs_write (1 samples, 0.03%)</title><rect x="630.2" y="2723.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="633.2" y="2734.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.03%)</title><rect x="630.2" y="2707.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="633.2" y="2718.0"></text>
</g>
<g>
<title>new_sync_write (1 samples, 0.03%)</title><rect x="630.2" y="2691.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="633.2" y="2702.0"></text>
</g>
<g>
<title>pipe_write (1 samples, 0.03%)</title><rect x="630.2" y="2675.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="633.2" y="2686.0"></text>
</g>
<g>
<title>__wake_up_sync_key (1 samples, 0.03%)</title><rect x="630.2" y="2659.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="633.2" y="2670.0"></text>
</g>
<g>
<title>__wake_up_common_lock (1 samples, 0.03%)</title><rect x="630.2" y="2643.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="633.2" y="2654.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="630.2" y="2627.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="633.2" y="2638.0"></text>
</g>
<g>
<title>scala/runtime/RichInt$.until$extension0 (1 samples, 0.03%)</title><rect x="630.5" y="3123.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="633.5" y="3134.0"></text>
</g>
<g>
<title>scala/collection/immutable/Range$.apply (1 samples, 0.03%)</title><rect x="630.5" y="3107.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.5" y="3118.0"></text>
</g>
<g>
<title>scala/collection/immutable/Range.&lt;init&gt; (1 samples, 0.03%)</title><rect x="630.5" y="3091.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="633.5" y="3102.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/SparseVector.toDense (4 samples, 0.10%)</title><rect x="630.8" y="3155.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.8" y="3166.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/Vector.toDense$ (4 samples, 0.10%)</title><rect x="630.8" y="3139.0" width="1.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="633.8" y="3150.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/Vector.toDense (4 samples, 0.10%)</title><rect x="630.8" y="3123.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="633.8" y="3134.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/SparseVector.toArray (4 samples, 0.10%)</title><rect x="630.8" y="3107.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="633.8" y="3118.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (2 samples, 0.05%)</title><rect x="631.1" y="3091.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="634.1" y="3102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="631.1" y="3075.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="634.1" y="3086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="631.1" y="3059.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="634.1" y="3070.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="631.1" y="3043.0" width="0.3" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="634.1" y="3054.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="631.4" y="3043.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="634.4" y="3054.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (1 samples, 0.03%)</title><rect x="631.4" y="3027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="634.4" y="3038.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="631.4" y="3011.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="634.4" y="3022.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long) (1 samples, 0.03%)</title><rect x="631.4" y="2995.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="634.4" y="3006.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.03%)</title><rect x="631.4" y="2979.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="634.4" y="2990.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.03%)</title><rect x="631.4" y="2963.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="634.4" y="2974.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.03%)</title><rect x="631.7" y="3091.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="634.7" y="3102.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="631.7" y="3075.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="634.7" y="3086.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="631.7" y="3059.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="634.7" y="3070.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="631.7" y="3043.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="634.7" y="3054.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.iterator (1 samples, 0.03%)</title><rect x="632.0" y="3491.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.0" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.getOrCompute (1 samples, 0.03%)</title><rect x="632.0" y="3475.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.0" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.getOrElseUpdate (1 samples, 0.03%)</title><rect x="632.0" y="3459.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.0" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.get (1 samples, 0.03%)</title><rect x="632.0" y="3443.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.0" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.logInfo (1 samples, 0.03%)</title><rect x="632.0" y="3427.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="635.0" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (1 samples, 0.03%)</title><rect x="632.0" y="3411.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="635.0" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (1 samples, 0.03%)</title><rect x="632.0" y="3395.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.0" y="3406.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (1 samples, 0.03%)</title><rect x="632.0" y="3379.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="635.0" y="3390.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (1 samples, 0.03%)</title><rect x="632.0" y="3363.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.0" y="3374.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (1 samples, 0.03%)</title><rect x="632.0" y="3347.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="635.0" y="3358.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (1 samples, 0.03%)</title><rect x="632.0" y="3331.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="635.0" y="3342.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.03%)</title><rect x="632.0" y="3315.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.0" y="3326.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (1 samples, 0.03%)</title><rect x="632.0" y="3299.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="635.0" y="3310.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (1 samples, 0.03%)</title><rect x="632.0" y="3283.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="635.0" y="3294.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (1 samples, 0.03%)</title><rect x="632.0" y="3267.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="635.0" y="3278.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/QuietWriter.flush (1 samples, 0.03%)</title><rect x="632.0" y="3251.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.0" y="3262.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flush (1 samples, 0.03%)</title><rect x="632.0" y="3235.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="635.0" y="3246.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flush (1 samples, 0.03%)</title><rect x="632.0" y="3219.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.0" y="3230.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlush (1 samples, 0.03%)</title><rect x="632.0" y="3203.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="635.0" y="3214.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (1 samples, 0.03%)</title><rect x="632.0" y="3187.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.0" y="3198.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (1 samples, 0.03%)</title><rect x="632.0" y="3171.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="635.0" y="3182.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (1 samples, 0.03%)</title><rect x="632.0" y="3155.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="635.0" y="3166.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.03%)</title><rect x="632.0" y="3139.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="635.0" y="3150.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.03%)</title><rect x="632.0" y="3123.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.0" y="3134.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (1 samples, 0.03%)</title><rect x="632.0" y="3107.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="635.0" y="3118.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.03%)</title><rect x="632.0" y="3091.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.0" y="3102.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (1 samples, 0.03%)</title><rect x="632.0" y="3075.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="635.0" y="3086.0"></text>
</g>
<g>
<title>writeBytes (1 samples, 0.03%)</title><rect x="632.0" y="3059.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="635.0" y="3070.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="632.0" y="3043.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="635.0" y="3054.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="632.0" y="3027.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="635.0" y="3038.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="632.0" y="3011.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="635.0" y="3022.0"></text>
</g>
<g>
<title>__x64_sys_write (1 samples, 0.03%)</title><rect x="632.0" y="2995.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="635.0" y="3006.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.03%)</title><rect x="632.0" y="2979.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="635.0" y="2990.0"></text>
</g>
<g>
<title>__fget_light (1 samples, 0.03%)</title><rect x="632.0" y="2963.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="635.0" y="2974.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.deserialize (35 samples, 0.89%)</title><rect x="632.3" y="3539.0" width="10.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="635.3" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaDeserializationStream.readObject (35 samples, 0.89%)</title><rect x="632.3" y="3523.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="635.3" y="3534.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (35 samples, 0.89%)</title><rect x="632.3" y="3507.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="635.3" y="3518.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (35 samples, 0.89%)</title><rect x="632.3" y="3491.0" width="10.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="635.3" y="3502.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (35 samples, 0.89%)</title><rect x="632.3" y="3475.0" width="10.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="635.3" y="3486.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (35 samples, 0.89%)</title><rect x="632.3" y="3459.0" width="10.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="635.3" y="3470.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="632.3" y="3443.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="635.3" y="3454.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="632.3" y="3427.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="635.3" y="3438.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (1 samples, 0.03%)</title><rect x="632.3" y="3411.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="635.3" y="3422.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.readNonProxy (1 samples, 0.03%)</title><rect x="632.3" y="3395.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.3" y="3406.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readUTF (1 samples, 0.03%)</title><rect x="632.3" y="3379.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="635.3" y="3390.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTF (1 samples, 0.03%)</title><rect x="632.3" y="3363.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="635.3" y="3374.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFBody (1 samples, 0.03%)</title><rect x="632.3" y="3347.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="635.3" y="3358.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (34 samples, 0.87%)</title><rect x="632.6" y="3443.0" width="10.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.6" y="3454.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (34 samples, 0.87%)</title><rect x="632.6" y="3427.0" width="10.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="635.6" y="3438.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (34 samples, 0.87%)</title><rect x="632.6" y="3411.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="635.6" y="3422.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (34 samples, 0.87%)</title><rect x="632.6" y="3395.0" width="10.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="635.6" y="3406.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="632.6" y="3379.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="635.6" y="3390.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="632.6" y="3363.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="635.6" y="3374.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (1 samples, 0.03%)</title><rect x="632.6" y="3347.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.6" y="3358.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.readNonProxy (1 samples, 0.03%)</title><rect x="632.6" y="3331.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="635.6" y="3342.0"></text>
</g>
<g>
<title>java/io/ObjectStreamField.&lt;init&gt; (1 samples, 0.03%)</title><rect x="632.6" y="3315.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="635.6" y="3326.0"></text>
</g>
<g>
<title>java/lang/String.intern (1 samples, 0.03%)</title><rect x="632.6" y="3299.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="635.6" y="3310.0"></text>
</g>
<g>
<title>JVM_InternString (1 samples, 0.03%)</title><rect x="632.6" y="3283.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="635.6" y="3294.0"></text>
</g>
<g>
<title>StringTable::intern(oopDesc*, Thread*) (1 samples, 0.03%)</title><rect x="632.6" y="3267.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="635.6" y="3278.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short const*, int, Thread*) (1 samples, 0.03%)</title><rect x="632.6" y="3251.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="635.6" y="3262.0"></text>
</g>
<g>
<title>StringTable::do_lookup(unsigned short const*, int, unsigned long) (1 samples, 0.03%)</title><rect x="632.6" y="3235.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="635.6" y="3246.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (33 samples, 0.84%)</title><rect x="632.9" y="3379.0" width="9.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="635.9" y="3390.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (33 samples, 0.84%)</title><rect x="632.9" y="3363.0" width="9.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="635.9" y="3374.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (33 samples, 0.84%)</title><rect x="632.9" y="3347.0" width="9.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="635.9" y="3358.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClass (1 samples, 0.03%)</title><rect x="632.9" y="3331.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="635.9" y="3342.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="632.9" y="3315.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="635.9" y="3326.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="632.9" y="3299.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="635.9" y="3310.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (1 samples, 0.03%)</title><rect x="632.9" y="3283.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="635.9" y="3294.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (32 samples, 0.81%)</title><rect x="633.2" y="3331.0" width="9.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="636.2" y="3342.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (32 samples, 0.81%)</title><rect x="633.2" y="3315.0" width="9.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.2" y="3326.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (4 samples, 0.10%)</title><rect x="633.2" y="3299.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="636.2" y="3310.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (4 samples, 0.10%)</title><rect x="633.2" y="3283.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="636.2" y="3294.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (4 samples, 0.10%)</title><rect x="633.2" y="3267.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="636.2" y="3278.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (4 samples, 0.10%)</title><rect x="633.2" y="3251.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="636.2" y="3262.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (4 samples, 0.10%)</title><rect x="633.2" y="3235.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="636.2" y="3246.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (4 samples, 0.10%)</title><rect x="633.2" y="3219.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.2" y="3230.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (4 samples, 0.10%)</title><rect x="633.2" y="3203.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.2" y="3214.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (4 samples, 0.10%)</title><rect x="633.2" y="3187.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="636.2" y="3198.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (4 samples, 0.10%)</title><rect x="633.2" y="3171.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="636.2" y="3182.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (4 samples, 0.10%)</title><rect x="633.2" y="3155.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="636.2" y="3166.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (4 samples, 0.10%)</title><rect x="633.2" y="3139.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="636.2" y="3150.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (4 samples, 0.10%)</title><rect x="633.2" y="3123.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="636.2" y="3134.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (4 samples, 0.10%)</title><rect x="633.2" y="3107.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="636.2" y="3118.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (4 samples, 0.10%)</title><rect x="633.2" y="3091.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="636.2" y="3102.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (4 samples, 0.10%)</title><rect x="633.2" y="3075.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="636.2" y="3086.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (4 samples, 0.10%)</title><rect x="633.2" y="3059.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="636.2" y="3070.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (4 samples, 0.10%)</title><rect x="633.2" y="3043.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="636.2" y="3054.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (3 samples, 0.08%)</title><rect x="633.2" y="3027.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.2" y="3038.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (3 samples, 0.08%)</title><rect x="633.2" y="3011.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.2" y="3022.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.08%)</title><rect x="633.2" y="2995.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="636.2" y="3006.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (3 samples, 0.08%)</title><rect x="633.2" y="2979.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="636.2" y="2990.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.08%)</title><rect x="633.2" y="2963.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="636.2" y="2974.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (3 samples, 0.08%)</title><rect x="633.2" y="2947.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="636.2" y="2958.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (3 samples, 0.08%)</title><rect x="633.2" y="2931.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.2" y="2942.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (3 samples, 0.08%)</title><rect x="633.2" y="2915.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="636.2" y="2926.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.08%)</title><rect x="633.2" y="2899.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="636.2" y="2910.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (3 samples, 0.08%)</title><rect x="633.2" y="2883.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="636.2" y="2894.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="633.2" y="2867.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="636.2" y="2878.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="633.2" y="2851.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.2" y="2862.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="633.2" y="2835.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="636.2" y="2846.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (1 samples, 0.03%)</title><rect x="633.2" y="2819.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="636.2" y="2830.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="633.2" y="2803.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="636.2" y="2814.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="633.2" y="2787.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="636.2" y="2798.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="633.2" y="2771.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="636.2" y="2782.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="633.2" y="2755.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="636.2" y="2766.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="633.2" y="2739.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="636.2" y="2750.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (1 samples, 0.03%)</title><rect x="633.2" y="2723.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="636.2" y="2734.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;548964ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 548964ul&gt;::oop_access_barrier(void*) (1 samples, 0.03%)</title><rect x="633.2" y="2707.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="636.2" y="2718.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.forClass (1 samples, 0.03%)</title><rect x="633.5" y="2867.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="636.5" y="2878.0"></text>
</g>
<g>
<title>jdk/internal/reflect/Reflection.getCallerClass (1 samples, 0.03%)</title><rect x="633.5" y="2851.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="636.5" y="2862.0"></text>
</g>
<g>
<title>JVM_GetCallerClass (1 samples, 0.03%)</title><rect x="633.5" y="2835.0" width="0.3" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="636.5" y="2846.0"></text>
</g>
<g>
<title>Method::is_ignored_by_security_stack_walk() const (1 samples, 0.03%)</title><rect x="633.5" y="2819.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="636.5" y="2830.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="633.8" y="2867.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="636.8" y="2878.0"></text>
</g>
<g>
<title>java/security/ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege (1 samples, 0.03%)</title><rect x="633.8" y="2851.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="636.8" y="2862.0"></text>
</g>
<g>
<title>java/security/ProtectionDomain$JavaSecurityAccessImpl.getCombinedACC (1 samples, 0.03%)</title><rect x="633.8" y="2835.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="636.8" y="2846.0"></text>
</g>
<g>
<title>java/security/AccessControlContext.optimize (1 samples, 0.03%)</title><rect x="633.8" y="2819.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="636.8" y="2830.0"></text>
</g>
<g>
<title>java/security/AccessControlContext.combine (1 samples, 0.03%)</title><rect x="633.8" y="2803.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="636.8" y="2814.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadResolve (1 samples, 0.03%)</title><rect x="634.1" y="3027.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="637.1" y="3038.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="634.1" y="3011.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="637.1" y="3022.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="634.1" y="2995.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.1" y="3006.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor13.invoke (1 samples, 0.03%)</title><rect x="634.1" y="2979.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="637.1" y="2990.0"></text>
</g>
<g>
<title>java/lang/invoke/SerializedLambda.readResolve (1 samples, 0.03%)</title><rect x="634.1" y="2963.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="637.1" y="2974.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="634.1" y="2947.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="637.1" y="2958.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="634.1" y="2931.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.1" y="2942.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor35.invoke (1 samples, 0.03%)</title><rect x="634.1" y="2915.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.1" y="2926.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$CostFun.$deserializeLambda$ (1 samples, 0.03%)</title><rect x="634.1" y="2899.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.1" y="2910.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="634.1" y="2883.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="637.1" y="2894.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x00000008018bc800.invoke (1 samples, 0.03%)</title><rect x="634.1" y="2867.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="637.1" y="2878.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeSpecial (1 samples, 0.03%)</title><rect x="634.1" y="2851.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="637.1" y="2862.0"></text>
</g>
<g>
<title>scala/runtime/LambdaDeserialize.deserializeLambda (1 samples, 0.03%)</title><rect x="634.1" y="2835.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.1" y="2846.0"></text>
</g>
<g>
<title>scala/runtime/LambdaDeserializer$.deserializeLambda (1 samples, 0.03%)</title><rect x="634.1" y="2819.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="637.1" y="2830.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="634.1" y="2803.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="637.1" y="2814.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (28 samples, 0.71%)</title><rect x="634.4" y="3299.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.4" y="3310.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (28 samples, 0.71%)</title><rect x="634.4" y="3283.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="637.4" y="3294.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (28 samples, 0.71%)</title><rect x="634.4" y="3267.0" width="8.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="637.4" y="3278.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (28 samples, 0.71%)</title><rect x="634.4" y="3251.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.4" y="3262.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (28 samples, 0.71%)</title><rect x="634.4" y="3235.0" width="8.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="637.4" y="3246.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (28 samples, 0.71%)</title><rect x="634.4" y="3219.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="637.4" y="3230.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (28 samples, 0.71%)</title><rect x="634.4" y="3203.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="637.4" y="3214.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (28 samples, 0.71%)</title><rect x="634.4" y="3187.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.4" y="3198.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (28 samples, 0.71%)</title><rect x="634.4" y="3171.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.4" y="3182.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (28 samples, 0.71%)</title><rect x="634.4" y="3155.0" width="8.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="637.4" y="3166.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (28 samples, 0.71%)</title><rect x="634.4" y="3139.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.4" y="3150.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (28 samples, 0.71%)</title><rect x="634.4" y="3123.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="637.4" y="3134.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (28 samples, 0.71%)</title><rect x="634.4" y="3107.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.4" y="3118.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (28 samples, 0.71%)</title><rect x="634.4" y="3091.0" width="8.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.4" y="3102.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (28 samples, 0.71%)</title><rect x="634.4" y="3075.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="637.4" y="3086.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (28 samples, 0.71%)</title><rect x="634.4" y="3059.0" width="8.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="637.4" y="3070.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (28 samples, 0.71%)</title><rect x="634.4" y="3043.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="637.4" y="3054.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (27 samples, 0.69%)</title><rect x="634.4" y="3027.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="637.4" y="3038.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (27 samples, 0.69%)</title><rect x="634.4" y="3011.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.4" y="3022.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (27 samples, 0.69%)</title><rect x="634.4" y="2995.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.4" y="3006.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (27 samples, 0.69%)</title><rect x="634.4" y="2979.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.4" y="2990.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (27 samples, 0.69%)</title><rect x="634.4" y="2963.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.4" y="2974.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (27 samples, 0.69%)</title><rect x="634.4" y="2947.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.4" y="2958.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (27 samples, 0.69%)</title><rect x="634.4" y="2931.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.4" y="2942.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (27 samples, 0.69%)</title><rect x="634.4" y="2915.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.4" y="2926.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (27 samples, 0.69%)</title><rect x="634.4" y="2899.0" width="8.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="637.4" y="2910.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (27 samples, 0.69%)</title><rect x="634.4" y="2883.0" width="8.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="637.4" y="2894.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (27 samples, 0.69%)</title><rect x="634.4" y="2867.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="637.4" y="2878.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (27 samples, 0.69%)</title><rect x="634.4" y="2851.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="637.4" y="2862.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (27 samples, 0.69%)</title><rect x="634.4" y="2835.0" width="8.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="637.4" y="2846.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (27 samples, 0.69%)</title><rect x="634.4" y="2819.0" width="8.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.4" y="2830.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (27 samples, 0.69%)</title><rect x="634.4" y="2803.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.4" y="2814.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (27 samples, 0.69%)</title><rect x="634.4" y="2787.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="637.4" y="2798.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (27 samples, 0.69%)</title><rect x="634.4" y="2771.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.4" y="2782.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (27 samples, 0.69%)</title><rect x="634.4" y="2755.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.4" y="2766.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (27 samples, 0.69%)</title><rect x="634.4" y="2739.0" width="8.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="637.4" y="2750.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (27 samples, 0.69%)</title><rect x="634.4" y="2723.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="637.4" y="2734.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (27 samples, 0.69%)</title><rect x="634.4" y="2707.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.4" y="2718.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (27 samples, 0.69%)</title><rect x="634.4" y="2691.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.4" y="2702.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (27 samples, 0.69%)</title><rect x="634.4" y="2675.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="637.4" y="2686.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (27 samples, 0.69%)</title><rect x="634.4" y="2659.0" width="8.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.4" y="2670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (27 samples, 0.69%)</title><rect x="634.4" y="2643.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="637.4" y="2654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (27 samples, 0.69%)</title><rect x="634.4" y="2627.0" width="8.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.4" y="2638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (27 samples, 0.69%)</title><rect x="634.4" y="2611.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="637.4" y="2622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (27 samples, 0.69%)</title><rect x="634.4" y="2595.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="637.4" y="2606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (27 samples, 0.69%)</title><rect x="634.4" y="2579.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.4" y="2590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (27 samples, 0.69%)</title><rect x="634.4" y="2563.0" width="8.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="637.4" y="2574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (27 samples, 0.69%)</title><rect x="634.4" y="2547.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.4" y="2558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (27 samples, 0.69%)</title><rect x="634.4" y="2531.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="637.4" y="2542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (27 samples, 0.69%)</title><rect x="634.4" y="2515.0" width="8.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="637.4" y="2526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (27 samples, 0.69%)</title><rect x="634.4" y="2499.0" width="8.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.4" y="2510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (27 samples, 0.69%)</title><rect x="634.4" y="2483.0" width="8.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="637.4" y="2494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (27 samples, 0.69%)</title><rect x="634.4" y="2467.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.4" y="2478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (27 samples, 0.69%)</title><rect x="634.4" y="2451.0" width="8.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.4" y="2462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (2 samples, 0.05%)</title><rect x="634.4" y="2435.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.4" y="2446.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (2 samples, 0.05%)</title><rect x="634.4" y="2419.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="637.4" y="2430.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (2 samples, 0.05%)</title><rect x="634.4" y="2403.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.4" y="2414.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (2 samples, 0.05%)</title><rect x="634.4" y="2387.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="637.4" y="2398.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (2 samples, 0.05%)</title><rect x="634.4" y="2371.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="637.4" y="2382.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="634.4" y="2355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="637.4" y="2366.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="634.4" y="2339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="637.4" y="2350.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="634.4" y="2323.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.4" y="2334.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClass (1 samples, 0.03%)</title><rect x="634.4" y="2307.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.4" y="2318.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="634.4" y="2291.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="637.4" y="2302.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="634.4" y="2275.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.4" y="2286.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="634.4" y="2259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.4" y="2270.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="634.4" y="2243.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.4" y="2254.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="634.4" y="2227.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.4" y="2238.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="634.4" y="2211.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="637.4" y="2222.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (1 samples, 0.03%)</title><rect x="634.4" y="2195.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="637.4" y="2206.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getReflector (1 samples, 0.03%)</title><rect x="634.4" y="2179.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="637.4" y="2190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.03%)</title><rect x="634.4" y="2163.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="637.4" y="2174.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass$FieldReflectorKey.equals (1 samples, 0.03%)</title><rect x="634.4" y="2147.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="637.4" y="2158.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadResolve (1 samples, 0.03%)</title><rect x="634.7" y="2355.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="637.7" y="2366.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="634.7" y="2339.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="637.7" y="2350.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="634.7" y="2323.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.7" y="2334.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor13.invoke (1 samples, 0.03%)</title><rect x="634.7" y="2307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="637.7" y="2318.0"></text>
</g>
<g>
<title>java/lang/invoke/SerializedLambda.readResolve (1 samples, 0.03%)</title><rect x="634.7" y="2291.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="637.7" y="2302.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="634.7" y="2275.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.7" y="2286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="634.7" y="2259.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="637.7" y="2270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor65.invoke (1 samples, 0.03%)</title><rect x="634.7" y="2243.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="637.7" y="2254.0"></text>
</g>
<g>
<title>org/apache/spark/ml/classification/MultilayerPerceptronClassifier.$deserializeLambda$ (1 samples, 0.03%)</title><rect x="634.7" y="2227.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="637.7" y="2238.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (25 samples, 0.64%)</title><rect x="635.0" y="2435.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.0" y="2446.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (25 samples, 0.64%)</title><rect x="635.0" y="2419.0" width="7.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="638.0" y="2430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (25 samples, 0.64%)</title><rect x="635.0" y="2403.0" width="7.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.0" y="2414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (25 samples, 0.64%)</title><rect x="635.0" y="2387.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="638.0" y="2398.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (25 samples, 0.64%)</title><rect x="635.0" y="2371.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.0" y="2382.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (25 samples, 0.64%)</title><rect x="635.0" y="2355.0" width="7.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.0" y="2366.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (25 samples, 0.64%)</title><rect x="635.0" y="2339.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.0" y="2350.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (25 samples, 0.64%)</title><rect x="635.0" y="2323.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.0" y="2334.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (25 samples, 0.64%)</title><rect x="635.0" y="2307.0" width="7.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="638.0" y="2318.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (25 samples, 0.64%)</title><rect x="635.0" y="2291.0" width="7.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="638.0" y="2302.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (25 samples, 0.64%)</title><rect x="635.0" y="2275.0" width="7.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.0" y="2286.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (25 samples, 0.64%)</title><rect x="635.0" y="2259.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.0" y="2270.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (25 samples, 0.64%)</title><rect x="635.0" y="2243.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.0" y="2254.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (25 samples, 0.64%)</title><rect x="635.0" y="2227.0" width="7.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.0" y="2238.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (25 samples, 0.64%)</title><rect x="635.0" y="2211.0" width="7.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.0" y="2222.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (25 samples, 0.64%)</title><rect x="635.0" y="2195.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.0" y="2206.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (25 samples, 0.64%)</title><rect x="635.0" y="2179.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.0" y="2190.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (25 samples, 0.64%)</title><rect x="635.0" y="2163.0" width="7.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.0" y="2174.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (25 samples, 0.64%)</title><rect x="635.0" y="2147.0" width="7.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.0" y="2158.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (25 samples, 0.64%)</title><rect x="635.0" y="2131.0" width="7.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.0" y="2142.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (25 samples, 0.64%)</title><rect x="635.0" y="2115.0" width="7.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.0" y="2126.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (25 samples, 0.64%)</title><rect x="635.0" y="2099.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.0" y="2110.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (25 samples, 0.64%)</title><rect x="635.0" y="2083.0" width="7.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.0" y="2094.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (25 samples, 0.64%)</title><rect x="635.0" y="2067.0" width="7.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="638.0" y="2078.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (25 samples, 0.64%)</title><rect x="635.0" y="2051.0" width="7.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.0" y="2062.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (25 samples, 0.64%)</title><rect x="635.0" y="2035.0" width="7.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.0" y="2046.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (25 samples, 0.64%)</title><rect x="635.0" y="2019.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.0" y="2030.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (25 samples, 0.64%)</title><rect x="635.0" y="2003.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.0" y="2014.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (25 samples, 0.64%)</title><rect x="635.0" y="1987.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.0" y="1998.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (25 samples, 0.64%)</title><rect x="635.0" y="1971.0" width="7.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.0" y="1982.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (25 samples, 0.64%)</title><rect x="635.0" y="1955.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="638.0" y="1966.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (25 samples, 0.64%)</title><rect x="635.0" y="1939.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="638.0" y="1950.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (24 samples, 0.61%)</title><rect x="635.0" y="1923.0" width="7.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.0" y="1934.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (24 samples, 0.61%)</title><rect x="635.0" y="1907.0" width="7.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.0" y="1918.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (24 samples, 0.61%)</title><rect x="635.0" y="1891.0" width="7.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.0" y="1902.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (24 samples, 0.61%)</title><rect x="635.0" y="1875.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.0" y="1886.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (24 samples, 0.61%)</title><rect x="635.0" y="1859.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.0" y="1870.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (24 samples, 0.61%)</title><rect x="635.0" y="1843.0" width="7.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.0" y="1854.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (24 samples, 0.61%)</title><rect x="635.0" y="1827.0" width="7.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.0" y="1838.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (24 samples, 0.61%)</title><rect x="635.0" y="1811.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.0" y="1822.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (24 samples, 0.61%)</title><rect x="635.0" y="1795.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="638.0" y="1806.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (24 samples, 0.61%)</title><rect x="635.0" y="1779.0" width="7.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.0" y="1790.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (24 samples, 0.61%)</title><rect x="635.0" y="1763.0" width="7.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.0" y="1774.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (24 samples, 0.61%)</title><rect x="635.0" y="1747.0" width="7.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="638.0" y="1758.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (24 samples, 0.61%)</title><rect x="635.0" y="1731.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.0" y="1742.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (24 samples, 0.61%)</title><rect x="635.0" y="1715.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.0" y="1726.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (24 samples, 0.61%)</title><rect x="635.0" y="1699.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.0" y="1710.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (24 samples, 0.61%)</title><rect x="635.0" y="1683.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="638.0" y="1694.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (24 samples, 0.61%)</title><rect x="635.0" y="1667.0" width="7.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.0" y="1678.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (24 samples, 0.61%)</title><rect x="635.0" y="1651.0" width="7.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="638.0" y="1662.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (24 samples, 0.61%)</title><rect x="635.0" y="1635.0" width="7.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.0" y="1646.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (24 samples, 0.61%)</title><rect x="635.0" y="1619.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="638.0" y="1630.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (24 samples, 0.61%)</title><rect x="635.0" y="1603.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="638.0" y="1614.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (23 samples, 0.59%)</title><rect x="635.0" y="1587.0" width="6.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.0" y="1598.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="635.0" y="1571.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.0" y="1582.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="635.0" y="1555.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.0" y="1566.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (1 samples, 0.03%)</title><rect x="635.0" y="1539.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="638.0" y="1550.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="635.0" y="1523.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.0" y="1534.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="635.0" y="1507.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.0" y="1518.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="635.0" y="1491.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.0" y="1502.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="635.0" y="1475.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="638.0" y="1486.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="635.0" y="1459.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="638.0" y="1470.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (1 samples, 0.03%)</title><rect x="635.0" y="1443.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.0" y="1454.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="635.0" y="1427.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="638.0" y="1438.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="635.0" y="1411.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="638.0" y="1422.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="635.0" y="1395.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.0" y="1406.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="635.0" y="1379.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.0" y="1390.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="635.0" y="1363.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.0" y="1374.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="635.0" y="1347.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="638.0" y="1358.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="635.0" y="1331.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.0" y="1342.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="635.0" y="1315.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="638.0" y="1326.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="635.0" y="1299.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.0" y="1310.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="635.0" y="1283.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.0" y="1294.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="635.0" y="1267.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.0" y="1278.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="635.0" y="1251.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.0" y="1262.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="635.0" y="1235.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.0" y="1246.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.03%)</title><rect x="635.0" y="1219.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="638.0" y="1230.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (22 samples, 0.56%)</title><rect x="635.3" y="1571.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.3" y="1582.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (22 samples, 0.56%)</title><rect x="635.3" y="1555.0" width="6.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.3" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (22 samples, 0.56%)</title><rect x="635.3" y="1539.0" width="6.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.3" y="1550.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (22 samples, 0.56%)</title><rect x="635.3" y="1523.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.3" y="1534.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (22 samples, 0.56%)</title><rect x="635.3" y="1507.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.3" y="1518.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (22 samples, 0.56%)</title><rect x="635.3" y="1491.0" width="6.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="638.3" y="1502.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (22 samples, 0.56%)</title><rect x="635.3" y="1475.0" width="6.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.3" y="1486.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (22 samples, 0.56%)</title><rect x="635.3" y="1459.0" width="6.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.3" y="1470.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (22 samples, 0.56%)</title><rect x="635.3" y="1443.0" width="6.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="638.3" y="1454.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (22 samples, 0.56%)</title><rect x="635.3" y="1427.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.3" y="1438.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (22 samples, 0.56%)</title><rect x="635.3" y="1411.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.3" y="1422.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (22 samples, 0.56%)</title><rect x="635.3" y="1395.0" width="6.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.3" y="1406.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (22 samples, 0.56%)</title><rect x="635.3" y="1379.0" width="6.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.3" y="1390.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (22 samples, 0.56%)</title><rect x="635.3" y="1363.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.3" y="1374.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (22 samples, 0.56%)</title><rect x="635.3" y="1347.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.3" y="1358.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (22 samples, 0.56%)</title><rect x="635.3" y="1331.0" width="6.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="638.3" y="1342.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (22 samples, 0.56%)</title><rect x="635.3" y="1315.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.3" y="1326.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (21 samples, 0.53%)</title><rect x="635.3" y="1299.0" width="6.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.3" y="1310.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (12 samples, 0.31%)</title><rect x="635.3" y="1283.0" width="3.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.3" y="1294.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (12 samples, 0.31%)</title><rect x="635.3" y="1267.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.3" y="1278.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (12 samples, 0.31%)</title><rect x="635.3" y="1251.0" width="3.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.3" y="1262.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (12 samples, 0.31%)</title><rect x="635.3" y="1235.0" width="3.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.3" y="1246.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (12 samples, 0.31%)</title><rect x="635.3" y="1219.0" width="3.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.3" y="1230.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (12 samples, 0.31%)</title><rect x="635.3" y="1203.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.3" y="1214.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (12 samples, 0.31%)</title><rect x="635.3" y="1187.0" width="3.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.3" y="1198.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (12 samples, 0.31%)</title><rect x="635.3" y="1171.0" width="3.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.3" y="1182.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (12 samples, 0.31%)</title><rect x="635.3" y="1155.0" width="3.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="638.3" y="1166.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (12 samples, 0.31%)</title><rect x="635.3" y="1139.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.3" y="1150.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (11 samples, 0.28%)</title><rect x="635.3" y="1123.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.3" y="1134.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (11 samples, 0.28%)</title><rect x="635.3" y="1107.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.3" y="1118.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (1 samples, 0.03%)</title><rect x="635.3" y="1091.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.3" y="1102.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="635.3" y="1075.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="638.3" y="1086.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="635.3" y="1059.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="638.3" y="1070.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadResolve (1 samples, 0.03%)</title><rect x="635.3" y="1043.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.3" y="1054.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="635.3" y="1027.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="638.3" y="1038.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="635.3" y="1011.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="638.3" y="1022.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor13.invoke (1 samples, 0.03%)</title><rect x="635.3" y="995.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="638.3" y="1006.0"></text>
</g>
<g>
<title>java/lang/invoke/SerializedLambda.readResolve (1 samples, 0.03%)</title><rect x="635.3" y="979.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.3" y="990.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="635.3" y="963.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.3" y="974.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="635.3" y="947.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.3" y="958.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor30.invoke (1 samples, 0.03%)</title><rect x="635.3" y="931.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.3" y="942.0"></text>
</g>
<g>
<title>org/apache/spark/sql/catalyst/CatalystTypeConverters$.$deserializeLambda$ (1 samples, 0.03%)</title><rect x="635.3" y="915.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.3" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="635.3" y="899.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="638.3" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x00000008018bc800.invoke (1 samples, 0.03%)</title><rect x="635.3" y="883.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.3" y="894.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeSpecial (1 samples, 0.03%)</title><rect x="635.3" y="867.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.3" y="878.0"></text>
</g>
<g>
<title>scala/runtime/LambdaDeserialize.deserializeLambda (1 samples, 0.03%)</title><rect x="635.3" y="851.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.3" y="862.0"></text>
</g>
<g>
<title>scala/runtime/LambdaDeserializer$.deserializeLambda (1 samples, 0.03%)</title><rect x="635.3" y="835.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.3" y="846.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.invokeWithArguments (1 samples, 0.03%)</title><rect x="635.3" y="819.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.3" y="830.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.spreadInvoker (1 samples, 0.03%)</title><rect x="635.3" y="803.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="638.3" y="814.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.asSpreader (1 samples, 0.03%)</title><rect x="635.3" y="787.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.3" y="798.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.asSpreader (1 samples, 0.03%)</title><rect x="635.3" y="771.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.3" y="782.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.asSpreaderChecks (1 samples, 0.03%)</title><rect x="635.3" y="755.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.3" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandle.type (1 samples, 0.03%)</title><rect x="635.3" y="739.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="638.3" y="750.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="635.3" y="723.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="638.3" y="734.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="635.3" y="707.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="638.3" y="718.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="635.3" y="691.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="638.3" y="702.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="635.3" y="675.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="638.3" y="686.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="635.3" y="659.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="638.3" y="670.0"></text>
</g>
<g>
<title>OopMapSet::update_register_map(frame const*, RegisterMap*) (1 samples, 0.03%)</title><rect x="635.3" y="643.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="638.3" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (10 samples, 0.25%)</title><rect x="635.6" y="1091.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.6" y="1102.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (10 samples, 0.25%)</title><rect x="635.6" y="1075.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="638.6" y="1086.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (10 samples, 0.25%)</title><rect x="635.6" y="1059.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="638.6" y="1070.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (10 samples, 0.25%)</title><rect x="635.6" y="1043.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.6" y="1054.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (10 samples, 0.25%)</title><rect x="635.6" y="1027.0" width="3.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.6" y="1038.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (9 samples, 0.23%)</title><rect x="635.6" y="1011.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.6" y="1022.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (9 samples, 0.23%)</title><rect x="635.6" y="995.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.6" y="1006.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (9 samples, 0.23%)</title><rect x="635.6" y="979.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="638.6" y="990.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (8 samples, 0.20%)</title><rect x="635.6" y="963.0" width="2.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="638.6" y="974.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (8 samples, 0.20%)</title><rect x="635.6" y="947.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="638.6" y="958.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (7 samples, 0.18%)</title><rect x="635.6" y="931.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="638.6" y="942.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (7 samples, 0.18%)</title><rect x="635.6" y="915.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.6" y="926.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (7 samples, 0.18%)</title><rect x="635.6" y="899.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.6" y="910.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (7 samples, 0.18%)</title><rect x="635.6" y="883.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.6" y="894.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (6 samples, 0.15%)</title><rect x="635.6" y="867.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.6" y="878.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (6 samples, 0.15%)</title><rect x="635.6" y="851.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.6" y="862.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (6 samples, 0.15%)</title><rect x="635.6" y="835.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.6" y="846.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (6 samples, 0.15%)</title><rect x="635.6" y="819.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.6" y="830.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (6 samples, 0.15%)</title><rect x="635.6" y="803.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.6" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (6 samples, 0.15%)</title><rect x="635.6" y="787.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.6" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (6 samples, 0.15%)</title><rect x="635.6" y="771.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="638.6" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (6 samples, 0.15%)</title><rect x="635.6" y="755.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.6" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (6 samples, 0.15%)</title><rect x="635.6" y="739.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.6" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (6 samples, 0.15%)</title><rect x="635.6" y="723.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.6" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (6 samples, 0.15%)</title><rect x="635.6" y="707.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="638.6" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (6 samples, 0.15%)</title><rect x="635.6" y="691.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.6" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (6 samples, 0.15%)</title><rect x="635.6" y="675.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.6" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (6 samples, 0.15%)</title><rect x="635.6" y="659.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.6" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (5 samples, 0.13%)</title><rect x="635.6" y="643.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.6" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (5 samples, 0.13%)</title><rect x="635.6" y="627.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.6" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (5 samples, 0.13%)</title><rect x="635.6" y="611.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="638.6" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (5 samples, 0.13%)</title><rect x="635.6" y="595.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.6" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (2 samples, 0.05%)</title><rect x="635.6" y="579.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="638.6" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (2 samples, 0.05%)</title><rect x="635.6" y="563.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="638.6" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (2 samples, 0.05%)</title><rect x="635.6" y="547.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.6" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (2 samples, 0.05%)</title><rect x="635.6" y="531.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="638.6" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (2 samples, 0.05%)</title><rect x="635.6" y="515.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.6" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="635.6" y="499.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.6" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="635.6" y="483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.6" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="635.6" y="467.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="638.6" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="635.6" y="451.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="638.6" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (1 samples, 0.03%)</title><rect x="635.6" y="435.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="638.6" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.03%)</title><rect x="635.6" y="419.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="638.6" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putIfAbsent (1 samples, 0.03%)</title><rect x="635.6" y="403.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="638.6" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadResolve (1 samples, 0.03%)</title><rect x="635.9" y="499.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="638.9" y="510.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="635.9" y="483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.9" y="494.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="635.9" y="467.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="638.9" y="478.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor13.invoke (1 samples, 0.03%)</title><rect x="635.9" y="451.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.9" y="462.0"></text>
</g>
<g>
<title>java/lang/invoke/SerializedLambda.readResolve (1 samples, 0.03%)</title><rect x="635.9" y="435.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="638.9" y="446.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="635.9" y="419.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="638.9" y="430.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="635.9" y="403.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="638.9" y="414.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor62.invoke (1 samples, 0.03%)</title><rect x="635.9" y="387.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="638.9" y="398.0"></text>
</g>
<g>
<title>org/apache/spark/ml/feature/OneHotEncoderModel.$deserializeLambda$ (1 samples, 0.03%)</title><rect x="635.9" y="371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="638.9" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="635.9" y="355.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="638.9" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x00000008018bc800.invoke (1 samples, 0.03%)</title><rect x="635.9" y="339.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="638.9" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeSpecial (1 samples, 0.03%)</title><rect x="635.9" y="323.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="638.9" y="334.0"></text>
</g>
<g>
<title>scala/runtime/LambdaDeserialize.deserializeLambda (1 samples, 0.03%)</title><rect x="635.9" y="307.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="638.9" y="318.0"></text>
</g>
<g>
<title>scala/runtime/LambdaDeserializer$.deserializeLambda (1 samples, 0.03%)</title><rect x="635.9" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="638.9" y="302.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="635.9" y="275.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="638.9" y="286.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.loadClass (1 samples, 0.03%)</title><rect x="635.9" y="259.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="638.9" y="270.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findLoadedClass (1 samples, 0.03%)</title><rect x="635.9" y="243.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="638.9" y="254.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.findLoadedClass0 (1 samples, 0.03%)</title><rect x="635.9" y="227.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="638.9" y="238.0"></text>
</g>
<g>
<title>/home/lewurm/jdk/build/linux-x86_64-server-release/images/jdk/lib/libjava.so (1 samples, 0.03%)</title><rect x="635.9" y="211.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="638.9" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (3 samples, 0.08%)</title><rect x="636.2" y="579.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.2" y="590.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (3 samples, 0.08%)</title><rect x="636.2" y="563.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="639.2" y="574.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (3 samples, 0.08%)</title><rect x="636.2" y="547.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="639.2" y="558.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (3 samples, 0.08%)</title><rect x="636.2" y="531.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="639.2" y="542.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (3 samples, 0.08%)</title><rect x="636.2" y="515.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="639.2" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.08%)</title><rect x="636.2" y="499.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="639.2" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (3 samples, 0.08%)</title><rect x="636.2" y="483.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="639.2" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.08%)</title><rect x="636.2" y="467.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="639.2" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (3 samples, 0.08%)</title><rect x="636.2" y="451.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="639.2" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (3 samples, 0.08%)</title><rect x="636.2" y="435.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="639.2" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (3 samples, 0.08%)</title><rect x="636.2" y="419.0" width="0.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="639.2" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.08%)</title><rect x="636.2" y="403.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.2" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (3 samples, 0.08%)</title><rect x="636.2" y="387.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="639.2" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (3 samples, 0.08%)</title><rect x="636.2" y="371.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.2" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (3 samples, 0.08%)</title><rect x="636.2" y="355.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="639.2" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.08%)</title><rect x="636.2" y="339.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="639.2" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (3 samples, 0.08%)</title><rect x="636.2" y="323.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="639.2" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="636.2" y="307.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="639.2" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="636.2" y="291.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="639.2" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (1 samples, 0.03%)</title><rect x="636.2" y="275.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="639.2" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.classNamesEqual (1 samples, 0.03%)</title><rect x="636.2" y="259.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="639.2" y="270.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.03%)</title><rect x="636.2" y="243.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="639.2" y="254.0"></text>
</g>
<g>
<title>java/lang/String.length (1 samples, 0.03%)</title><rect x="636.2" y="227.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="639.2" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="636.5" y="307.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="639.5" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (1 samples, 0.03%)</title><rect x="636.5" y="291.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="639.5" y="302.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="636.5" y="275.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="639.5" y="286.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="636.5" y="259.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="639.5" y="270.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (1 samples, 0.03%)</title><rect x="636.5" y="243.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="639.5" y="254.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (1 samples, 0.03%)</title><rect x="636.5" y="227.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="639.5" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.03%)</title><rect x="636.5" y="211.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="639.5" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.03%)</title><rect x="636.5" y="195.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="639.5" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="636.5" y="179.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="639.5" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="636.5" y="163.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="639.5" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="636.5" y="147.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="639.5" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="636.5" y="131.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="639.5" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="636.5" y="115.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.5" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="636.5" y="99.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="639.5" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="636.5" y="83.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="639.5" y="94.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="636.5" y="67.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="639.5" y="78.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="636.5" y="51.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="639.5" y="62.0"></text>
</g>
<g>
<title>frame::is_interpreted_frame() const (1 samples, 0.03%)</title><rect x="636.5" y="35.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="639.5" y="46.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="636.8" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="639.8" y="318.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="636.8" y="291.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="639.8" y="302.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="636.8" y="275.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="639.8" y="286.0"></text>
</g>
<g>
<title>CompiledMethod::is_compiled() const (1 samples, 0.03%)</title><rect x="636.8" y="259.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="639.8" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout (1 samples, 0.03%)</title><rect x="637.1" y="643.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="640.1" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout0 (1 samples, 0.03%)</title><rect x="637.1" y="627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="640.1" y="638.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="637.1" y="611.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="640.1" y="622.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="637.1" y="595.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="640.1" y="606.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="637.1" y="579.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="640.1" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (1 samples, 0.03%)</title><rect x="637.4" y="867.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="640.4" y="878.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="637.4" y="851.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.4" y="862.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="637.4" y="835.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="640.4" y="846.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="637.4" y="819.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="640.4" y="830.0"></text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (1 samples, 0.03%)</title><rect x="637.4" y="803.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.4" y="814.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashMap.readObject (1 samples, 0.03%)</title><rect x="637.4" y="787.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="640.4" y="798.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashMap.init (1 samples, 0.03%)</title><rect x="637.4" y="771.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.4" y="782.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.init$ (1 samples, 0.03%)</title><rect x="637.4" y="755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.4" y="766.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.init (1 samples, 0.03%)</title><rect x="637.4" y="739.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="640.4" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readInt (1 samples, 0.03%)</title><rect x="637.4" y="723.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="640.4" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readInt (1 samples, 0.03%)</title><rect x="637.4" y="707.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="640.4" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (1 samples, 0.03%)</title><rect x="637.7" y="931.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.7" y="942.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="637.7" y="915.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.7" y="926.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="637.7" y="899.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="640.7" y="910.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor12.invoke (1 samples, 0.03%)</title><rect x="637.7" y="883.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.7" y="894.0"></text>
</g>
<g>
<title>org/apache/spark/util/AccumulatorV2.readObject (1 samples, 0.03%)</title><rect x="637.7" y="867.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="640.7" y="878.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryOrIOException (1 samples, 0.03%)</title><rect x="637.7" y="851.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="640.7" y="862.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcV$sp.apply (1 samples, 0.03%)</title><rect x="637.7" y="835.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.7" y="846.0"></text>
</g>
<g>
<title>org/apache/spark/util/AccumulatorV2$$Lambda$2060.0x0000000802223268.apply$mcV$sp (1 samples, 0.03%)</title><rect x="637.7" y="819.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="640.7" y="830.0"></text>
</g>
<g>
<title>org/apache/spark/util/AccumulatorV2.$anonfun$readObject$1 (1 samples, 0.03%)</title><rect x="637.7" y="803.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="640.7" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.defaultReadObject (1 samples, 0.03%)</title><rect x="637.7" y="787.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="640.7" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="637.7" y="771.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="640.7" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="637.7" y="755.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="640.7" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="637.7" y="739.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="640.7" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="637.7" y="723.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="640.7" y="734.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="637.7" y="707.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="640.7" y="718.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="637.7" y="691.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="640.7" y="702.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (1 samples, 0.03%)</title><rect x="637.7" y="675.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="640.7" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readString (1 samples, 0.03%)</title><rect x="638.0" y="963.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="641.0" y="974.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTF (1 samples, 0.03%)</title><rect x="638.0" y="947.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="641.0" y="958.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFBody (1 samples, 0.03%)</title><rect x="638.0" y="931.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.0" y="942.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readUTFSpan (1 samples, 0.03%)</title><rect x="638.0" y="915.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="641.0" y="926.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="638.3" y="1011.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="641.3" y="1022.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="638.3" y="995.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="641.3" y="1006.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="638.3" y="979.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="641.3" y="990.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (1 samples, 0.03%)</title><rect x="638.3" y="963.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="641.3" y="974.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="638.6" y="1123.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="641.6" y="1134.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="638.6" y="1107.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="641.6" y="1118.0"></text>
</g>
<g>
<title>java/security/ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege (1 samples, 0.03%)</title><rect x="638.6" y="1091.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="641.6" y="1102.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="638.6" y="1075.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="641.6" y="1086.0"></text>
</g>
<g>
<title>java/security/AccessController.checkContext (1 samples, 0.03%)</title><rect x="638.6" y="1059.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.6" y="1070.0"></text>
</g>
<g>
<title>java/security/AccessController.getProtectionDomain (1 samples, 0.03%)</title><rect x="638.6" y="1043.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="641.6" y="1054.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (9 samples, 0.23%)</title><rect x="638.9" y="1283.0" width="2.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="641.9" y="1294.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (9 samples, 0.23%)</title><rect x="638.9" y="1267.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="641.9" y="1278.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (9 samples, 0.23%)</title><rect x="638.9" y="1251.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="641.9" y="1262.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (9 samples, 0.23%)</title><rect x="638.9" y="1235.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.9" y="1246.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (9 samples, 0.23%)</title><rect x="638.9" y="1219.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="641.9" y="1230.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (9 samples, 0.23%)</title><rect x="638.9" y="1203.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="641.9" y="1214.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (9 samples, 0.23%)</title><rect x="638.9" y="1187.0" width="2.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="641.9" y="1198.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (9 samples, 0.23%)</title><rect x="638.9" y="1171.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.9" y="1182.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (9 samples, 0.23%)</title><rect x="638.9" y="1155.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="641.9" y="1166.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (9 samples, 0.23%)</title><rect x="638.9" y="1139.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="641.9" y="1150.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (9 samples, 0.23%)</title><rect x="638.9" y="1123.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="641.9" y="1134.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (9 samples, 0.23%)</title><rect x="638.9" y="1107.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.9" y="1118.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (9 samples, 0.23%)</title><rect x="638.9" y="1091.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.9" y="1102.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (9 samples, 0.23%)</title><rect x="638.9" y="1075.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="641.9" y="1086.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (9 samples, 0.23%)</title><rect x="638.9" y="1059.0" width="2.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="641.9" y="1070.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (9 samples, 0.23%)</title><rect x="638.9" y="1043.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="641.9" y="1054.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (9 samples, 0.23%)</title><rect x="638.9" y="1027.0" width="2.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.9" y="1038.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (8 samples, 0.20%)</title><rect x="638.9" y="1011.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="641.9" y="1022.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (8 samples, 0.20%)</title><rect x="638.9" y="995.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="641.9" y="1006.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (8 samples, 0.20%)</title><rect x="638.9" y="979.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="641.9" y="990.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (8 samples, 0.20%)</title><rect x="638.9" y="963.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="641.9" y="974.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (8 samples, 0.20%)</title><rect x="638.9" y="947.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="641.9" y="958.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (8 samples, 0.20%)</title><rect x="638.9" y="931.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="641.9" y="942.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (8 samples, 0.20%)</title><rect x="638.9" y="915.0" width="2.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="641.9" y="926.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (8 samples, 0.20%)</title><rect x="638.9" y="899.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="641.9" y="910.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (8 samples, 0.20%)</title><rect x="638.9" y="883.0" width="2.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="641.9" y="894.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (8 samples, 0.20%)</title><rect x="638.9" y="867.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="641.9" y="878.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (8 samples, 0.20%)</title><rect x="638.9" y="851.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="641.9" y="862.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (8 samples, 0.20%)</title><rect x="638.9" y="835.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="641.9" y="846.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (8 samples, 0.20%)</title><rect x="638.9" y="819.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="641.9" y="830.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (8 samples, 0.20%)</title><rect x="638.9" y="803.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="641.9" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="638.9" y="787.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="641.9" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="638.9" y="771.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="641.9" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (1 samples, 0.03%)</title><rect x="638.9" y="755.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="641.9" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getReflector (1 samples, 0.03%)</title><rect x="638.9" y="739.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="641.9" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass$FieldReflectorKey.&lt;init&gt; (1 samples, 0.03%)</title><rect x="638.9" y="723.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="641.9" y="734.0"></text>
</g>
<g>
<title>java/util/Arrays.hashCode (1 samples, 0.03%)</title><rect x="638.9" y="707.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="641.9" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.03%)</title><rect x="638.9" y="691.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="641.9" y="702.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.03%)</title><rect x="638.9" y="675.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="641.9" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (7 samples, 0.18%)</title><rect x="639.2" y="787.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="642.2" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (7 samples, 0.18%)</title><rect x="639.2" y="771.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="642.2" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (7 samples, 0.18%)</title><rect x="639.2" y="755.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="642.2" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (7 samples, 0.18%)</title><rect x="639.2" y="739.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.2" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (7 samples, 0.18%)</title><rect x="639.2" y="723.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="642.2" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (6 samples, 0.15%)</title><rect x="639.2" y="707.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.2" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (6 samples, 0.15%)</title><rect x="639.2" y="691.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.2" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (6 samples, 0.15%)</title><rect x="639.2" y="675.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="642.2" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (5 samples, 0.13%)</title><rect x="639.2" y="659.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="642.2" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (4 samples, 0.10%)</title><rect x="639.2" y="643.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="642.2" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (4 samples, 0.10%)</title><rect x="639.2" y="627.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="642.2" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (4 samples, 0.10%)</title><rect x="639.2" y="611.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="642.2" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (4 samples, 0.10%)</title><rect x="639.2" y="595.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="642.2" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (4 samples, 0.10%)</title><rect x="639.2" y="579.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="642.2" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (3 samples, 0.08%)</title><rect x="639.2" y="563.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="642.2" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (3 samples, 0.08%)</title><rect x="639.2" y="547.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="642.2" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.08%)</title><rect x="639.2" y="531.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.2" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (3 samples, 0.08%)</title><rect x="639.2" y="515.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="642.2" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.08%)</title><rect x="639.2" y="499.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="642.2" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (3 samples, 0.08%)</title><rect x="639.2" y="483.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="642.2" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (3 samples, 0.08%)</title><rect x="639.2" y="467.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.2" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (3 samples, 0.08%)</title><rect x="639.2" y="451.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.2" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (3 samples, 0.08%)</title><rect x="639.2" y="435.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="642.2" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (3 samples, 0.08%)</title><rect x="639.2" y="419.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="642.2" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (2 samples, 0.05%)</title><rect x="639.2" y="403.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="642.2" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (2 samples, 0.05%)</title><rect x="639.2" y="387.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="642.2" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (2 samples, 0.05%)</title><rect x="639.2" y="371.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="642.2" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (2 samples, 0.05%)</title><rect x="639.2" y="355.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="642.2" y="366.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="639.2" y="339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="642.2" y="350.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="639.2" y="323.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="642.2" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="639.2" y="307.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="642.2" y="318.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (1 samples, 0.03%)</title><rect x="639.2" y="291.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="642.2" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="639.2" y="275.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="642.2" y="286.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="639.2" y="259.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="642.2" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="639.2" y="243.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.2" y="254.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="639.2" y="227.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="642.2" y="238.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="639.2" y="211.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="642.2" y="222.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (1 samples, 0.03%)</title><rect x="639.2" y="195.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="642.2" y="206.0"></text>
</g>
<g>
<title>JNIHandleBlock::allocate_handle(oopDesc*, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="639.2" y="179.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="642.2" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="639.5" y="339.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="642.5" y="350.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="639.5" y="323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="642.5" y="334.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="639.5" y="307.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="642.5" y="318.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (1 samples, 0.03%)</title><rect x="639.5" y="291.0" width="0.3" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="642.5" y="302.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="639.5" y="275.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="642.5" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="639.5" y="259.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="642.5" y="270.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="639.8" y="403.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="642.8" y="414.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="639.8" y="387.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="642.8" y="398.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="639.8" y="371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="642.8" y="382.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (1 samples, 0.03%)</title><rect x="639.8" y="355.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="642.8" y="366.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="639.8" y="339.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="642.8" y="350.0"></text>
</g>
<g>
<title>StackWatermarkSet::on_iteration(JavaThread*, frame const&amp;) (1 samples, 0.03%)</title><rect x="639.8" y="323.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="642.8" y="334.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="640.1" y="563.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.1" y="574.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="640.1" y="547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.1" y="558.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="640.1" y="531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.1" y="542.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (1 samples, 0.03%)</title><rect x="640.1" y="515.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="643.1" y="526.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (1 samples, 0.03%)</title><rect x="640.1" y="499.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="643.1" y="510.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (1 samples, 0.03%)</title><rect x="640.1" y="483.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="643.1" y="494.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.03%)</title><rect x="640.1" y="467.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="643.1" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (1 samples, 0.03%)</title><rect x="640.4" y="643.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="643.4" y="654.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="640.4" y="627.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="643.4" y="638.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="640.4" y="611.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="643.4" y="622.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (1 samples, 0.03%)</title><rect x="640.4" y="595.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="643.4" y="606.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (1 samples, 0.03%)</title><rect x="640.4" y="579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="643.4" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.03%)</title><rect x="640.4" y="563.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="643.4" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.03%)</title><rect x="640.4" y="547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="643.4" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="640.4" y="531.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="643.4" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="640.4" y="515.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="643.4" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="640.4" y="499.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="643.4" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="640.4" y="483.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="643.4" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="640.4" y="467.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="643.4" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="640.4" y="451.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="643.4" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="640.4" y="435.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="643.4" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="640.4" y="419.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="643.4" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDescriptor (1 samples, 0.03%)</title><rect x="640.4" y="403.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="643.4" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.readNonProxy (1 samples, 0.03%)</title><rect x="640.4" y="387.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="643.4" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectStreamField.&lt;init&gt; (1 samples, 0.03%)</title><rect x="640.4" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="643.4" y="382.0"></text>
</g>
<g>
<title>java/lang/String.intern (1 samples, 0.03%)</title><rect x="640.4" y="355.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="643.4" y="366.0"></text>
</g>
<g>
<title>JVM_InternString (1 samples, 0.03%)</title><rect x="640.4" y="339.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="643.4" y="350.0"></text>
</g>
<g>
<title>StringTable::intern(oopDesc*, Thread*) (1 samples, 0.03%)</title><rect x="640.4" y="323.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="643.4" y="334.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short const*, int, Thread*) (1 samples, 0.03%)</title><rect x="640.4" y="307.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="643.4" y="318.0"></text>
</g>
<g>
<title>StringTable::do_lookup(unsigned short const*, int, unsigned long) (1 samples, 0.03%)</title><rect x="640.4" y="291.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="643.4" y="302.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="640.7" y="659.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="643.7" y="670.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedSerializationConstructorAccessor44.newInstance (1 samples, 0.03%)</title><rect x="640.7" y="643.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="643.7" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (1 samples, 0.03%)</title><rect x="641.0" y="707.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.0" y="718.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="641.0" y="691.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="644.0" y="702.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="641.0" y="675.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="644.0" y="686.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor19.invoke (1 samples, 0.03%)</title><rect x="641.0" y="659.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.0" y="670.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.readObject (1 samples, 0.03%)</title><rect x="641.0" y="643.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="644.0" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.03%)</title><rect x="641.0" y="627.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="644.0" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.03%)</title><rect x="641.0" y="611.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="644.0" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="641.0" y="595.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="644.0" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="641.0" y="579.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.0" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$HandleTable.finish (1 samples, 0.03%)</title><rect x="641.0" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="644.0" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadResolve (1 samples, 0.03%)</title><rect x="641.3" y="1011.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="644.3" y="1022.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="641.3" y="995.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="644.3" y="1006.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="641.3" y="979.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.3" y="990.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor13.invoke (1 samples, 0.03%)</title><rect x="641.3" y="963.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.3" y="974.0"></text>
</g>
<g>
<title>java/lang/invoke/SerializedLambda.readResolve (1 samples, 0.03%)</title><rect x="641.3" y="947.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="644.3" y="958.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="641.3" y="931.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="644.3" y="942.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.03%)</title><rect x="641.3" y="915.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.3" y="926.0"></text>
</g>
<g>
<title>java/lang/invoke/SerializedLambda$1.run (1 samples, 0.03%)</title><rect x="641.3" y="899.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="644.3" y="910.0"></text>
</g>
<g>
<title>java/lang/invoke/SerializedLambda$1.run (1 samples, 0.03%)</title><rect x="641.3" y="883.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="644.3" y="894.0"></text>
</g>
<g>
<title>java/lang/Class.getDeclaredMethod (1 samples, 0.03%)</title><rect x="641.3" y="867.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="644.3" y="878.0"></text>
</g>
<g>
<title>java/lang/Class.methodToString (1 samples, 0.03%)</title><rect x="641.3" y="851.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="644.3" y="862.0"></text>
</g>
<g>
<title>java/util/Arrays.stream (1 samples, 0.03%)</title><rect x="641.3" y="835.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.3" y="846.0"></text>
</g>
<g>
<title>java/util/Arrays.stream (1 samples, 0.03%)</title><rect x="641.3" y="819.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="644.3" y="830.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (1 samples, 0.03%)</title><rect x="641.3" y="803.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.3" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="641.6" y="1299.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="644.6" y="1310.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="641.6" y="1283.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="644.6" y="1294.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="641.6" y="1267.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="644.6" y="1278.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (1 samples, 0.03%)</title><rect x="641.6" y="1251.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="644.6" y="1262.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadResolve (1 samples, 0.03%)</title><rect x="641.9" y="1587.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.9" y="1598.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="641.9" y="1571.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="644.9" y="1582.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="641.9" y="1555.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="644.9" y="1566.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor13.invoke (1 samples, 0.03%)</title><rect x="641.9" y="1539.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.9" y="1550.0"></text>
</g>
<g>
<title>java/lang/invoke/SerializedLambda.readResolve (1 samples, 0.03%)</title><rect x="641.9" y="1523.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.9" y="1534.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="641.9" y="1507.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="644.9" y="1518.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="641.9" y="1491.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="644.9" y="1502.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor21.invoke (1 samples, 0.03%)</title><rect x="641.9" y="1475.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="644.9" y="1486.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$deserializeLambda$ (1 samples, 0.03%)</title><rect x="641.9" y="1459.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="644.9" y="1470.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="641.9" y="1443.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="644.9" y="1454.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x00000008018bc800.invoke (1 samples, 0.03%)</title><rect x="641.9" y="1427.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="644.9" y="1438.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeSpecial (1 samples, 0.03%)</title><rect x="641.9" y="1411.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="644.9" y="1422.0"></text>
</g>
<g>
<title>scala/runtime/LambdaDeserialize.deserializeLambda (1 samples, 0.03%)</title><rect x="641.9" y="1395.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="644.9" y="1406.0"></text>
</g>
<g>
<title>scala/runtime/LambdaDeserializer$.deserializeLambda (1 samples, 0.03%)</title><rect x="641.9" y="1379.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="644.9" y="1390.0"></text>
</g>
<g>
<title>scala/runtime/LambdaDeserializer$.slashDot$1 (1 samples, 0.03%)</title><rect x="641.9" y="1363.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="644.9" y="1374.0"></text>
</g>
<g>
<title>java/lang/String.replaceAll (1 samples, 0.03%)</title><rect x="641.9" y="1347.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="644.9" y="1358.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.compile (1 samples, 0.03%)</title><rect x="641.9" y="1331.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="644.9" y="1342.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.&lt;init&gt; (1 samples, 0.03%)</title><rect x="641.9" y="1315.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="644.9" y="1326.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.compile (1 samples, 0.03%)</title><rect x="641.9" y="1299.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="644.9" y="1310.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.expr (1 samples, 0.03%)</title><rect x="641.9" y="1283.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="644.9" y="1294.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.sequence (1 samples, 0.03%)</title><rect x="641.9" y="1267.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="644.9" y="1278.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.atom (1 samples, 0.03%)</title><rect x="641.9" y="1251.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="644.9" y="1262.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout (1 samples, 0.03%)</title><rect x="642.2" y="1923.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="645.2" y="1934.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.getClassDataLayout0 (1 samples, 0.03%)</title><rect x="642.2" y="1907.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="645.2" y="1918.0"></text>
</g>
<g>
<title>java/util/HashSet.contains (1 samples, 0.03%)</title><rect x="642.2" y="1891.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="645.2" y="1902.0"></text>
</g>
<g>
<title>java/util/HashMap.containsKey (1 samples, 0.03%)</title><rect x="642.2" y="1875.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="645.2" y="1886.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="642.2" y="1859.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="645.2" y="1870.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="642.5" y="3027.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="645.5" y="3038.0"></text>
</g>
<g>
<title>java/security/ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege (1 samples, 0.03%)</title><rect x="642.5" y="3011.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="645.5" y="3022.0"></text>
</g>
<g>
<title>java/security/ProtectionDomain$JavaSecurityAccessImpl.getCombinedACC (1 samples, 0.03%)</title><rect x="642.5" y="2995.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.5" y="3006.0"></text>
</g>
<g>
<title>java/security/AccessControlContext.optimize (1 samples, 0.03%)</title><rect x="642.5" y="2979.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.5" y="2990.0"></text>
</g>
<g>
<title>java/security/AccessControlContext.calculateFields (1 samples, 0.03%)</title><rect x="642.5" y="2963.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="645.5" y="2974.0"></text>
</g>
<g>
<title>java/security/AccessControlContext.combine (1 samples, 0.03%)</title><rect x="642.5" y="2947.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="645.5" y="2958.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/Task.metrics (4 samples, 0.10%)</title><rect x="642.8" y="3555.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.8" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/Task.metrics$lzycompute (4 samples, 0.10%)</title><rect x="642.8" y="3539.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.8" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.deserialize (4 samples, 0.10%)</title><rect x="642.8" y="3523.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.8" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaDeserializationStream.readObject (4 samples, 0.10%)</title><rect x="642.8" y="3507.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="645.8" y="3518.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (4 samples, 0.10%)</title><rect x="642.8" y="3491.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="645.8" y="3502.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (4 samples, 0.10%)</title><rect x="642.8" y="3475.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="645.8" y="3486.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (4 samples, 0.10%)</title><rect x="642.8" y="3459.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="645.8" y="3470.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (4 samples, 0.10%)</title><rect x="642.8" y="3443.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="645.8" y="3454.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (4 samples, 0.10%)</title><rect x="642.8" y="3427.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="645.8" y="3438.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (4 samples, 0.10%)</title><rect x="642.8" y="3411.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="645.8" y="3422.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (4 samples, 0.10%)</title><rect x="642.8" y="3395.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="645.8" y="3406.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (4 samples, 0.10%)</title><rect x="642.8" y="3379.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="645.8" y="3390.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (3 samples, 0.08%)</title><rect x="642.8" y="3363.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="645.8" y="3374.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (2 samples, 0.05%)</title><rect x="642.8" y="3347.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="645.8" y="3358.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (2 samples, 0.05%)</title><rect x="642.8" y="3331.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="645.8" y="3342.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (2 samples, 0.05%)</title><rect x="642.8" y="3315.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="645.8" y="3326.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadResolve (1 samples, 0.03%)</title><rect x="642.8" y="3299.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="645.8" y="3310.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="642.8" y="3283.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.8" y="3294.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="642.8" y="3267.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="645.8" y="3278.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor43.invoke (1 samples, 0.03%)</title><rect x="642.8" y="3251.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="645.8" y="3262.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedList.readResolve (1 samples, 0.03%)</title><rect x="642.8" y="3235.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.8" y="3246.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedRandomAccessList.&lt;init&gt; (1 samples, 0.03%)</title><rect x="642.8" y="3219.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="645.8" y="3230.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedList.&lt;init&gt; (1 samples, 0.03%)</title><rect x="642.8" y="3203.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="645.8" y="3214.0"></text>
</g>
<g>
<title>java/util/Collections$SynchronizedCollection.&lt;init&gt; (1 samples, 0.03%)</title><rect x="642.8" y="3187.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="645.8" y="3198.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="643.1" y="3299.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="646.1" y="3310.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.03%)</title><rect x="643.1" y="3283.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="646.1" y="3294.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstanceWithCaller (1 samples, 0.03%)</title><rect x="643.1" y="3267.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.1" y="3278.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedSerializationConstructorAccessor134.newInstance (1 samples, 0.03%)</title><rect x="643.1" y="3251.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="646.1" y="3262.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (1 samples, 0.03%)</title><rect x="643.4" y="3347.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="646.4" y="3358.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="643.4" y="3331.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="646.4" y="3342.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="643.4" y="3315.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.4" y="3326.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor12.invoke (1 samples, 0.03%)</title><rect x="643.4" y="3299.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="646.4" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/util/AccumulatorV2.readObject (1 samples, 0.03%)</title><rect x="643.4" y="3283.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="646.4" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryOrIOException (1 samples, 0.03%)</title><rect x="643.4" y="3267.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="646.4" y="3278.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcV$sp.apply (1 samples, 0.03%)</title><rect x="643.4" y="3251.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="646.4" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/util/AccumulatorV2$$Lambda$2060.0x0000000802223268.apply$mcV$sp (1 samples, 0.03%)</title><rect x="643.4" y="3235.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="646.4" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/util/AccumulatorV2.$anonfun$readObject$1 (1 samples, 0.03%)</title><rect x="643.4" y="3219.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="646.4" y="3230.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.defaultReadObject (1 samples, 0.03%)</title><rect x="643.4" y="3203.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="646.4" y="3214.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (1 samples, 0.03%)</title><rect x="643.4" y="3187.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="646.4" y="3198.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="643.4" y="3171.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="646.4" y="3182.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="643.4" y="3155.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="646.4" y="3166.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="643.4" y="3139.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="646.4" y="3150.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="643.4" y="3123.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="646.4" y="3134.0"></text>
</g>
<g>
<title>sun/reflect/misc/ReflectUtil.checkPackageAccess (1 samples, 0.03%)</title><rect x="643.4" y="3107.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.4" y="3118.0"></text>
</g>
<g>
<title>sun/reflect/misc/ReflectUtil.privateCheckPackageAccess (1 samples, 0.03%)</title><rect x="643.4" y="3091.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="646.4" y="3102.0"></text>
</g>
<g>
<title>sun/reflect/misc/ReflectUtil.isNonPublicProxyClass (1 samples, 0.03%)</title><rect x="643.4" y="3075.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="646.4" y="3086.0"></text>
</g>
<g>
<title>java/lang/reflect/Proxy.isProxyClass (1 samples, 0.03%)</title><rect x="643.4" y="3059.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="646.4" y="3070.0"></text>
</g>
<g>
<title>java/lang/reflect/Proxy$ProxyBuilder.isProxyClass (1 samples, 0.03%)</title><rect x="643.4" y="3043.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="646.4" y="3054.0"></text>
</g>
<g>
<title>jdk/internal/loader/AbstractClassLoaderValue.get (1 samples, 0.03%)</title><rect x="643.4" y="3027.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="646.4" y="3038.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.get (1 samples, 0.03%)</title><rect x="643.4" y="3011.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="646.4" y="3022.0"></text>
</g>
<g>
<title>jdk/internal/loader/AbstractClassLoaderValue$Sub.equals (1 samples, 0.03%)</title><rect x="643.4" y="2995.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="646.4" y="3006.0"></text>
</g>
<g>
<title>java/util/Objects.equals (1 samples, 0.03%)</title><rect x="643.4" y="2979.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="646.4" y="2990.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="643.7" y="3363.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="646.7" y="3374.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="643.7" y="3347.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="646.7" y="3358.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="643.7" y="3331.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="646.7" y="3342.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (1 samples, 0.03%)</title><rect x="643.7" y="3315.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="646.7" y="3326.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="643.7" y="3299.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="646.7" y="3310.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="643.7" y="3283.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="646.7" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/util/CallerContext.&lt;init&gt; (2 samples, 0.05%)</title><rect x="644.0" y="3555.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="647.0" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/util/CallerContext.prepareContext (1 samples, 0.03%)</title><rect x="644.0" y="3539.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.0" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/util/CallerContext.len$1 (1 samples, 0.03%)</title><rect x="644.0" y="3523.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="647.0" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/util/CallerContext.len$lzycompute$1 (1 samples, 0.03%)</title><rect x="644.0" y="3507.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.0" y="3518.0"></text>
</g>
<g>
<title>org/apache/hadoop/conf/Configuration.getInt (1 samples, 0.03%)</title><rect x="644.0" y="3491.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.0" y="3502.0"></text>
</g>
<g>
<title>org/apache/hadoop/conf/Configuration.getTrimmed (1 samples, 0.03%)</title><rect x="644.0" y="3475.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="647.0" y="3486.0"></text>
</g>
<g>
<title>org/apache/hadoop/conf/Configuration.get (1 samples, 0.03%)</title><rect x="644.0" y="3459.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="647.0" y="3470.0"></text>
</g>
<g>
<title>org/apache/hadoop/conf/Configuration.handleDeprecation (1 samples, 0.03%)</title><rect x="644.0" y="3443.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.0" y="3454.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="644.0" y="3427.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.0" y="3438.0"></text>
</g>
<g>
<title>scala/Option.map (1 samples, 0.03%)</title><rect x="644.3" y="3539.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.3" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/util/CallerContext$$Lambda$2065.0x00000008022286a0.apply (1 samples, 0.03%)</title><rect x="644.3" y="3523.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="647.3" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/util/CallerContext.$anonfun$context$5$adapted (1 samples, 0.03%)</title><rect x="644.3" y="3507.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="647.3" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/util/CallerContext.$anonfun$context$5 (1 samples, 0.03%)</title><rect x="644.3" y="3491.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="647.3" y="3502.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="644.3" y="3475.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="647.3" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/executor/Executor$TaskRunner$$Lambda$2059.0x00000008022278f8.apply$mcV$sp (1 samples, 0.03%)</title><rect x="644.6" y="3603.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="647.6" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/executor/Executor$TaskRunner.$anonfun$run$4 (1 samples, 0.03%)</title><rect x="644.6" y="3587.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="647.6" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/memory/TaskMemoryManager.cleanUpAllAllocatedMemory (1 samples, 0.03%)</title><rect x="644.6" y="3571.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.6" y="3582.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="644.6" y="3555.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.6" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="644.9" y="3619.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="647.9" y="3630.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="644.9" y="3603.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="647.9" y="3614.0"></text>
</g>
<g>
<title>scala/Option.map (1 samples, 0.03%)</title><rect x="644.9" y="3587.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="647.9" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer$$Lambda$1769.0x000000080216a790.apply (1 samples, 0.03%)</title><rect x="644.9" y="3571.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="647.9" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer.$anonfun$bufferWriteChunkSize$1$adapted (1 samples, 0.03%)</title><rect x="644.9" y="3555.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="647.9" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer.$anonfun$bufferWriteChunkSize$1 (1 samples, 0.03%)</title><rect x="644.9" y="3539.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="647.9" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/SparkConf.get (1 samples, 0.03%)</title><rect x="644.9" y="3523.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.9" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigEntryWithDefault.readFrom (1 samples, 0.03%)</title><rect x="644.9" y="3507.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="647.9" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigEntry.readString (1 samples, 0.03%)</title><rect x="644.9" y="3491.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="647.9" y="3502.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="644.9" y="3475.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="647.9" y="3486.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="644.9" y="3459.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="647.9" y="3470.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="644.9" y="3443.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="647.9" y="3454.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateInstance (1 samples, 0.03%)</title><rect x="644.9" y="3427.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="647.9" y="3438.0"></text>
</g>
<g>
<title>Unsafe_AllocateInstance (1 samples, 0.03%)</title><rect x="644.9" y="3411.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="647.9" y="3422.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="644.9" y="3395.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="647.9" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskResultGetter$$anon$3.run (60 samples, 1.53%)</title><rect x="645.2" y="3635.0" width="18.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="648.2" y="3646.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.logUncaughtExceptions (60 samples, 1.53%)</title><rect x="645.2" y="3619.0" width="18.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.2" y="3630.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcV$sp.apply (60 samples, 1.53%)</title><rect x="645.2" y="3603.0" width="18.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="648.2" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskResultGetter$$anon$3$$Lambda$2162.0x0000000802273170.apply$mcV$sp (60 samples, 1.53%)</title><rect x="645.2" y="3587.0" width="18.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="648.2" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskResultGetter$$anon$3.$anonfun$run$1 (60 samples, 1.53%)</title><rect x="645.2" y="3571.0" width="18.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.2" y="3582.0"></text>
</g>
<g>
<title>InterpreterRuntime::ldc(JavaThread*, bool) (1 samples, 0.03%)</title><rect x="645.2" y="3555.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="648.2" y="3566.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="645.2" y="3539.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="648.2" y="3550.0"></text>
</g>
<g>
<title>CodeBlob::is_zombie() const (1 samples, 0.03%)</title><rect x="645.2" y="3523.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="648.2" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DirectTaskResult.value (37 samples, 0.94%)</title><rect x="645.5" y="3555.0" width="11.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="648.5" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.deserialize (37 samples, 0.94%)</title><rect x="645.5" y="3539.0" width="11.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="648.5" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaDeserializationStream.readObject (37 samples, 0.94%)</title><rect x="645.5" y="3523.0" width="11.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="648.5" y="3534.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (37 samples, 0.94%)</title><rect x="645.5" y="3507.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="648.5" y="3518.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (37 samples, 0.94%)</title><rect x="645.5" y="3491.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.5" y="3502.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (37 samples, 0.94%)</title><rect x="645.5" y="3475.0" width="11.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="648.5" y="3486.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (37 samples, 0.94%)</title><rect x="645.5" y="3459.0" width="11.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="648.5" y="3470.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (37 samples, 0.94%)</title><rect x="645.5" y="3443.0" width="11.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="648.5" y="3454.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (37 samples, 0.94%)</title><rect x="645.5" y="3427.0" width="11.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="648.5" y="3438.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (37 samples, 0.94%)</title><rect x="645.5" y="3411.0" width="11.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="648.5" y="3422.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (37 samples, 0.94%)</title><rect x="645.5" y="3395.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="648.5" y="3406.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (37 samples, 0.94%)</title><rect x="645.5" y="3379.0" width="11.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="648.5" y="3390.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$FieldValues.&lt;init&gt; (37 samples, 0.94%)</title><rect x="645.5" y="3363.0" width="11.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="648.5" y="3374.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (37 samples, 0.94%)</title><rect x="645.5" y="3347.0" width="11.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="648.5" y="3358.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readArray (37 samples, 0.94%)</title><rect x="645.5" y="3331.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="648.5" y="3342.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readDoubles (23 samples, 0.59%)</title><rect x="645.8" y="3315.0" width="6.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="648.8" y="3326.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$PeekInputStream.readFully (4 samples, 0.10%)</title><rect x="651.5" y="3299.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="654.5" y="3310.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$PeekInputStream.read (4 samples, 0.10%)</title><rect x="651.5" y="3283.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="654.5" y="3294.0"></text>
</g>
<g>
<title>xsbt/api/InputWrapperStream.read (4 samples, 0.10%)</title><rect x="651.5" y="3267.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="654.5" y="3278.0"></text>
</g>
<g>
<title>sbinary/JavaInput.readTo (4 samples, 0.10%)</title><rect x="651.5" y="3251.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="654.5" y="3262.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (4 samples, 0.10%)</title><rect x="651.5" y="3235.0" width="1.2" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="654.5" y="3246.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readFully (3 samples, 0.08%)</title><rect x="652.7" y="3315.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="655.7" y="3326.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.read (3 samples, 0.08%)</title><rect x="652.7" y="3299.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="655.7" y="3310.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readInt (1 samples, 0.03%)</title><rect x="653.6" y="3315.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="656.6" y="3326.0"></text>
</g>
<g>
<title>java/io/Bits.getInt (1 samples, 0.03%)</title><rect x="653.6" y="3299.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="656.6" y="3310.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.forClass (2 samples, 0.05%)</title><rect x="653.9" y="3315.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="656.9" y="3326.0"></text>
</g>
<g>
<title>java/lang/Class.getClassLoader (2 samples, 0.05%)</title><rect x="653.9" y="3299.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="656.9" y="3310.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.checkClassLoaderPermission (1 samples, 0.03%)</title><rect x="654.2" y="3283.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="657.2" y="3294.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.needsClassLoaderPermissionCheck (1 samples, 0.03%)</title><rect x="654.2" y="3267.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="657.2" y="3278.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newInstance (7 samples, 0.18%)</title><rect x="654.5" y="3315.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="657.5" y="3326.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="655.1" y="3299.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="658.1" y="3310.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="655.1" y="3283.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="658.1" y="3294.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="655.1" y="3267.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="658.1" y="3278.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="655.1" y="3251.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="658.1" y="3262.0"></text>
</g>
<g>
<title>java/lang/reflect/Array.newArray (4 samples, 0.10%)</title><rect x="655.4" y="3299.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="658.4" y="3310.0"></text>
</g>
<g>
<title>JVM_NewArray (4 samples, 0.10%)</title><rect x="655.4" y="3283.0" width="1.2" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="658.4" y="3294.0"></text>
</g>
<g>
<title>Reflection::reflect_new_array(oopDesc*, int, Thread*) (4 samples, 0.10%)</title><rect x="655.4" y="3267.0" width="1.2" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="658.4" y="3278.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.10%)</title><rect x="655.4" y="3251.0" width="1.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="658.4" y="3262.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.10%)</title><rect x="655.4" y="3235.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="658.4" y="3246.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.08%)</title><rect x="655.4" y="3219.0" width="0.9" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="658.4" y="3230.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="656.3" y="3219.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="659.3" y="3230.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (1 samples, 0.03%)</title><rect x="656.3" y="3203.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="659.3" y="3214.0"></text>
</g>
<g>
<title>HeapRegionManager::allocate_humongous(unsigned int) (1 samples, 0.03%)</title><rect x="656.3" y="3187.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="659.3" y="3198.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskSchedulerImpl.handleSuccessfulTask (1 samples, 0.03%)</title><rect x="656.6" y="3555.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.6" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskSetManager.handleSuccessfulTask (1 samples, 0.03%)</title><rect x="656.6" y="3539.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="659.6" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskSetManager.logInfo (1 samples, 0.03%)</title><rect x="656.6" y="3523.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="659.6" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (1 samples, 0.03%)</title><rect x="656.6" y="3507.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.6" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (1 samples, 0.03%)</title><rect x="656.6" y="3491.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.6" y="3502.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (1 samples, 0.03%)</title><rect x="656.6" y="3475.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="659.6" y="3486.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (1 samples, 0.03%)</title><rect x="656.6" y="3459.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.6" y="3470.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (1 samples, 0.03%)</title><rect x="656.6" y="3443.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="659.6" y="3454.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (1 samples, 0.03%)</title><rect x="656.6" y="3427.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="659.6" y="3438.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.03%)</title><rect x="656.6" y="3411.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="659.6" y="3422.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (1 samples, 0.03%)</title><rect x="656.6" y="3395.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="659.6" y="3406.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (1 samples, 0.03%)</title><rect x="656.6" y="3379.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.6" y="3390.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (1 samples, 0.03%)</title><rect x="656.6" y="3363.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="659.6" y="3374.0"></text>
</g>
<g>
<title>org/apache/log4j/PatternLayout.format (1 samples, 0.03%)</title><rect x="656.6" y="3347.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="659.6" y="3358.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternConverter.format (1 samples, 0.03%)</title><rect x="656.6" y="3331.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="659.6" y="3342.0"></text>
</g>
<g>
<title>java/lang/StringBuffer.append (1 samples, 0.03%)</title><rect x="656.6" y="3315.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="659.6" y="3326.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="656.6" y="3299.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="659.6" y="3310.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.03%)</title><rect x="656.6" y="3283.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="659.6" y="3294.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.putStringAt (1 samples, 0.03%)</title><rect x="656.6" y="3267.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="659.6" y="3278.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.inflate (1 samples, 0.03%)</title><rect x="656.6" y="3251.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="659.6" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.deserialize (13 samples, 0.33%)</title><rect x="656.9" y="3555.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="659.9" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaDeserializationStream.readObject (13 samples, 0.33%)</title><rect x="656.9" y="3539.0" width="3.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="659.9" y="3550.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (13 samples, 0.33%)</title><rect x="656.9" y="3523.0" width="3.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="659.9" y="3534.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (13 samples, 0.33%)</title><rect x="656.9" y="3507.0" width="3.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="659.9" y="3518.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (13 samples, 0.33%)</title><rect x="656.9" y="3491.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="659.9" y="3502.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (13 samples, 0.33%)</title><rect x="656.9" y="3475.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="659.9" y="3486.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readExternalData (13 samples, 0.33%)</title><rect x="656.9" y="3459.0" width="3.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="659.9" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DirectTaskResult.readExternal (13 samples, 0.33%)</title><rect x="656.9" y="3443.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="659.9" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryOrIOException (13 samples, 0.33%)</title><rect x="656.9" y="3427.0" width="3.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="659.9" y="3438.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcV$sp.apply (13 samples, 0.33%)</title><rect x="656.9" y="3411.0" width="3.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="659.9" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DirectTaskResult$$Lambda$2165.0x0000000802273c40.apply$mcV$sp (13 samples, 0.33%)</title><rect x="656.9" y="3395.0" width="3.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="659.9" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DirectTaskResult.$anonfun$readExternal$1 (13 samples, 0.33%)</title><rect x="656.9" y="3379.0" width="3.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="659.9" y="3390.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (2 samples, 0.05%)</title><rect x="656.9" y="3363.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="659.9" y="3374.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="656.9" y="3347.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="659.9" y="3358.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="656.9" y="3331.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="659.9" y="3342.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="656.9" y="3315.0" width="0.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="659.9" y="3326.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readFully (9 samples, 0.23%)</title><rect x="657.5" y="3363.0" width="2.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="660.5" y="3374.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.readFully (9 samples, 0.23%)</title><rect x="657.5" y="3347.0" width="2.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="660.5" y="3358.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.read (9 samples, 0.23%)</title><rect x="657.5" y="3331.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="660.5" y="3342.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$BlockDataInputStream.refill (6 samples, 0.15%)</title><rect x="657.8" y="3315.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="660.8" y="3326.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream$PeekInputStream.read (6 samples, 0.15%)</title><rect x="657.8" y="3299.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="660.8" y="3310.0"></text>
</g>
<g>
<title>xsbt/api/InputWrapperStream.read (6 samples, 0.15%)</title><rect x="657.8" y="3283.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="660.8" y="3294.0"></text>
</g>
<g>
<title>sbinary/JavaInput.readTo (5 samples, 0.13%)</title><rect x="658.1" y="3267.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="661.1" y="3278.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.13%)</title><rect x="658.1" y="3251.0" width="1.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="661.1" y="3262.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.05%)</title><rect x="659.6" y="3315.0" width="0.6" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="662.6" y="3326.0"></text>
</g>
<g>
<title>scala/collection/immutable/Range.foreach (2 samples, 0.05%)</title><rect x="660.2" y="3363.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="663.2" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DirectTaskResult$$Lambda$2166.0x0000000802273f30.apply (2 samples, 0.05%)</title><rect x="660.2" y="3347.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="663.2" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DirectTaskResult.$anonfun$readExternal$2$adapted (2 samples, 0.05%)</title><rect x="660.2" y="3331.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.2" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DirectTaskResult.$anonfun$readExternal$2 (2 samples, 0.05%)</title><rect x="660.2" y="3315.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="663.2" y="3326.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (2 samples, 0.05%)</title><rect x="660.2" y="3299.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="663.2" y="3310.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (2 samples, 0.05%)</title><rect x="660.2" y="3283.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.2" y="3294.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (2 samples, 0.05%)</title><rect x="660.2" y="3267.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="663.2" y="3278.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (2 samples, 0.05%)</title><rect x="660.2" y="3251.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="663.2" y="3262.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readSerialData (1 samples, 0.03%)</title><rect x="660.2" y="3235.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="663.2" y="3246.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeReadObject (1 samples, 0.03%)</title><rect x="660.2" y="3219.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.2" y="3230.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="660.2" y="3203.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.2" y="3214.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="660.2" y="3187.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.2" y="3198.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor12.invoke (1 samples, 0.03%)</title><rect x="660.2" y="3171.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="663.2" y="3182.0"></text>
</g>
<g>
<title>org/apache/spark/util/AccumulatorV2.readObject (1 samples, 0.03%)</title><rect x="660.2" y="3155.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="663.2" y="3166.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="660.2" y="3139.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="663.2" y="3150.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="660.2" y="3123.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="663.2" y="3134.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="660.2" y="3107.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.2" y="3118.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateInstance (1 samples, 0.03%)</title><rect x="660.2" y="3091.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="663.2" y="3102.0"></text>
</g>
<g>
<title>Unsafe_AllocateInstance (1 samples, 0.03%)</title><rect x="660.2" y="3075.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="663.2" y="3086.0"></text>
</g>
<g>
<title>InstanceKlass::check_valid_for_instantiation(bool, Thread*) (1 samples, 0.03%)</title><rect x="660.2" y="3059.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="663.2" y="3070.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.newInstance (1 samples, 0.03%)</title><rect x="660.5" y="3235.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="663.5" y="3246.0"></text>
</g>
<g>
<title>java/security/AccessController.getContext (1 samples, 0.03%)</title><rect x="660.5" y="3219.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="663.5" y="3230.0"></text>
</g>
<g>
<title>java/security/AccessController.getStackAccessControlContext (1 samples, 0.03%)</title><rect x="660.5" y="3203.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="663.5" y="3214.0"></text>
</g>
<g>
<title>JVM_GetStackAccessControlContext (1 samples, 0.03%)</title><rect x="660.5" y="3187.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="663.5" y="3198.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.getRemoteBytes (7 samples, 0.18%)</title><rect x="660.8" y="3555.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="663.8" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.getRemoteBlock (7 samples, 0.18%)</title><rect x="660.8" y="3539.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="663.8" y="3550.0"></text>
</g>
<g>
<title>scala/Option.orElse (7 samples, 0.18%)</title><rect x="660.8" y="3523.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="663.8" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$$Lambda$2624.0x0000000802462a50.apply (7 samples, 0.18%)</title><rect x="660.8" y="3507.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="663.8" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.$anonfun$getRemoteBlock$8 (7 samples, 0.18%)</title><rect x="660.8" y="3491.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="663.8" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.fetchRemoteManagedBuffer (5 samples, 0.13%)</title><rect x="660.8" y="3475.0" width="1.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="663.8" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/network/BlockTransferService.fetchBlockSync (3 samples, 0.08%)</title><rect x="660.8" y="3459.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="663.8" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/network/netty/NettyBlockTransferService.fetchBlocks (3 samples, 0.08%)</title><rect x="660.8" y="3443.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.8" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/network/shuffle/RetryingBlockFetcher.&lt;init&gt; (1 samples, 0.03%)</title><rect x="660.8" y="3427.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="663.8" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/network/util/TransportConf.ioRetryWaitTimeMs (1 samples, 0.03%)</title><rect x="660.8" y="3411.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="663.8" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/network/util/JavaUtils.timeStringAsSec (1 samples, 0.03%)</title><rect x="660.8" y="3395.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="663.8" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/network/util/JavaUtils.timeStringAs (1 samples, 0.03%)</title><rect x="660.8" y="3379.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="663.8" y="3390.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.compile (1 samples, 0.03%)</title><rect x="660.8" y="3363.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="663.8" y="3374.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.&lt;init&gt; (1 samples, 0.03%)</title><rect x="660.8" y="3347.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="663.8" y="3358.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.compile (1 samples, 0.03%)</title><rect x="660.8" y="3331.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="663.8" y="3342.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.expr (1 samples, 0.03%)</title><rect x="660.8" y="3315.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="663.8" y="3326.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.sequence (1 samples, 0.03%)</title><rect x="660.8" y="3299.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="663.8" y="3310.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.group0 (1 samples, 0.03%)</title><rect x="660.8" y="3283.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="663.8" y="3294.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.expr (1 samples, 0.03%)</title><rect x="660.8" y="3267.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="663.8" y="3278.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.sequence (1 samples, 0.03%)</title><rect x="660.8" y="3251.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="663.8" y="3262.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.peek (1 samples, 0.03%)</title><rect x="660.8" y="3235.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="663.8" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/network/shuffle/RetryingBlockFetcher.start (2 samples, 0.05%)</title><rect x="661.1" y="3427.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="664.1" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/network/shuffle/RetryingBlockFetcher.fetchAllOutstanding (2 samples, 0.05%)</title><rect x="661.1" y="3411.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="664.1" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/network/netty/NettyBlockTransferService$$anon$2.createAndStart (2 samples, 0.05%)</title><rect x="661.1" y="3395.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="664.1" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/network/shuffle/OneForOneBlockFetcher.&lt;init&gt; (1 samples, 0.03%)</title><rect x="661.1" y="3379.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="664.1" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/network/util/TransportConf.useOldFetchProtocol (1 samples, 0.03%)</title><rect x="661.1" y="3363.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="664.1" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/network/util/ConfigProvider.getBoolean (1 samples, 0.03%)</title><rect x="661.1" y="3347.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="664.1" y="3358.0"></text>
</g>
<g>
<title>java/lang/Boolean.toString (1 samples, 0.03%)</title><rect x="661.1" y="3331.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="664.1" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/network/shuffle/OneForOneBlockFetcher.start (1 samples, 0.03%)</title><rect x="661.4" y="3379.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="664.4" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/network/client/TransportClient.sendRpc (1 samples, 0.03%)</title><rect x="661.4" y="3363.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="664.4" y="3374.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannel.writeAndFlush (1 samples, 0.03%)</title><rect x="661.4" y="3347.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="664.4" y="3358.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.writeAndFlush (1 samples, 0.03%)</title><rect x="661.4" y="3331.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="664.4" y="3342.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (1 samples, 0.03%)</title><rect x="661.4" y="3315.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="664.4" y="3326.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (1 samples, 0.03%)</title><rect x="661.4" y="3299.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="664.4" y="3310.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.03%)</title><rect x="661.4" y="3283.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="664.4" y="3294.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask.newInstance (1 samples, 0.03%)</title><rect x="661.4" y="3267.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="664.4" y="3278.0"></text>
</g>
<g>
<title>io/netty/channel/AbstractChannelHandlerContext$WriteTask.init (1 samples, 0.03%)</title><rect x="661.4" y="3251.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="664.4" y="3262.0"></text>
</g>
<g>
<title>io/netty/channel/DefaultChannelPipeline.incrementPendingOutboundBytes (1 samples, 0.03%)</title><rect x="661.4" y="3235.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="664.4" y="3246.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.incrementPendingOutboundBytes (1 samples, 0.03%)</title><rect x="661.4" y="3219.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="664.4" y="3230.0"></text>
</g>
<g>
<title>io/netty/channel/ChannelOutboundBuffer.incrementPendingOutboundBytes (1 samples, 0.03%)</title><rect x="661.4" y="3203.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="664.4" y="3214.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.addAndGet (1 samples, 0.03%)</title><rect x="661.4" y="3187.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="664.4" y="3198.0"></text>
</g>
<g>
<title>java/util/concurrent/atomic/AtomicLongFieldUpdater$CASUpdater.getAndAdd (1 samples, 0.03%)</title><rect x="661.4" y="3171.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="664.4" y="3182.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.sortLocations (2 samples, 0.05%)</title><rect x="661.7" y="3459.0" width="0.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="664.7" y="3470.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="661.7" y="3443.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="664.7" y="3454.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.partition (1 samples, 0.03%)</title><rect x="662.0" y="3443.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="665.0" y="3454.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.partition$ (1 samples, 0.03%)</title><rect x="662.0" y="3427.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="665.0" y="3438.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="662.0" y="3411.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="665.0" y="3422.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="662.0" y="3395.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="665.0" y="3406.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.03%)</title><rect x="662.0" y="3379.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="665.0" y="3390.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.03%)</title><rect x="662.0" y="3363.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="665.0" y="3374.0"></text>
</g>
<g>
<title>scala/Option.map (2 samples, 0.05%)</title><rect x="662.4" y="3475.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="665.4" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$$Lambda$2615.0x0000000802460598.apply (2 samples, 0.05%)</title><rect x="662.4" y="3459.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="665.4" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.$anonfun$getRemoteBytes$1 (2 samples, 0.05%)</title><rect x="662.4" y="3443.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="665.4" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer$.fromManagedBuffer (2 samples, 0.05%)</title><rect x="662.4" y="3427.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="665.4" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="662.4" y="3411.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.4" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="662.4" y="3395.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="665.4" y="3406.0"></text>
</g>
<g>
<title>scala/Option.map (1 samples, 0.03%)</title><rect x="662.4" y="3379.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="665.4" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer$$Lambda$1769.0x000000080216a790.apply (1 samples, 0.03%)</title><rect x="662.4" y="3363.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.4" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer.$anonfun$bufferWriteChunkSize$1$adapted (1 samples, 0.03%)</title><rect x="662.4" y="3347.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="665.4" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer.$anonfun$bufferWriteChunkSize$1 (1 samples, 0.03%)</title><rect x="662.4" y="3331.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="665.4" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/SparkConf.get (1 samples, 0.03%)</title><rect x="662.4" y="3315.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="665.4" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigEntryWithDefault.readFrom (1 samples, 0.03%)</title><rect x="662.4" y="3299.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="665.4" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigEntry.readString (1 samples, 0.03%)</title><rect x="662.4" y="3283.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="665.4" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigReader.get (1 samples, 0.03%)</title><rect x="662.4" y="3267.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="665.4" y="3278.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/SparkConfigProvider.get (1 samples, 0.03%)</title><rect x="662.4" y="3251.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.4" y="3262.0"></text>
</g>
<g>
<title>scala/Option.orElse (1 samples, 0.03%)</title><rect x="662.4" y="3235.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="665.4" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/SparkConfigProvider$$Lambda$190.0x000000080186fcb0.apply (1 samples, 0.03%)</title><rect x="662.4" y="3219.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="665.4" y="3230.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/SparkConfigProvider.$anonfun$get$1 (1 samples, 0.03%)</title><rect x="662.4" y="3203.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="665.4" y="3214.0"></text>
</g>
<g>
<title>org/apache/spark/SparkConf$.getDeprecatedConfig (1 samples, 0.03%)</title><rect x="662.4" y="3187.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="665.4" y="3198.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="662.4" y="3171.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="665.4" y="3182.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="662.4" y="3155.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.4" y="3166.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="662.4" y="3139.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="665.4" y="3150.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateInstance (1 samples, 0.03%)</title><rect x="662.4" y="3123.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="665.4" y="3134.0"></text>
</g>
<g>
<title>Unsafe_AllocateInstance (1 samples, 0.03%)</title><rect x="662.4" y="3107.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="665.4" y="3118.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="662.4" y="3091.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="665.4" y="3102.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jfr_sampler() (1 samples, 0.03%)</title><rect x="662.4" y="3075.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="665.4" y="3086.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofLong.&lt;init&gt; (1 samples, 0.03%)</title><rect x="662.7" y="3379.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="665.7" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMaster.removeBlock (1 samples, 0.03%)</title><rect x="663.0" y="3555.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="666.0" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (1 samples, 0.03%)</title><rect x="663.0" y="3539.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.0" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (1 samples, 0.03%)</title><rect x="663.0" y="3523.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.0" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.ask (1 samples, 0.03%)</title><rect x="663.0" y="3507.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="666.0" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.askAbortable (1 samples, 0.03%)</title><rect x="663.0" y="3491.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="666.0" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.askAbortable (1 samples, 0.03%)</title><rect x="663.0" y="3475.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.0" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postLocalMessage (1 samples, 0.03%)</title><rect x="663.0" y="3459.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="666.0" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postMessage (1 samples, 0.03%)</title><rect x="663.0" y="3443.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="666.0" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/DedicatedMessageLoop.post (1 samples, 0.03%)</title><rect x="663.0" y="3427.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="666.0" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/MessageLoop.setActive (1 samples, 0.03%)</title><rect x="663.0" y="3411.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.0" y="3422.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.03%)</title><rect x="663.0" y="3395.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.0" y="3406.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.03%)</title><rect x="663.0" y="3379.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.0" y="3390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="663.0" y="3363.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.0" y="3374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="663.0" y="3347.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="666.0" y="3358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="663.0" y="3331.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.0" y="3342.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="663.0" y="3315.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="666.0" y="3326.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="663.0" y="3299.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.0" y="3310.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="663.0" y="3283.0" width="0.3" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="666.0" y="3294.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="663.0" y="3267.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="666.0" y="3278.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="663.0" y="3251.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="666.0" y="3262.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="663.0" y="3235.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="666.0" y="3246.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="663.0" y="3219.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="666.0" y="3230.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="663.0" y="3203.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="666.0" y="3214.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="663.0" y="3187.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="666.0" y="3198.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="663.0" y="3171.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="666.0" y="3182.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="663.0" y="3155.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="666.0" y="3166.0"></text>
</g>
<g>
<title>sbt/TrapExit$App.run (765 samples, 19.48%)</title><rect x="663.3" y="3667.0" width="229.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.3" y="3678.0">sbt/TrapExit$App.run</text>
</g>
<g>
<title>sbt/Logger$$anon$4.apply (765 samples, 19.48%)</title><rect x="663.3" y="3651.0" width="229.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.3" y="3662.0">sbt/Logger$$anon$4.apply</text>
</g>
<g>
<title>sbt/Run$$anonfun$run$1.apply (765 samples, 19.48%)</title><rect x="663.3" y="3635.0" width="229.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.3" y="3646.0">sbt/Run$$anonfun$run$1.apply</text>
</g>
<g>
<title>sbt/Run$$anonfun$run$1.apply (765 samples, 19.48%)</title><rect x="663.3" y="3619.0" width="229.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="666.3" y="3630.0">sbt/Run$$anonfun$run$1.apply</text>
</g>
<g>
<title>sbt/Run$$anonfun$run$1.apply$mcV$sp (765 samples, 19.48%)</title><rect x="663.3" y="3603.0" width="229.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.3" y="3614.0">sbt/Run$$anonfun$run$1.apply$m..</text>
</g>
<g>
<title>sbt/Run.sbt$Run$$execute$1 (765 samples, 19.48%)</title><rect x="663.3" y="3587.0" width="229.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="666.3" y="3598.0">sbt/Run.sbt$Run$$execute$1</text>
</g>
<g>
<title>sbt/Run.run0 (765 samples, 19.48%)</title><rect x="663.3" y="3571.0" width="229.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="666.3" y="3582.0">sbt/Run.run0</text>
</g>
<g>
<title>sbt/Run.invokeMain (765 samples, 19.48%)</title><rect x="663.3" y="3555.0" width="229.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.3" y="3566.0">sbt/Run.invokeMain</text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (765 samples, 19.48%)</title><rect x="663.3" y="3539.0" width="229.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.3" y="3550.0">java/lang/reflect/Method.invoke</text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (765 samples, 19.48%)</title><rect x="663.3" y="3523.0" width="229.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.3" y="3534.0">jdk/internal/reflect/Delegatin..</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke (765 samples, 19.48%)</title><rect x="663.3" y="3507.0" width="229.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.3" y="3518.0">jdk/internal/reflect/NativeMet..</text>
</g>
<g>
<title>jdk/internal/reflect/NativeMethodAccessorImpl.invoke0 (765 samples, 19.48%)</title><rect x="663.3" y="3491.0" width="229.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="666.3" y="3502.0">jdk/internal/reflect/NativeMet..</text>
</g>
<g>
<title>org/apache/spark/examples/ml/MultilayerLewurmExample.main (765 samples, 19.48%)</title><rect x="663.3" y="3475.0" width="229.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.3" y="3486.0">org/apache/spark/examples/ml/M..</text>
</g>
<g>
<title>org/apache/spark/examples/ml/MultilayerLewurmExample$.main (765 samples, 19.48%)</title><rect x="663.3" y="3459.0" width="229.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.3" y="3470.0">org/apache/spark/examples/ml/M..</text>
</g>
<g>
<title>org/apache/spark/examples/ml/MultilayerLewurmExample$.time (765 samples, 19.48%)</title><rect x="663.3" y="3443.0" width="229.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.3" y="3454.0">org/apache/spark/examples/ml/M..</text>
</g>
<g>
<title>org/apache/spark/examples/ml/MultilayerLewurmExample$$$Lambda$2417.0x0000000802309b58.apply (765 samples, 19.48%)</title><rect x="663.3" y="3427.0" width="229.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="666.3" y="3438.0">org/apache/spark/examples/ml/M..</text>
</g>
<g>
<title>org/apache/spark/examples/ml/MultilayerLewurmExample$.$anonfun$main$1 (765 samples, 19.48%)</title><rect x="663.3" y="3411.0" width="229.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="666.3" y="3422.0">org/apache/spark/examples/ml/M..</text>
</g>
<g>
<title>org/apache/spark/ml/Predictor.fit (765 samples, 19.48%)</title><rect x="663.3" y="3395.0" width="229.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.3" y="3406.0">org/apache/spark/ml/Predictor...</text>
</g>
<g>
<title>org/apache/spark/ml/classification/MultilayerPerceptronClassifier.train (765 samples, 19.48%)</title><rect x="663.3" y="3379.0" width="229.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.3" y="3390.0">org/apache/spark/ml/classifica..</text>
</g>
<g>
<title>org/apache/spark/ml/classification/MultilayerPerceptronClassifier.train (765 samples, 19.48%)</title><rect x="663.3" y="3363.0" width="229.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.3" y="3374.0">org/apache/spark/ml/classifica..</text>
</g>
<g>
<title>org/apache/spark/ml/util/Instrumentation$.instrumented (765 samples, 19.48%)</title><rect x="663.3" y="3347.0" width="229.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="666.3" y="3358.0">org/apache/spark/ml/util/Instr..</text>
</g>
<g>
<title>scala/util/Try$.apply (765 samples, 19.48%)</title><rect x="663.3" y="3331.0" width="229.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.3" y="3342.0">scala/util/Try$.apply</text>
</g>
<g>
<title>org/apache/spark/ml/util/Instrumentation$$$Lambda$2434.0x000000080230da98.apply (765 samples, 19.48%)</title><rect x="663.3" y="3315.0" width="229.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="666.3" y="3326.0">org/apache/spark/ml/util/Instr..</text>
</g>
<g>
<title>org/apache/spark/ml/util/Instrumentation$.$anonfun$instrumented$1 (765 samples, 19.48%)</title><rect x="663.3" y="3299.0" width="229.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.3" y="3310.0">org/apache/spark/ml/util/Instr..</text>
</g>
<g>
<title>org/apache/spark/ml/classification/MultilayerPerceptronClassifier$$Lambda$2433.0x000000080230d4b8.apply (765 samples, 19.48%)</title><rect x="663.3" y="3283.0" width="229.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.3" y="3294.0">org/apache/spark/ml/classifica..</text>
</g>
<g>
<title>org/apache/spark/ml/classification/MultilayerPerceptronClassifier.$anonfun$train$1 (765 samples, 19.48%)</title><rect x="663.3" y="3267.0" width="229.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.3" y="3278.0">org/apache/spark/ml/classifica..</text>
</g>
<g>
<title>org/apache/spark/ml/ann/FeedForwardTrainer.train (765 samples, 19.48%)</title><rect x="663.3" y="3251.0" width="229.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.3" y="3262.0">org/apache/spark/ml/ann/FeedFo..</text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS.optimize (765 samples, 19.48%)</title><rect x="663.3" y="3235.0" width="229.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.3" y="3246.0">org/apache/spark/mllib/optimiz..</text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$.runLBFGS (765 samples, 19.48%)</title><rect x="663.3" y="3219.0" width="229.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.3" y="3230.0">org/apache/spark/mllib/optimiz..</text>
</g>
<g>
<title>breeze/util/IteratorImplicits$RichIterator$$anon$2.next (765 samples, 19.48%)</title><rect x="663.3" y="3203.0" width="229.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="666.3" y="3214.0">breeze/util/IteratorImplicits$..</text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$$Lambda$2683.0x00000008024a1b30.apply (29 samples, 0.74%)</title><rect x="663.3" y="3187.0" width="8.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="666.3" y="3198.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer.$anonfun$iterations$1$adapted (29 samples, 0.74%)</title><rect x="663.3" y="3171.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="666.3" y="3182.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer.$anonfun$iterations$1 (29 samples, 0.74%)</title><rect x="663.3" y="3155.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.3" y="3166.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$SequenceConvergenceCheck.apply (29 samples, 0.74%)</title><rect x="663.3" y="3139.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.3" y="3150.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$SequenceConvergenceCheck.apply (29 samples, 0.74%)</title><rect x="663.3" y="3123.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="666.3" y="3134.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterator.toStream (29 samples, 0.74%)</title><rect x="663.3" y="3107.0" width="8.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="666.3" y="3118.0"></text>
</g>
<g>
<title>scala/collection/Iterator.toStream$ (29 samples, 0.74%)</title><rect x="663.3" y="3091.0" width="8.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="666.3" y="3102.0"></text>
</g>
<g>
<title>scala/collection/Iterator.toStream (29 samples, 0.74%)</title><rect x="663.3" y="3075.0" width="8.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="666.3" y="3086.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$11.hasNext (29 samples, 0.74%)</title><rect x="663.3" y="3059.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.3" y="3070.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$11.nextCur (29 samples, 0.74%)</title><rect x="663.3" y="3043.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.3" y="3054.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$SequenceConvergenceCheck$$Lambda$2684.0x00000008024a2668.apply (29 samples, 0.74%)</title><rect x="663.3" y="3027.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.3" y="3038.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$SequenceConvergenceCheck.$anonfun$apply$1 (29 samples, 0.74%)</title><rect x="663.3" y="3011.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.3" y="3022.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$SequenceConvergenceCheck.apply (29 samples, 0.74%)</title><rect x="663.3" y="2995.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.3" y="3006.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$SequenceConvergenceCheck.apply (29 samples, 0.74%)</title><rect x="663.3" y="2979.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.3" y="2990.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterator.toStream (29 samples, 0.74%)</title><rect x="663.3" y="2963.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="666.3" y="2974.0"></text>
</g>
<g>
<title>scala/collection/Iterator.toStream$ (29 samples, 0.74%)</title><rect x="663.3" y="2947.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.3" y="2958.0"></text>
</g>
<g>
<title>scala/collection/Iterator.toStream (29 samples, 0.74%)</title><rect x="663.3" y="2931.0" width="8.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="666.3" y="2942.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$11.hasNext (29 samples, 0.74%)</title><rect x="663.3" y="2915.0" width="8.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="666.3" y="2926.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$11.nextCur (29 samples, 0.74%)</title><rect x="663.3" y="2899.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.3" y="2910.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$SequenceConvergenceCheck$$Lambda$2684.0x00000008024a2668.apply (29 samples, 0.74%)</title><rect x="663.3" y="2883.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.3" y="2894.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$SequenceConvergenceCheck.$anonfun$apply$1 (29 samples, 0.74%)</title><rect x="663.3" y="2867.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="666.3" y="2878.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$ConvergenceCheck$$anon$1.apply (29 samples, 0.74%)</title><rect x="663.3" y="2851.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.3" y="2862.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$ConvergenceCheck$$anon$1.apply (29 samples, 0.74%)</title><rect x="663.3" y="2835.0" width="8.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.3" y="2846.0"></text>
</g>
<g>
<title>scala/PartialFunction$Lifted.apply (29 samples, 0.74%)</title><rect x="663.3" y="2819.0" width="8.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="666.3" y="2830.0"></text>
</g>
<g>
<title>scala/PartialFunction$Lifted.apply (29 samples, 0.74%)</title><rect x="663.3" y="2803.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="666.3" y="2814.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$$anonfun$gradientConverged$1.applyOrElse (29 samples, 0.74%)</title><rect x="663.3" y="2787.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.3" y="2798.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$$anonfun$gradientConverged$1.applyOrElse (29 samples, 0.74%)</title><rect x="663.3" y="2771.0" width="8.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="666.3" y="2782.0"></text>
</g>
<g>
<title>breeze/linalg/norm$.apply (29 samples, 0.74%)</title><rect x="663.3" y="2755.0" width="8.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="666.3" y="2766.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply$ (29 samples, 0.74%)</title><rect x="663.3" y="2739.0" width="8.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="666.3" y="2750.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply (29 samples, 0.74%)</title><rect x="663.3" y="2723.0" width="8.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.3" y="2734.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.apply (29 samples, 0.74%)</title><rect x="663.3" y="2707.0" width="8.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="666.3" y="2718.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.apply (29 samples, 0.74%)</title><rect x="663.3" y="2691.0" width="8.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="666.3" y="2702.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.foreach$mVc$sp (28 samples, 0.71%)</title><rect x="663.6" y="2675.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="666.6" y="2686.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.foreach$mVcD$sp (28 samples, 0.71%)</title><rect x="663.6" y="2659.0" width="8.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.6" y="2670.0"></text>
</g>
<g>
<title>scala/Function1.apply$mcVD$sp (28 samples, 0.71%)</title><rect x="663.6" y="2643.0" width="8.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="666.6" y="2654.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322$$Lambda$2685.0x00000008024a38d0.apply (27 samples, 0.69%)</title><rect x="663.6" y="2627.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="666.6" y="2638.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.$anonfun$apply$16$adapted (27 samples, 0.69%)</title><rect x="663.6" y="2611.0" width="8.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="666.6" y="2622.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.$anonfun$apply$16 (27 samples, 0.69%)</title><rect x="663.6" y="2595.0" width="8.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.6" y="2606.0"></text>
</g>
<g>
<title>breeze/math/Field$fieldDouble$.sNorm (27 samples, 0.69%)</title><rect x="663.6" y="2579.0" width="8.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="666.6" y="2590.0"></text>
</g>
<g>
<title>breeze/math/Ring.sNorm$ (27 samples, 0.69%)</title><rect x="663.6" y="2563.0" width="8.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="666.6" y="2574.0"></text>
</g>
<g>
<title>breeze/math/Ring.sNorm (27 samples, 0.69%)</title><rect x="663.6" y="2547.0" width="8.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="666.6" y="2558.0"></text>
</g>
<g>
<title>breeze/linalg/norm$.apply (27 samples, 0.69%)</title><rect x="663.6" y="2531.0" width="8.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="666.6" y="2542.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply$ (27 samples, 0.69%)</title><rect x="663.6" y="2515.0" width="8.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="666.6" y="2526.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply (27 samples, 0.69%)</title><rect x="663.6" y="2499.0" width="8.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="666.6" y="2510.0"></text>
</g>
<g>
<title>breeze/math/Field$fieldDouble$$anon$7.apply (27 samples, 0.69%)</title><rect x="663.6" y="2483.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.6" y="2494.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.boxToDouble (27 samples, 0.69%)</title><rect x="663.6" y="2467.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="666.6" y="2478.0"></text>
</g>
<g>
<title>java/lang/Double.valueOf (27 samples, 0.69%)</title><rect x="663.6" y="2451.0" width="8.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="666.6" y="2462.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.boxToDouble (1 samples, 0.03%)</title><rect x="671.7" y="2627.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="674.7" y="2638.0"></text>
</g>
<g>
<title>java/lang/Double.valueOf (1 samples, 0.03%)</title><rect x="671.7" y="2611.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="674.7" y="2622.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="671.7" y="2595.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="674.7" y="2606.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="671.7" y="2579.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="674.7" y="2590.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="671.7" y="2563.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="674.7" y="2574.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="671.7" y="2547.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="674.7" y="2558.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="671.7" y="2531.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="674.7" y="2542.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="671.7" y="2515.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="674.7" y="2526.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.03%)</title><rect x="671.7" y="2499.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="674.7" y="2510.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool, unsigned int) (1 samples, 0.03%)</title><rect x="671.7" y="2483.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="674.7" y="2494.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_region(unsigned long, HeapRegionType, bool, unsigned int) (1 samples, 0.03%)</title><rect x="671.7" y="2467.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="674.7" y="2478.0"></text>
</g>
<g>
<title>HeapRegionManager::allocate_free_region(HeapRegionType, unsigned int) (1 samples, 0.03%)</title><rect x="671.7" y="2451.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="674.7" y="2462.0"></text>
</g>
<g>
<title>scala/collection/Iterator$$anon$7.next (736 samples, 18.74%)</title><rect x="672.0" y="3187.0" width="221.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="675.0" y="3198.0">scala/collection/Iterator$$an..</text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$$Lambda$2682.0x00000008024a1520.apply (736 samples, 18.74%)</title><rect x="672.0" y="3171.0" width="221.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="675.0" y="3182.0">breeze/optimize/FirstOrderMin..</text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer.$anonfun$infiniteIterations$1 (736 samples, 18.74%)</title><rect x="672.0" y="3155.0" width="221.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="675.0" y="3166.0">breeze/optimize/FirstOrderMin..</text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$SequenceConvergenceCheck.update (1 samples, 0.03%)</title><rect x="672.0" y="3139.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="675.0" y="3150.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$SequenceConvergenceCheck.update (1 samples, 0.03%)</title><rect x="672.0" y="3123.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="675.0" y="3134.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.map (1 samples, 0.03%)</title><rect x="672.0" y="3107.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="675.0" y="3118.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map$ (1 samples, 0.03%)</title><rect x="672.0" y="3091.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="675.0" y="3102.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map (1 samples, 0.03%)</title><rect x="672.0" y="3075.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.0" y="3086.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.builder$1 (1 samples, 0.03%)</title><rect x="672.0" y="3059.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="675.0" y="3070.0"></text>
</g>
<g>
<title>scala/collection/immutable/VectorBuilder.sizeHint (1 samples, 0.03%)</title><rect x="672.0" y="3043.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="675.0" y="3054.0"></text>
</g>
<g>
<title>scala/collection/mutable/Builder.sizeHint$ (1 samples, 0.03%)</title><rect x="672.0" y="3027.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.0" y="3038.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer.calculateObjective (6 samples, 0.15%)</title><rect x="672.3" y="3139.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.3" y="3150.0"></text>
</g>
<g>
<title>breeze/optimize/CachedDiffFunction.calculate (6 samples, 0.15%)</title><rect x="672.3" y="3123.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="675.3" y="3134.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals (6 samples, 0.15%)</title><rect x="672.3" y="3107.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="675.3" y="3118.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals2 (6 samples, 0.15%)</title><rect x="672.3" y="3091.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="675.3" y="3102.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.equals (6 samples, 0.15%)</title><rect x="672.3" y="3075.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="675.3" y="3086.0"></text>
</g>
<g>
<title>breeze/util/ArrayUtil$.nonstupidEquals (6 samples, 0.15%)</title><rect x="672.3" y="3059.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="675.3" y="3070.0"></text>
</g>
<g>
<title>scala/runtime/ScalaRunTime$.array_apply (2 samples, 0.05%)</title><rect x="673.5" y="3043.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="676.5" y="3054.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer.logger (1 samples, 0.03%)</title><rect x="674.1" y="3139.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="677.1" y="3150.0"></text>
</g>
<g>
<title>breeze/util/SerializableLogging.logger$ (1 samples, 0.03%)</title><rect x="674.1" y="3123.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="677.1" y="3134.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="674.1" y="3107.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="677.1" y="3118.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="674.1" y="3091.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="677.1" y="3102.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="674.1" y="3075.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="677.1" y="3086.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="674.1" y="3059.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="677.1" y="3070.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="674.1" y="3043.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="677.1" y="3054.0"></text>
</g>
<g>
<title>LinkResolver::check_method_accessability(Klass*, Klass*, Klass*, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="674.1" y="3027.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="677.1" y="3038.0"></text>
</g>
<g>
<title>breeze/optimize/LBFGS.chooseDescentDirection (282 samples, 7.18%)</title><rect x="674.4" y="3139.0" width="84.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="677.4" y="3150.0">breeze/opt..</text>
</g>
<g>
<title>breeze/optimize/LBFGS.chooseDescentDirection (282 samples, 7.18%)</title><rect x="674.4" y="3123.0" width="84.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="677.4" y="3134.0">breeze/opt..</text>
</g>
<g>
<title>breeze/optimize/LBFGS$ApproximateInverseHessian.$times (282 samples, 7.18%)</title><rect x="674.4" y="3107.0" width="84.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="677.4" y="3118.0">breeze/opt..</text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$2.apply (8 samples, 0.20%)</title><rect x="674.4" y="3091.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="677.4" y="3102.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$2.apply (8 samples, 0.20%)</title><rect x="674.4" y="3075.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="677.4" y="3086.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.copy (8 samples, 0.20%)</title><rect x="674.4" y="3059.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="677.4" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.copy$mcD$sp (8 samples, 0.20%)</title><rect x="674.4" y="3043.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="677.4" y="3054.0"></text>
</g>
<g>
<title>breeze/util/ArrayUtil$.copyOfRange (8 samples, 0.20%)</title><rect x="674.4" y="3027.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="677.4" y="3038.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (8 samples, 0.20%)</title><rect x="674.4" y="3011.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="677.4" y="3022.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (2 samples, 0.05%)</title><rect x="674.4" y="2995.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="677.4" y="3006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="674.4" y="2979.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="677.4" y="2990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="674.4" y="2963.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="677.4" y="2974.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="674.4" y="2947.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="677.4" y="2958.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (2 samples, 0.05%)</title><rect x="675.0" y="2995.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="678.0" y="3006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="675.0" y="2979.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="678.0" y="2990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="675.0" y="2963.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="678.0" y="2974.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="675.0" y="2947.0" width="0.6" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="678.0" y="2958.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.10%)</title><rect x="675.6" y="2995.0" width="1.2" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="678.6" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$times$eq (4 samples, 0.10%)</title><rect x="676.8" y="3091.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="679.8" y="3102.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$times$eq$ (4 samples, 0.10%)</title><rect x="676.8" y="3075.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="679.8" y="3086.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$times$eq (4 samples, 0.10%)</title><rect x="676.8" y="3059.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="679.8" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$colon$times$eq (4 samples, 0.10%)</title><rect x="676.8" y="3043.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="679.8" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$times$eq$ (4 samples, 0.10%)</title><rect x="676.8" y="3027.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="679.8" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$times$eq (4 samples, 0.10%)</title><rect x="676.8" y="3011.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="679.8" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$186.apply (4 samples, 0.10%)</title><rect x="676.8" y="2995.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="679.8" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$186.apply (4 samples, 0.10%)</title><rect x="676.8" y="2979.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="679.8" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$186.apply$mcD$sp (4 samples, 0.10%)</title><rect x="676.8" y="2963.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="679.8" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$186.breeze$linalg$operators$DenseVectorOps$$anon$$fastPath (4 samples, 0.10%)</title><rect x="676.8" y="2947.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="679.8" y="2958.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.dot (13 samples, 0.33%)</title><rect x="678.0" y="3091.0" width="3.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="681.0" y="3102.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot$ (13 samples, 0.33%)</title><rect x="678.0" y="3075.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="681.0" y="3086.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot (13 samples, 0.33%)</title><rect x="678.0" y="3059.0" width="3.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="681.0" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (13 samples, 0.33%)</title><rect x="678.0" y="3043.0" width="3.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="681.0" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (13 samples, 0.33%)</title><rect x="678.0" y="3027.0" width="3.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="681.0" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.blasPath (13 samples, 0.33%)</title><rect x="678.0" y="3011.0" width="3.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="681.0" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorSupportMethods.dotProduct_Double (13 samples, 0.33%)</title><rect x="678.0" y="2995.0" width="3.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="681.0" y="3006.0"></text>
</g>
<g>
<title>scala/collection/immutable/Range.foreach$mVc$sp (257 samples, 6.54%)</title><rect x="681.9" y="3091.0" width="77.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="684.9" y="3102.0">scala/col..</text>
</g>
<g>
<title>breeze/optimize/LBFGS$ApproximateInverseHessian$$Lambda$2686.0x00000008024a3cb0.apply$mcVI$sp (158 samples, 4.02%)</title><rect x="681.9" y="3075.0" width="47.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="684.9" y="3086.0">bree..</text>
</g>
<g>
<title>breeze/optimize/LBFGS$ApproximateInverseHessian.$anonfun$$times$1 (158 samples, 4.02%)</title><rect x="681.9" y="3059.0" width="47.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="684.9" y="3070.0">bree..</text>
</g>
<g>
<title>breeze/linalg/DenseVector.dot (117 samples, 2.98%)</title><rect x="682.2" y="3043.0" width="35.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="685.2" y="3054.0">bre..</text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot$ (117 samples, 2.98%)</title><rect x="682.2" y="3027.0" width="35.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="685.2" y="3038.0">bre..</text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot (117 samples, 2.98%)</title><rect x="682.2" y="3011.0" width="35.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="685.2" y="3022.0">bre..</text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (117 samples, 2.98%)</title><rect x="682.2" y="2995.0" width="35.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="685.2" y="3006.0">bre..</text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (117 samples, 2.98%)</title><rect x="682.2" y="2979.0" width="35.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="685.2" y="2990.0">bre..</text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.blasPath (117 samples, 2.98%)</title><rect x="682.2" y="2963.0" width="35.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="685.2" y="2974.0">bre..</text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorSupportMethods.dotProduct_Double (117 samples, 2.98%)</title><rect x="682.2" y="2947.0" width="35.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="685.2" y="2958.0">bre..</text>
</g>
<g>
<title>breeze/linalg/package$.axpy (40 samples, 1.02%)</title><rect x="717.3" y="3043.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="720.3" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (40 samples, 1.02%)</title><rect x="717.3" y="3027.0" width="12.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="720.3" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (40 samples, 1.02%)</title><rect x="717.3" y="3011.0" width="12.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="720.3" y="3022.0"></text>
</g>
<g>
<title>breeze/optimize/LBFGS$ApproximateInverseHessian$$Lambda$2687.0x00000008024a40b0.apply$mcVI$sp (99 samples, 2.52%)</title><rect x="729.4" y="3075.0" width="29.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="732.4" y="3086.0">br..</text>
</g>
<g>
<title>breeze/optimize/LBFGS$ApproximateInverseHessian.$anonfun$$times$2 (99 samples, 2.52%)</title><rect x="729.4" y="3059.0" width="29.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="732.4" y="3070.0">br..</text>
</g>
<g>
<title>breeze/linalg/DenseVector.dot (61 samples, 1.55%)</title><rect x="729.4" y="3043.0" width="18.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="732.4" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot$ (61 samples, 1.55%)</title><rect x="729.4" y="3027.0" width="18.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="732.4" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot (61 samples, 1.55%)</title><rect x="729.4" y="3011.0" width="18.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="732.4" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (61 samples, 1.55%)</title><rect x="729.4" y="2995.0" width="18.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="732.4" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (61 samples, 1.55%)</title><rect x="729.4" y="2979.0" width="18.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="732.4" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.blasPath (61 samples, 1.55%)</title><rect x="729.4" y="2963.0" width="18.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="732.4" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorSupportMethods.dotProduct_Double (61 samples, 1.55%)</title><rect x="729.4" y="2947.0" width="18.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="732.4" y="2958.0"></text>
</g>
<g>
<title>breeze/linalg/package$.axpy (38 samples, 0.97%)</title><rect x="747.7" y="3043.0" width="11.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="750.7" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (38 samples, 0.97%)</title><rect x="747.7" y="3027.0" width="11.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="750.7" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (38 samples, 0.97%)</title><rect x="747.7" y="3011.0" width="11.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="750.7" y="3022.0"></text>
</g>
<g>
<title>breeze/optimize/LBFGS.determineStepSize (367 samples, 9.35%)</title><rect x="759.1" y="3139.0" width="110.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="762.1" y="3150.0">breeze/optimi..</text>
</g>
<g>
<title>breeze/optimize/LBFGS.determineStepSize (367 samples, 9.35%)</title><rect x="759.1" y="3123.0" width="110.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="762.1" y="3134.0">breeze/optimi..</text>
</g>
<g>
<title>breeze/linalg/norm$.apply (40 samples, 1.02%)</title><rect x="759.1" y="3107.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="762.1" y="3118.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply$ (40 samples, 1.02%)</title><rect x="759.1" y="3091.0" width="12.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="762.1" y="3102.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply (40 samples, 1.02%)</title><rect x="759.1" y="3075.0" width="12.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.1" y="3086.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.apply (40 samples, 1.02%)</title><rect x="759.1" y="3059.0" width="12.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="762.1" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.apply (40 samples, 1.02%)</title><rect x="759.1" y="3043.0" width="12.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.1" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.foreach$mVc$sp (40 samples, 1.02%)</title><rect x="759.1" y="3027.0" width="12.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.1" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.foreach$mVcD$sp (40 samples, 1.02%)</title><rect x="759.1" y="3011.0" width="12.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="762.1" y="3022.0"></text>
</g>
<g>
<title>scala/Function1.apply$mcVD$sp (40 samples, 1.02%)</title><rect x="759.1" y="2995.0" width="12.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="762.1" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322$$Lambda$2685.0x00000008024a38d0.apply (39 samples, 0.99%)</title><rect x="759.1" y="2979.0" width="11.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.1" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.$anonfun$apply$16$adapted (39 samples, 0.99%)</title><rect x="759.1" y="2963.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="762.1" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.$anonfun$apply$16 (39 samples, 0.99%)</title><rect x="759.1" y="2947.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="762.1" y="2958.0"></text>
</g>
<g>
<title>breeze/math/Field$fieldDouble$.sNorm (39 samples, 0.99%)</title><rect x="759.1" y="2931.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="762.1" y="2942.0"></text>
</g>
<g>
<title>breeze/math/Ring.sNorm$ (39 samples, 0.99%)</title><rect x="759.1" y="2915.0" width="11.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.1" y="2926.0"></text>
</g>
<g>
<title>breeze/math/Ring.sNorm (39 samples, 0.99%)</title><rect x="759.1" y="2899.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="762.1" y="2910.0"></text>
</g>
<g>
<title>breeze/linalg/norm$.apply (39 samples, 0.99%)</title><rect x="759.1" y="2883.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="762.1" y="2894.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply$ (39 samples, 0.99%)</title><rect x="759.1" y="2867.0" width="11.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="762.1" y="2878.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply (39 samples, 0.99%)</title><rect x="759.1" y="2851.0" width="11.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="762.1" y="2862.0"></text>
</g>
<g>
<title>breeze/math/Field$fieldDouble$$anon$7.apply (39 samples, 0.99%)</title><rect x="759.1" y="2835.0" width="11.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="762.1" y="2846.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.boxToDouble (39 samples, 0.99%)</title><rect x="759.1" y="2819.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="762.1" y="2830.0"></text>
</g>
<g>
<title>java/lang/Double.valueOf (39 samples, 0.99%)</title><rect x="759.1" y="2803.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="762.1" y="2814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="770.5" y="2787.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="773.5" y="2798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="770.5" y="2771.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="773.5" y="2782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="770.5" y="2755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="773.5" y="2766.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="770.5" y="2739.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="773.5" y="2750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="770.5" y="2723.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="773.5" y="2734.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="770.5" y="2707.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="773.5" y="2718.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.03%)</title><rect x="770.5" y="2691.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="773.5" y="2702.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.03%)</title><rect x="770.5" y="2675.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="773.5" y="2686.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="770.5" y="2659.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="773.5" y="2670.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.boxToDouble (1 samples, 0.03%)</title><rect x="770.8" y="2979.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="773.8" y="2990.0"></text>
</g>
<g>
<title>java/lang/Double.valueOf (1 samples, 0.03%)</title><rect x="770.8" y="2963.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="773.8" y="2974.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="770.8" y="2947.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="773.8" y="2958.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="770.8" y="2931.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="773.8" y="2942.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="770.8" y="2915.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="773.8" y="2926.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="770.8" y="2899.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="773.8" y="2910.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="770.8" y="2883.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="773.8" y="2894.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="770.8" y="2867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="773.8" y="2878.0"></text>
</g>
<g>
<title>breeze/optimize/StrongWolfeLineSearch.minimize (327 samples, 8.33%)</title><rect x="771.1" y="3107.0" width="98.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="774.1" y="3118.0">breeze/optim..</text>
</g>
<g>
<title>breeze/optimize/StrongWolfeLineSearch.minimizeWithBound (327 samples, 8.33%)</title><rect x="771.1" y="3091.0" width="98.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="774.1" y="3102.0">breeze/optim..</text>
</g>
<g>
<title>breeze/optimize/StrongWolfeLineSearch.phi$1 (24 samples, 0.61%)</title><rect x="771.1" y="3075.0" width="7.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="774.1" y="3086.0"></text>
</g>
<g>
<title>breeze/optimize/LineSearch$$anon$1.calculate (24 samples, 0.61%)</title><rect x="771.1" y="3059.0" width="7.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="774.1" y="3070.0"></text>
</g>
<g>
<title>breeze/optimize/LineSearch$$anon$1.calculate (24 samples, 0.61%)</title><rect x="771.1" y="3043.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="774.1" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$colon$plus$eq (6 samples, 0.15%)</title><rect x="771.1" y="3027.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="774.1" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$plus$eq$ (6 samples, 0.15%)</title><rect x="771.1" y="3011.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="774.1" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$plus$eq (6 samples, 0.15%)</title><rect x="771.1" y="2995.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="774.1" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$13.apply (6 samples, 0.15%)</title><rect x="771.1" y="2979.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="774.1" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$13.apply (6 samples, 0.15%)</title><rect x="771.1" y="2963.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="774.1" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (6 samples, 0.15%)</title><rect x="771.1" y="2947.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="774.1" y="2958.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$times (12 samples, 0.31%)</title><rect x="772.9" y="3027.0" width="3.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="775.9" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$times$ (12 samples, 0.31%)</title><rect x="772.9" y="3011.0" width="3.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="775.9" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$times (12 samples, 0.31%)</title><rect x="772.9" y="2995.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="775.9" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$66.apply (12 samples, 0.31%)</title><rect x="772.9" y="2979.0" width="3.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="775.9" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$66.apply (12 samples, 0.31%)</title><rect x="772.9" y="2963.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="775.9" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$.zeros$mDc$sp (3 samples, 0.08%)</title><rect x="775.6" y="2947.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="778.6" y="2958.0"></text>
</g>
<g>
<title>scala/reflect/ManifestFactory$DoubleManifest.newArray (2 samples, 0.05%)</title><rect x="775.9" y="2931.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="778.9" y="2942.0"></text>
</g>
<g>
<title>scala/reflect/ManifestFactory$DoubleManifest.newArray (2 samples, 0.05%)</title><rect x="775.9" y="2915.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="778.9" y="2926.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (2 samples, 0.05%)</title><rect x="775.9" y="2899.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="778.9" y="2910.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="775.9" y="2883.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="778.9" y="2894.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="775.9" y="2867.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="778.9" y="2878.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="775.9" y="2851.0" width="0.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="778.9" y="2862.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.03%)</title><rect x="776.2" y="2835.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="779.2" y="2846.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="776.2" y="2819.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="779.2" y="2830.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="776.2" y="2803.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="779.2" y="2814.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="776.2" y="2787.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="779.2" y="2798.0"></text>
</g>
<g>
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="776.2" y="2771.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="779.2" y="2782.0"></text>
</g>
<g>
<title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="776.2" y="2755.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="779.2" y="2766.0"></text>
</g>
<g>
<title>do_anonymous_page (1 samples, 0.03%)</title><rect x="776.2" y="2739.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="779.2" y="2750.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge_delay (1 samples, 0.03%)</title><rect x="776.2" y="2723.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="779.2" y="2734.0"></text>
</g>
<g>
<title>mem_cgroup_try_charge (1 samples, 0.03%)</title><rect x="776.2" y="2707.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="779.2" y="2718.0"></text>
</g>
<g>
<title>try_charge (1 samples, 0.03%)</title><rect x="776.2" y="2691.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="779.2" y="2702.0"></text>
</g>
<g>
<title>page_counter_try_charge (1 samples, 0.03%)</title><rect x="776.2" y="2675.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="779.2" y="2686.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.dot (3 samples, 0.08%)</title><rect x="776.5" y="3027.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="779.5" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot$ (3 samples, 0.08%)</title><rect x="776.5" y="3011.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="779.5" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot (3 samples, 0.08%)</title><rect x="776.5" y="2995.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="779.5" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (3 samples, 0.08%)</title><rect x="776.5" y="2979.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="779.5" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (3 samples, 0.08%)</title><rect x="776.5" y="2963.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="779.5" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.blasPath (3 samples, 0.08%)</title><rect x="776.5" y="2947.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="779.5" y="2958.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorSupportMethods.dotProduct_Double (3 samples, 0.08%)</title><rect x="776.5" y="2931.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="779.5" y="2942.0"></text>
</g>
<g>
<title>breeze/optimize/CachedDiffFunction.calculate (3 samples, 0.08%)</title><rect x="777.4" y="3027.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="780.4" y="3038.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals (3 samples, 0.08%)</title><rect x="777.4" y="3011.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="780.4" y="3022.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals2 (3 samples, 0.08%)</title><rect x="777.4" y="2995.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="780.4" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.equals (3 samples, 0.08%)</title><rect x="777.4" y="2979.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="780.4" y="2990.0"></text>
</g>
<g>
<title>breeze/util/ArrayUtil$.nonstupidEquals (3 samples, 0.08%)</title><rect x="777.4" y="2963.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="780.4" y="2974.0"></text>
</g>
<g>
<title>scala/collection/immutable/Range.foreach$mVc$sp (303 samples, 7.72%)</title><rect x="778.3" y="3075.0" width="91.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="781.3" y="3086.0">scala/colle..</text>
</g>
<g>
<title>breeze/optimize/StrongWolfeLineSearch$$Lambda$2689.0x00000008024a5b10.apply$mcVI$sp (303 samples, 7.72%)</title><rect x="778.3" y="3059.0" width="91.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="781.3" y="3070.0">breeze/opti..</text>
</g>
<g>
<title>breeze/optimize/StrongWolfeLineSearch.$anonfun$minimizeWithBound$7 (303 samples, 7.72%)</title><rect x="778.3" y="3043.0" width="91.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.3" y="3054.0">breeze/opti..</text>
</g>
<g>
<title>breeze/optimize/StrongWolfeLineSearch.phi$1 (236 samples, 6.01%)</title><rect x="778.3" y="3027.0" width="71.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="781.3" y="3038.0">breeze/o..</text>
</g>
<g>
<title>breeze/optimize/LineSearch$$anon$1.calculate (236 samples, 6.01%)</title><rect x="778.3" y="3011.0" width="71.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="781.3" y="3022.0">breeze/o..</text>
</g>
<g>
<title>breeze/optimize/LineSearch$$anon$1.calculate (236 samples, 6.01%)</title><rect x="778.3" y="2995.0" width="71.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="781.3" y="3006.0">breeze/o..</text>
</g>
<g>
<title>breeze/linalg/DenseVector.$colon$plus$eq (5 samples, 0.13%)</title><rect x="778.6" y="2979.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="781.6" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$plus$eq$ (5 samples, 0.13%)</title><rect x="778.6" y="2963.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="781.6" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$plus$eq (5 samples, 0.13%)</title><rect x="778.6" y="2947.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="781.6" y="2958.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$13.apply (5 samples, 0.13%)</title><rect x="778.6" y="2931.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="781.6" y="2942.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$13.apply (5 samples, 0.13%)</title><rect x="778.6" y="2915.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="781.6" y="2926.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (5 samples, 0.13%)</title><rect x="778.6" y="2899.0" width="1.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="781.6" y="2910.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$times (10 samples, 0.25%)</title><rect x="780.1" y="2979.0" width="3.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="783.1" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$times$ (10 samples, 0.25%)</title><rect x="780.1" y="2963.0" width="3.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="783.1" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$times (10 samples, 0.25%)</title><rect x="780.1" y="2947.0" width="3.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="783.1" y="2958.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$66.apply (10 samples, 0.25%)</title><rect x="780.1" y="2931.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="783.1" y="2942.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$66.apply (10 samples, 0.25%)</title><rect x="780.1" y="2915.0" width="3.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="783.1" y="2926.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$.zeros$mDc$sp (3 samples, 0.08%)</title><rect x="782.2" y="2899.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="785.2" y="2910.0"></text>
</g>
<g>
<title>scala/reflect/ManifestFactory$DoubleManifest.newArray (3 samples, 0.08%)</title><rect x="782.2" y="2883.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="785.2" y="2894.0"></text>
</g>
<g>
<title>scala/reflect/ManifestFactory$DoubleManifest.newArray (3 samples, 0.08%)</title><rect x="782.2" y="2867.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="785.2" y="2878.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (3 samples, 0.08%)</title><rect x="782.2" y="2851.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="785.2" y="2862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.08%)</title><rect x="782.2" y="2835.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="785.2" y="2846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.08%)</title><rect x="782.2" y="2819.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="785.2" y="2830.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.08%)</title><rect x="782.2" y="2803.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="785.2" y="2814.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.dot (8 samples, 0.20%)</title><rect x="783.1" y="2979.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="786.1" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot$ (8 samples, 0.20%)</title><rect x="783.1" y="2963.0" width="2.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="786.1" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot (8 samples, 0.20%)</title><rect x="783.1" y="2947.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="786.1" y="2958.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (8 samples, 0.20%)</title><rect x="783.1" y="2931.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="786.1" y="2942.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (8 samples, 0.20%)</title><rect x="783.1" y="2915.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="786.1" y="2926.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.blasPath (8 samples, 0.20%)</title><rect x="783.1" y="2899.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="786.1" y="2910.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorSupportMethods.dotProduct_Double (8 samples, 0.20%)</title><rect x="783.1" y="2883.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="786.1" y="2894.0"></text>
</g>
<g>
<title>breeze/optimize/CachedDiffFunction.calculate (212 samples, 5.40%)</title><rect x="785.5" y="2979.0" width="63.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="788.5" y="2990.0">breeze/..</text>
</g>
<g>
<title>breeze/linalg/package$.copy (7 samples, 0.18%)</title><rect x="785.5" y="2963.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="788.5" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$2.apply (7 samples, 0.18%)</title><rect x="785.5" y="2947.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="788.5" y="2958.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$2.apply (7 samples, 0.18%)</title><rect x="785.5" y="2931.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="788.5" y="2942.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.copy (7 samples, 0.18%)</title><rect x="785.5" y="2915.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.5" y="2926.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.copy$mcD$sp (7 samples, 0.18%)</title><rect x="785.5" y="2899.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="788.5" y="2910.0"></text>
</g>
<g>
<title>breeze/util/ArrayUtil$.copyOfRange (7 samples, 0.18%)</title><rect x="785.5" y="2883.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="788.5" y="2894.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 0.18%)</title><rect x="785.5" y="2867.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="788.5" y="2878.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (2 samples, 0.05%)</title><rect x="785.5" y="2851.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="788.5" y="2862.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="785.5" y="2835.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="788.5" y="2846.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="785.5" y="2819.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="788.5" y="2830.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="785.5" y="2803.0" width="0.6" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="788.5" y="2814.0"></text>
</g>
<g>
<title>java/lang/System.arraycopy (2 samples, 0.05%)</title><rect x="786.1" y="2851.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="789.1" y="2862.0"></text>
</g>
<g>
<title>JVM_ArrayCopy (2 samples, 0.05%)</title><rect x="786.1" y="2835.0" width="0.7" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="789.1" y="2846.0"></text>
</g>
<g>
<title>acl_CopyRight (2 samples, 0.05%)</title><rect x="786.1" y="2819.0" width="0.7" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="789.1" y="2830.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="786.8" y="2851.0" width="0.9" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="789.8" y="2862.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$CostFun.calculate (205 samples, 5.22%)</title><rect x="787.7" y="2963.0" width="61.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="790.7" y="2974.0">org/ap..</text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$CostFun.calculate (205 samples, 5.22%)</title><rect x="787.7" y="2947.0" width="61.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="790.7" y="2958.0">org/ap..</text>
</g>
<g>
<title>org/apache/spark/SparkContext.broadcast (88 samples, 2.24%)</title><rect x="787.7" y="2931.0" width="26.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="790.7" y="2942.0">o..</text>
</g>
<g>
<title>org/apache/spark/SparkContext.getCallSite (2 samples, 0.05%)</title><rect x="787.7" y="2915.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="790.7" y="2926.0"></text>
</g>
<g>
<title>scala/Option.getOrElse (2 samples, 0.05%)</title><rect x="787.7" y="2899.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="790.7" y="2910.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext$$Lambda$1784.0x000000080216cb00.apply (2 samples, 0.05%)</title><rect x="787.7" y="2883.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="790.7" y="2894.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.$anonfun$getCallSite$1 (2 samples, 0.05%)</title><rect x="787.7" y="2867.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="790.7" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.callSite$2 (2 samples, 0.05%)</title><rect x="787.7" y="2851.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="790.7" y="2862.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.callSite$lzycompute$1 (2 samples, 0.05%)</title><rect x="787.7" y="2835.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="790.7" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.getCallSite (2 samples, 0.05%)</title><rect x="787.7" y="2819.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="790.7" y="2830.0"></text>
</g>
<g>
<title>java/lang/Thread.getStackTrace (1 samples, 0.03%)</title><rect x="787.7" y="2803.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="790.7" y="2814.0"></text>
</g>
<g>
<title>java/lang/Throwable.getStackTrace (1 samples, 0.03%)</title><rect x="787.7" y="2787.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="790.7" y="2798.0"></text>
</g>
<g>
<title>java/lang/Throwable.getOurStackTrace (1 samples, 0.03%)</title><rect x="787.7" y="2771.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="790.7" y="2782.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.of (1 samples, 0.03%)</title><rect x="787.7" y="2755.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="790.7" y="2766.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.initStackTraceElements (1 samples, 0.03%)</title><rect x="787.7" y="2739.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="790.7" y="2750.0"></text>
</g>
<g>
<title>JVM_InitStackTraceElementArray (1 samples, 0.03%)</title><rect x="787.7" y="2723.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="790.7" y="2734.0"></text>
</g>
<g>
<title>InstanceKlass::method_with_orig_idnum(int, int) (1 samples, 0.03%)</title><rect x="787.7" y="2707.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="790.7" y="2718.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.mkString (1 samples, 0.03%)</title><rect x="788.0" y="2803.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="791.0" y="2814.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.mkString$ (1 samples, 0.03%)</title><rect x="788.0" y="2787.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="791.0" y="2798.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.mkString (1 samples, 0.03%)</title><rect x="788.0" y="2771.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="791.0" y="2782.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.mkString (1 samples, 0.03%)</title><rect x="788.0" y="2755.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="791.0" y="2766.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.mkString$ (1 samples, 0.03%)</title><rect x="788.0" y="2739.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="791.0" y="2750.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.mkString (1 samples, 0.03%)</title><rect x="788.0" y="2723.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="791.0" y="2734.0"></text>
</g>
<g>
<title>scala/collection/mutable/StringBuilder.toString (1 samples, 0.03%)</title><rect x="788.0" y="2707.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="791.0" y="2718.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.addString (1 samples, 0.03%)</title><rect x="788.0" y="2691.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.0" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/BroadcastManager.newBroadcast (86 samples, 2.19%)</title><rect x="788.3" y="2915.0" width="25.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="791.3" y="2926.0">o..</text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcastFactory.newBroadcast (86 samples, 2.19%)</title><rect x="788.3" y="2899.0" width="25.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="791.3" y="2910.0">o..</text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.&lt;init&gt; (86 samples, 2.19%)</title><rect x="788.3" y="2883.0" width="25.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="791.3" y="2894.0">o..</text>
</g>
<g>
<title>org/apache/spark/broadcast/Broadcast.&lt;init&gt; (1 samples, 0.03%)</title><rect x="788.3" y="2867.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="791.3" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.$init$ (1 samples, 0.03%)</title><rect x="788.3" y="2851.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="791.3" y="2862.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="788.3" y="2835.0" width="0.3" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="791.3" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.writeBlocks (85 samples, 2.16%)</title><rect x="788.6" y="2867.0" width="25.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.6" y="2878.0">o..</text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.blockifyObject (64 samples, 1.63%)</title><rect x="788.6" y="2851.0" width="19.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="791.6" y="2862.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinally (63 samples, 1.60%)</title><rect x="788.6" y="2835.0" width="18.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="791.6" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$$Lambda$1759.0x0000000802168000.apply (63 samples, 1.60%)</title><rect x="788.6" y="2819.0" width="18.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="791.6" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$4 (63 samples, 1.60%)</title><rect x="788.6" y="2803.0" width="18.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="791.6" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializationStream.writeObject (63 samples, 1.60%)</title><rect x="788.6" y="2787.0" width="18.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="791.6" y="2798.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (63 samples, 1.60%)</title><rect x="788.6" y="2771.0" width="18.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="791.6" y="2782.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (63 samples, 1.60%)</title><rect x="788.6" y="2755.0" width="18.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="791.6" y="2766.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (63 samples, 1.60%)</title><rect x="788.6" y="2739.0" width="18.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="791.6" y="2750.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (63 samples, 1.60%)</title><rect x="788.6" y="2723.0" width="18.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="791.6" y="2734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (63 samples, 1.60%)</title><rect x="788.6" y="2707.0" width="18.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="791.6" y="2718.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (63 samples, 1.60%)</title><rect x="788.6" y="2691.0" width="18.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="791.6" y="2702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (63 samples, 1.60%)</title><rect x="788.6" y="2675.0" width="18.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="791.6" y="2686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeDoubles (62 samples, 1.58%)</title><rect x="788.9" y="2659.0" width="18.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="791.9" y="2670.0"></text>
</g>
<g>
<title>java/io/Bits.putDouble (26 samples, 0.66%)</title><rect x="788.9" y="2643.0" width="7.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="791.9" y="2654.0"></text>
</g>
<g>
<title>java/io/Bits.putLong (26 samples, 0.66%)</title><rect x="788.9" y="2627.0" width="7.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="791.9" y="2638.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.writeDouble (36 samples, 0.92%)</title><rect x="796.7" y="2643.0" width="10.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="799.7" y="2654.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.writeLong (36 samples, 0.92%)</title><rect x="796.7" y="2627.0" width="10.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="799.7" y="2638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.write (36 samples, 0.92%)</title><rect x="796.7" y="2611.0" width="10.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="799.7" y="2622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.write (34 samples, 0.87%)</title><rect x="797.3" y="2595.0" width="10.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="800.3" y="2606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (33 samples, 0.84%)</title><rect x="797.6" y="2579.0" width="9.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="800.6" y="2590.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="797.6" y="2563.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="800.6" y="2574.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4BlockOutputStream.write (32 samples, 0.81%)</title><rect x="797.9" y="2563.0" width="9.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="800.9" y="2574.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4BlockOutputStream.flushBufferedData (32 samples, 0.81%)</title><rect x="797.9" y="2547.0" width="9.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="800.9" y="2558.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="797.9" y="2531.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="800.9" y="2542.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4Compressor.compress (10 samples, 0.25%)</title><rect x="798.2" y="2531.0" width="3.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="801.2" y="2542.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JavaUnsafeCompressor.compress (10 samples, 0.25%)</title><rect x="798.2" y="2515.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="801.2" y="2526.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JavaUnsafeCompressor.compress64k (10 samples, 0.25%)</title><rect x="798.2" y="2499.0" width="3.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="801.2" y="2510.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4UnsafeUtils.lastLiterals (1 samples, 0.03%)</title><rect x="800.9" y="2483.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="803.9" y="2494.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4SafeUtils.lastLiterals (1 samples, 0.03%)</title><rect x="800.9" y="2467.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="803.9" y="2478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="800.9" y="2451.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="803.9" y="2462.0"></text>
</g>
<g>
<title>net/jpountz/xxhash/StreamingXXHash32$1.update (7 samples, 0.18%)</title><rect x="801.2" y="2531.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="804.2" y="2542.0"></text>
</g>
<g>
<title>net/jpountz/xxhash/StreamingXXHash32JavaUnsafe.update (7 samples, 0.18%)</title><rect x="801.2" y="2515.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="804.2" y="2526.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBufferOutputStream.write (14 samples, 0.36%)</title><rect x="803.3" y="2531.0" width="4.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="806.3" y="2542.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="803.3" y="2515.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="806.3" y="2526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.03%)</title><rect x="803.3" y="2499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="806.3" y="2510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="803.3" y="2483.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="806.3" y="2494.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBufferOutputStream.allocateNewChunkIfNeeded (13 samples, 0.33%)</title><rect x="803.6" y="2515.0" width="3.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="806.6" y="2526.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$$Lambda$1756.0x0000000802160a80.apply (7 samples, 0.18%)</title><rect x="803.6" y="2499.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="806.6" y="2510.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$1$adapted (7 samples, 0.18%)</title><rect x="803.6" y="2483.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="806.6" y="2494.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$1 (7 samples, 0.18%)</title><rect x="803.6" y="2467.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="806.6" y="2478.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (7 samples, 0.18%)</title><rect x="803.6" y="2451.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="806.6" y="2462.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (7 samples, 0.18%)</title><rect x="803.6" y="2435.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="806.6" y="2446.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (7 samples, 0.18%)</title><rect x="803.6" y="2419.0" width="2.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="806.6" y="2430.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (7 samples, 0.18%)</title><rect x="803.6" y="2403.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="806.6" y="2414.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.18%)</title><rect x="803.6" y="2387.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="806.6" y="2398.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (5 samples, 0.13%)</title><rect x="803.6" y="2371.0" width="1.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="806.6" y="2382.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (2 samples, 0.05%)</title><rect x="805.1" y="2371.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="808.1" y="2382.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (2 samples, 0.05%)</title><rect x="805.1" y="2355.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="808.1" y="2366.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="805.1" y="2339.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="808.1" y="2350.0"></text>
</g>
<g>
<title>HeapRegionManager::allocate_humongous(unsigned int) (1 samples, 0.03%)</title><rect x="805.1" y="2323.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="808.1" y="2334.0"></text>
</g>
<g>
<title>HeapRegionManager::find_contiguous_in_free_list(unsigned int) (1 samples, 0.03%)</title><rect x="805.1" y="2307.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="808.1" y="2318.0"></text>
</g>
<g>
<title>G1MonitoringSupport::update_sizes() (1 samples, 0.03%)</title><rect x="805.4" y="2339.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="808.4" y="2350.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.boxToInteger (6 samples, 0.15%)</title><rect x="805.7" y="2499.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="808.7" y="2510.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.15%)</title><rect x="805.7" y="2483.0" width="1.8" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="808.7" y="2494.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBufferOutputStream.toChunkedByteBuffer (1 samples, 0.03%)</title><rect x="807.5" y="2835.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="810.5" y="2846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="807.5" y="2819.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.5" y="2830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.03%)</title><rect x="807.5" y="2803.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="810.5" y="2814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.putBuffer (1 samples, 0.03%)</title><rect x="807.5" y="2787.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="810.5" y="2798.0"></text>
</g>
<g>
<title>jdk/internal/misc/ScopedMemoryAccess.copyMemory (1 samples, 0.03%)</title><rect x="807.5" y="2771.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="810.5" y="2782.0"></text>
</g>
<g>
<title>jdk/internal/misc/ScopedMemoryAccess.copyMemoryInternal (1 samples, 0.03%)</title><rect x="807.5" y="2755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="810.5" y="2766.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="807.5" y="2739.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.5" y="2750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="807.5" y="2723.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="810.5" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.putSingle (2 samples, 0.05%)</title><rect x="807.8" y="2851.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="810.8" y="2862.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.putIterator (2 samples, 0.05%)</title><rect x="807.8" y="2835.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="810.8" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.doPutIterator (2 samples, 0.05%)</title><rect x="807.8" y="2819.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="810.8" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$doPut (2 samples, 0.05%)</title><rect x="807.8" y="2803.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="810.8" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$$Lambda$1736.0x00000008021527f0.apply (2 samples, 0.05%)</title><rect x="807.8" y="2787.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="810.8" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.$anonfun$doPutIterator$1 (2 samples, 0.05%)</title><rect x="807.8" y="2771.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="810.8" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$addUpdatedBlockStatusToTaskMetrics (1 samples, 0.03%)</title><rect x="807.8" y="2755.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="810.8" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/SparkConf.get (1 samples, 0.03%)</title><rect x="807.8" y="2739.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="810.8" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigEntryWithDefault.readFrom (1 samples, 0.03%)</title><rect x="807.8" y="2723.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="810.8" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigEntry.readString (1 samples, 0.03%)</title><rect x="807.8" y="2707.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="810.8" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigReader.get (1 samples, 0.03%)</title><rect x="807.8" y="2691.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.8" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/SparkConfigProvider.get (1 samples, 0.03%)</title><rect x="807.8" y="2675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="810.8" y="2686.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.03%)</title><rect x="807.8" y="2659.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="810.8" y="2670.0"></text>
</g>
<g>
<title>java/lang/String.startsWith (1 samples, 0.03%)</title><rect x="807.8" y="2643.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="810.8" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.putIteratorAsValues (1 samples, 0.03%)</title><rect x="808.1" y="2755.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="811.1" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.putIterator (1 samples, 0.03%)</title><rect x="808.1" y="2739.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="811.1" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.logInfo (1 samples, 0.03%)</title><rect x="808.1" y="2723.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="811.1" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (1 samples, 0.03%)</title><rect x="808.1" y="2707.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="811.1" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (1 samples, 0.03%)</title><rect x="808.1" y="2691.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.1" y="2702.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (1 samples, 0.03%)</title><rect x="808.1" y="2675.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.1" y="2686.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (1 samples, 0.03%)</title><rect x="808.1" y="2659.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="811.1" y="2670.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (1 samples, 0.03%)</title><rect x="808.1" y="2643.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="811.1" y="2654.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (1 samples, 0.03%)</title><rect x="808.1" y="2627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.1" y="2638.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.03%)</title><rect x="808.1" y="2611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="811.1" y="2622.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (1 samples, 0.03%)</title><rect x="808.1" y="2595.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="811.1" y="2606.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (1 samples, 0.03%)</title><rect x="808.1" y="2579.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="811.1" y="2590.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (1 samples, 0.03%)</title><rect x="808.1" y="2563.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="811.1" y="2574.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/QuietWriter.flush (1 samples, 0.03%)</title><rect x="808.1" y="2547.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.1" y="2558.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flush (1 samples, 0.03%)</title><rect x="808.1" y="2531.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="811.1" y="2542.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flush (1 samples, 0.03%)</title><rect x="808.1" y="2515.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="811.1" y="2526.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlush (1 samples, 0.03%)</title><rect x="808.1" y="2499.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="811.1" y="2510.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (1 samples, 0.03%)</title><rect x="808.1" y="2483.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="811.1" y="2494.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (1 samples, 0.03%)</title><rect x="808.1" y="2467.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="811.1" y="2478.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (1 samples, 0.03%)</title><rect x="808.1" y="2451.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="811.1" y="2462.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.03%)</title><rect x="808.1" y="2435.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="811.1" y="2446.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.03%)</title><rect x="808.1" y="2419.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="811.1" y="2430.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (1 samples, 0.03%)</title><rect x="808.1" y="2403.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="811.1" y="2414.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.03%)</title><rect x="808.1" y="2387.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="811.1" y="2398.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (1 samples, 0.03%)</title><rect x="808.1" y="2371.0" width="0.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="811.1" y="2382.0"></text>
</g>
<g>
<title>writeBytes (1 samples, 0.03%)</title><rect x="808.1" y="2355.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="811.1" y="2366.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="808.1" y="2339.0" width="0.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="811.1" y="2350.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="808.1" y="2323.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="811.1" y="2334.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="808.1" y="2307.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="811.1" y="2318.0"></text>
</g>
<g>
<title>__x64_sys_write (1 samples, 0.03%)</title><rect x="808.1" y="2291.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="811.1" y="2302.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.03%)</title><rect x="808.1" y="2275.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="811.1" y="2286.0"></text>
</g>
<g>
<title>vfs_write (1 samples, 0.03%)</title><rect x="808.1" y="2259.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="811.1" y="2270.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.03%)</title><rect x="808.1" y="2243.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="811.1" y="2254.0"></text>
</g>
<g>
<title>tty_write (1 samples, 0.03%)</title><rect x="808.1" y="2227.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="811.1" y="2238.0"></text>
</g>
<g>
<title>n_tty_write (1 samples, 0.03%)</title><rect x="808.1" y="2211.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="811.1" y="2222.0"></text>
</g>
<g>
<title>pty_write (1 samples, 0.03%)</title><rect x="808.1" y="2195.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="811.1" y="2206.0"></text>
</g>
<g>
<title>tty_flip_buffer_push (1 samples, 0.03%)</title><rect x="808.1" y="2179.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="811.1" y="2190.0"></text>
</g>
<g>
<title>queue_work_on (1 samples, 0.03%)</title><rect x="808.1" y="2163.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="811.1" y="2174.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.foreach (19 samples, 0.48%)</title><rect x="808.4" y="2851.0" width="5.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="811.4" y="2862.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (18 samples, 0.46%)</title><rect x="808.7" y="2835.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="811.7" y="2846.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (18 samples, 0.46%)</title><rect x="808.7" y="2819.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="811.7" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$Lambda$1773.0x000000080216b600.apply (18 samples, 0.46%)</title><rect x="808.7" y="2803.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="811.7" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.$anonfun$writeBlocks$1$adapted (18 samples, 0.46%)</title><rect x="808.7" y="2787.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="811.7" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.$anonfun$writeBlocks$1 (18 samples, 0.46%)</title><rect x="808.7" y="2771.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="811.7" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.calcChecksum (8 samples, 0.20%)</title><rect x="808.7" y="2755.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="811.7" y="2766.0"></text>
</g>
<g>
<title>java/util/zip/Adler32.update (7 samples, 0.18%)</title><rect x="809.0" y="2739.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="812.0" y="2750.0"></text>
</g>
<g>
<title>java/util/zip/Adler32.updateBytes (7 samples, 0.18%)</title><rect x="809.0" y="2723.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="812.0" y="2734.0"></text>
</g>
<g>
<title>adler32_z (7 samples, 0.18%)</title><rect x="809.0" y="2707.0" width="2.1" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="812.0" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.putBytes (8 samples, 0.20%)</title><rect x="811.1" y="2755.0" width="2.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="814.1" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater.save (8 samples, 0.20%)</title><rect x="811.1" y="2739.0" width="2.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.1" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$doPut (8 samples, 0.20%)</title><rect x="811.1" y="2723.0" width="2.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="814.1" y="2734.0"></text>
</g>
<g>
<title>java/lang/System.nanoTime (1 samples, 0.03%)</title><rect x="811.1" y="2707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="814.1" y="2718.0"></text>
</g>
<g>
<title>JVM_NanoTime (1 samples, 0.03%)</title><rect x="811.1" y="2691.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="814.1" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockInfoManager.unlock (1 samples, 0.03%)</title><rect x="811.4" y="2707.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="814.4" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockInfoManager.get (1 samples, 0.03%)</title><rect x="811.4" y="2691.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="814.4" y="2702.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashMap.get (1 samples, 0.03%)</title><rect x="811.4" y="2675.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.4" y="2686.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashMap.findEntry (1 samples, 0.03%)</title><rect x="811.4" y="2659.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="814.4" y="2670.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.findEntry$ (1 samples, 0.03%)</title><rect x="811.4" y="2643.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="814.4" y="2654.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.findEntry (1 samples, 0.03%)</title><rect x="811.4" y="2627.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="814.4" y="2638.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.findEntry0 (1 samples, 0.03%)</title><rect x="811.4" y="2611.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="814.4" y="2622.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashMap.elemEquals (1 samples, 0.03%)</title><rect x="811.4" y="2595.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="814.4" y="2606.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.elemEquals$ (1 samples, 0.03%)</title><rect x="811.4" y="2579.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="814.4" y="2590.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.elemEquals (1 samples, 0.03%)</title><rect x="811.4" y="2563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.4" y="2574.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals (1 samples, 0.03%)</title><rect x="811.4" y="2547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.4" y="2558.0"></text>
</g>
<g>
<title>scala/collection/mutable/DefaultEntry.key (1 samples, 0.03%)</title><rect x="811.4" y="2531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.4" y="2542.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater$$Lambda$1775.0x000000080216e588.apply (5 samples, 0.13%)</title><rect x="811.7" y="2707.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="814.7" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater.$anonfun$save$1 (5 samples, 0.13%)</title><rect x="811.7" y="2691.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="814.7" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater.saveSerializedValuesToMemoryStore (1 samples, 0.03%)</title><rect x="812.0" y="2675.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="815.0" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.putBytes (1 samples, 0.03%)</title><rect x="812.0" y="2659.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="815.0" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.logInfo (1 samples, 0.03%)</title><rect x="812.0" y="2643.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.0" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (1 samples, 0.03%)</title><rect x="812.0" y="2627.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="815.0" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (1 samples, 0.03%)</title><rect x="812.0" y="2611.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="815.0" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore$$Lambda$1778.0x000000080216f210.apply (1 samples, 0.03%)</title><rect x="812.0" y="2595.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="815.0" y="2606.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.$anonfun$putBytes$2 (1 samples, 0.03%)</title><rect x="812.0" y="2579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="815.0" y="2590.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.bytesToString (1 samples, 0.03%)</title><rect x="812.0" y="2563.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="815.0" y="2574.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.bytesToString (1 samples, 0.03%)</title><rect x="812.0" y="2547.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="815.0" y="2558.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringOps.formatLocal (1 samples, 0.03%)</title><rect x="812.0" y="2531.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="815.0" y="2542.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.formatLocal$ (1 samples, 0.03%)</title><rect x="812.0" y="2515.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="815.0" y="2526.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.formatLocal (1 samples, 0.03%)</title><rect x="812.0" y="2499.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="815.0" y="2510.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.03%)</title><rect x="812.0" y="2483.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="815.0" y="2494.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="812.0" y="2467.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.0" y="2478.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="812.0" y="2451.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="815.0" y="2462.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.03%)</title><rect x="812.0" y="2435.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.0" y="2446.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printFloat (1 samples, 0.03%)</title><rect x="812.0" y="2419.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="815.0" y="2430.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.03%)</title><rect x="812.0" y="2403.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="815.0" y="2414.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.03%)</title><rect x="812.0" y="2387.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="815.0" y="2398.0"></text>
</g>
<g>
<title>java/math/BigDecimal.&lt;init&gt; (1 samples, 0.03%)</title><rect x="812.0" y="2371.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="815.0" y="2382.0"></text>
</g>
<g>
<title>java/math/BigDecimal.divideAndRoundByTenPow (1 samples, 0.03%)</title><rect x="812.0" y="2355.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="815.0" y="2366.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="812.0" y="2339.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="815.0" y="2350.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$getCurrentBlockStatus (1 samples, 0.03%)</title><rect x="812.3" y="2675.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.3" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.getSize (1 samples, 0.03%)</title><rect x="812.3" y="2659.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="815.3" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$reportBlockStatus (2 samples, 0.05%)</title><rect x="812.6" y="2675.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="815.6" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.tryToReportBlockStatus (2 samples, 0.05%)</title><rect x="812.6" y="2659.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="815.6" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMaster.updateBlockInfo (2 samples, 0.05%)</title><rect x="812.6" y="2643.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="815.6" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (2 samples, 0.05%)</title><rect x="812.6" y="2627.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="815.6" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (2 samples, 0.05%)</title><rect x="812.6" y="2611.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="815.6" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.ask (2 samples, 0.05%)</title><rect x="812.6" y="2595.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="815.6" y="2606.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.askAbortable (2 samples, 0.05%)</title><rect x="812.6" y="2579.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="815.6" y="2590.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.askAbortable (2 samples, 0.05%)</title><rect x="812.6" y="2563.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="815.6" y="2574.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="812.6" y="2547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="815.6" y="2558.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postLocalMessage (1 samples, 0.03%)</title><rect x="812.9" y="2547.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="815.9" y="2558.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postMessage (1 samples, 0.03%)</title><rect x="812.9" y="2531.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="815.9" y="2542.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/DedicatedMessageLoop.post (1 samples, 0.03%)</title><rect x="812.9" y="2515.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="815.9" y="2526.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/MessageLoop.setActive (1 samples, 0.03%)</title><rect x="812.9" y="2499.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="815.9" y="2510.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.03%)</title><rect x="812.9" y="2483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.9" y="2494.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.03%)</title><rect x="812.9" y="2467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="815.9" y="2478.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="812.9" y="2451.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.9" y="2462.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="812.9" y="2435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="815.9" y="2446.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="812.9" y="2419.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="815.9" y="2430.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="812.9" y="2403.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="815.9" y="2414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="812.9" y="2387.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="815.9" y="2398.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="812.9" y="2371.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="815.9" y="2382.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="812.9" y="2355.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="815.9" y="2366.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="812.9" y="2339.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="815.9" y="2350.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="812.9" y="2323.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="815.9" y="2334.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="812.9" y="2307.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="815.9" y="2318.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="812.9" y="2291.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="815.9" y="2302.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="812.9" y="2275.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="815.9" y="2286.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="812.9" y="2259.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="815.9" y="2270.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="812.9" y="2243.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="815.9" y="2254.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.getUsedTimeNs (1 samples, 0.03%)</title><rect x="813.2" y="2707.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="816.2" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="813.5" y="2755.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="816.5" y="2766.0"></text>
</g>
<g>
<title>InterpreterRuntime::anewarray(JavaThread*, ConstantPool*, int, int) (1 samples, 0.03%)</title><rect x="813.5" y="2739.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="816.5" y="2750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (1 samples, 0.03%)</title><rect x="813.5" y="2723.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="816.5" y="2734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="813.5" y="2707.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="816.5" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="813.8" y="2739.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="816.8" y="2750.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.map (1 samples, 0.03%)</title><rect x="813.8" y="2723.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="816.8" y="2734.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map$ (1 samples, 0.03%)</title><rect x="813.8" y="2707.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="816.8" y="2718.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map (1 samples, 0.03%)</title><rect x="813.8" y="2691.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="816.8" y="2702.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="813.8" y="2675.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="816.8" y="2686.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="813.8" y="2659.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="816.8" y="2670.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="813.8" y="2643.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="816.8" y="2654.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateInstance (1 samples, 0.03%)</title><rect x="813.8" y="2627.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="816.8" y="2638.0"></text>
</g>
<g>
<title>Unsafe_AllocateInstance (1 samples, 0.03%)</title><rect x="813.8" y="2611.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="816.8" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/Broadcast.destroy (2 samples, 0.05%)</title><rect x="814.1" y="2931.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.1" y="2942.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/Broadcast.destroy (2 samples, 0.05%)</title><rect x="814.1" y="2915.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="817.1" y="2926.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/Broadcast.logInfo (1 samples, 0.03%)</title><rect x="814.1" y="2899.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.1" y="2910.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (1 samples, 0.03%)</title><rect x="814.1" y="2883.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.1" y="2894.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (1 samples, 0.03%)</title><rect x="814.1" y="2867.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="817.1" y="2878.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (1 samples, 0.03%)</title><rect x="814.1" y="2851.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.1" y="2862.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (1 samples, 0.03%)</title><rect x="814.1" y="2835.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.1" y="2846.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (1 samples, 0.03%)</title><rect x="814.1" y="2819.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.1" y="2830.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (1 samples, 0.03%)</title><rect x="814.1" y="2803.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.1" y="2814.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.03%)</title><rect x="814.1" y="2787.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.1" y="2798.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (1 samples, 0.03%)</title><rect x="814.1" y="2771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.1" y="2782.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (1 samples, 0.03%)</title><rect x="814.1" y="2755.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.1" y="2766.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (1 samples, 0.03%)</title><rect x="814.1" y="2739.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="817.1" y="2750.0"></text>
</g>
<g>
<title>org/apache/log4j/PatternLayout.format (1 samples, 0.03%)</title><rect x="814.1" y="2723.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="817.1" y="2734.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternConverter.format (1 samples, 0.03%)</title><rect x="814.1" y="2707.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="817.1" y="2718.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternParser$DatePatternConverter.convert (1 samples, 0.03%)</title><rect x="814.1" y="2691.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="817.1" y="2702.0"></text>
</g>
<g>
<title>java/text/DateFormat.format (1 samples, 0.03%)</title><rect x="814.1" y="2675.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="817.1" y="2686.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (1 samples, 0.03%)</title><rect x="814.1" y="2659.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="817.1" y="2670.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (1 samples, 0.03%)</title><rect x="814.1" y="2643.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.1" y="2654.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.subFormat (1 samples, 0.03%)</title><rect x="814.1" y="2627.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="817.1" y="2638.0"></text>
</g>
<g>
<title>java/util/Calendar.getDisplayName (1 samples, 0.03%)</title><rect x="814.1" y="2611.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.1" y="2622.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getInstance (1 samples, 0.03%)</title><rect x="814.1" y="2595.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.1" y="2606.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getProviderInstance (1 samples, 0.03%)</title><rect x="814.1" y="2579.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="817.1" y="2590.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleProviderAdapter.getAdapter (1 samples, 0.03%)</title><rect x="814.1" y="2563.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.1" y="2574.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.doDestroy (1 samples, 0.03%)</title><rect x="814.4" y="2899.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="817.4" y="2910.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.unpersist (1 samples, 0.03%)</title><rect x="814.4" y="2883.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.4" y="2894.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMaster.removeBroadcast (1 samples, 0.03%)</title><rect x="814.4" y="2867.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="817.4" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (1 samples, 0.03%)</title><rect x="814.4" y="2851.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="817.4" y="2862.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (1 samples, 0.03%)</title><rect x="814.4" y="2835.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="817.4" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.ask (1 samples, 0.03%)</title><rect x="814.4" y="2819.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="817.4" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.askAbortable (1 samples, 0.03%)</title><rect x="814.4" y="2803.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="817.4" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.askAbortable (1 samples, 0.03%)</title><rect x="814.4" y="2787.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.4" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postLocalMessage (1 samples, 0.03%)</title><rect x="814.4" y="2771.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="817.4" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postMessage (1 samples, 0.03%)</title><rect x="814.4" y="2755.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="817.4" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/DedicatedMessageLoop.post (1 samples, 0.03%)</title><rect x="814.4" y="2739.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.4" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/MessageLoop.setActive (1 samples, 0.03%)</title><rect x="814.4" y="2723.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.4" y="2734.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.03%)</title><rect x="814.4" y="2707.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="817.4" y="2718.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.03%)</title><rect x="814.4" y="2691.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.4" y="2702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="814.4" y="2675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.4" y="2686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="814.4" y="2659.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="817.4" y="2670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="814.4" y="2643.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.4" y="2654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="814.4" y="2627.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.4" y="2638.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="814.4" y="2611.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.4" y="2622.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="814.4" y="2595.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="817.4" y="2606.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="814.4" y="2579.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="817.4" y="2590.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="814.4" y="2563.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="817.4" y="2574.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="814.4" y="2547.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="817.4" y="2558.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="814.4" y="2531.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="817.4" y="2542.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="814.4" y="2515.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="817.4" y="2526.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="814.4" y="2499.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="817.4" y="2510.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="814.4" y="2483.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="817.4" y="2494.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="814.4" y="2467.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="817.4" y="2478.0"></text>
</g>
<g>
<title>org/apache/spark/ml/ann/ANNUpdater.compute (24 samples, 0.61%)</title><rect x="814.7" y="2931.0" width="7.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="817.7" y="2942.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.toDenseVector$mcD$sp (16 samples, 0.41%)</title><rect x="814.7" y="2915.0" width="4.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="817.7" y="2926.0"></text>
</g>
<g>
<title>breeze/linalg/Vector.toDenseVector$mcD$sp$ (16 samples, 0.41%)</title><rect x="814.7" y="2899.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.7" y="2910.0"></text>
</g>
<g>
<title>breeze/linalg/Vector.toDenseVector$mcD$sp (16 samples, 0.41%)</title><rect x="814.7" y="2883.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.7" y="2894.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.toDenseVector (16 samples, 0.41%)</title><rect x="814.7" y="2867.0" width="4.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="817.7" y="2878.0"></text>
</g>
<g>
<title>breeze/linalg/Vector.toDenseVector$ (16 samples, 0.41%)</title><rect x="814.7" y="2851.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="817.7" y="2862.0"></text>
</g>
<g>
<title>breeze/linalg/Vector.toDenseVector (16 samples, 0.41%)</title><rect x="814.7" y="2835.0" width="4.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="817.7" y="2846.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.toArray (16 samples, 0.41%)</title><rect x="814.7" y="2819.0" width="4.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="817.7" y="2830.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.toArray (16 samples, 0.41%)</title><rect x="814.7" y="2803.0" width="4.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="817.7" y="2814.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.toArray$mcD$sp (16 samples, 0.41%)</title><rect x="814.7" y="2787.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="817.7" y="2798.0"></text>
</g>
<g>
<title>breeze/util/ArrayUtil$.copyOfRange (16 samples, 0.41%)</title><rect x="814.7" y="2771.0" width="4.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="817.7" y="2782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (16 samples, 0.41%)</title><rect x="814.7" y="2755.0" width="4.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="817.7" y="2766.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (2 samples, 0.05%)</title><rect x="814.7" y="2739.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="817.7" y="2750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="814.7" y="2723.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="817.7" y="2734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="814.7" y="2707.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="817.7" y="2718.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="814.7" y="2691.0" width="0.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="817.7" y="2702.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (4 samples, 0.10%)</title><rect x="815.3" y="2739.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="818.3" y="2750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.10%)</title><rect x="815.3" y="2723.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="818.3" y="2734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.10%)</title><rect x="815.3" y="2707.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="818.3" y="2718.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.08%)</title><rect x="815.3" y="2691.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="818.3" y="2702.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="816.2" y="2691.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="819.2" y="2702.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (1 samples, 0.03%)</title><rect x="816.2" y="2675.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="819.2" y="2686.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="816.2" y="2659.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="819.2" y="2670.0"></text>
</g>
<g>
<title>HeapRegionManager::allocate_humongous(unsigned int) (1 samples, 0.03%)</title><rect x="816.2" y="2643.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="819.2" y="2654.0"></text>
</g>
<g>
<title>HeapRegionManager::find_contiguous_in_free_list(unsigned int) (1 samples, 0.03%)</title><rect x="816.2" y="2627.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="819.2" y="2638.0"></text>
</g>
<g>
<title>java/lang/System.arraycopy (3 samples, 0.08%)</title><rect x="816.5" y="2739.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="819.5" y="2750.0"></text>
</g>
<g>
<title>JVM_ArrayCopy (3 samples, 0.08%)</title><rect x="816.5" y="2723.0" width="0.9" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="819.5" y="2734.0"></text>
</g>
<g>
<title>acl_CopyRight (3 samples, 0.08%)</title><rect x="816.5" y="2707.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="819.5" y="2718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (7 samples, 0.18%)</title><rect x="817.4" y="2739.0" width="2.1" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="820.4" y="2750.0"></text>
</g>
<g>
<title>breeze/linalg/package$.axpy (8 samples, 0.20%)</title><rect x="819.5" y="2915.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="822.5" y="2926.0"></text>
</g>
<g>
<title>breeze/linalg/VectorOps$$anon$187.apply (8 samples, 0.20%)</title><rect x="819.5" y="2899.0" width="2.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="822.5" y="2910.0"></text>
</g>
<g>
<title>breeze/linalg/operators/TernaryUpdateRegistry.apply$ (8 samples, 0.20%)</title><rect x="819.5" y="2883.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="822.5" y="2894.0"></text>
</g>
<g>
<title>breeze/linalg/operators/TernaryUpdateRegistry.apply (8 samples, 0.20%)</title><rect x="819.5" y="2867.0" width="2.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="822.5" y="2878.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (8 samples, 0.20%)</title><rect x="819.5" y="2851.0" width="2.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="822.5" y="2862.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (8 samples, 0.20%)</title><rect x="819.5" y="2835.0" width="2.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="822.5" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/BLAS$.axpy (15 samples, 0.38%)</title><rect x="821.9" y="2931.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="824.9" y="2942.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/BLAS$.axpy (15 samples, 0.38%)</title><rect x="821.9" y="2915.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="824.9" y="2926.0"></text>
</g>
<g>
<title>com/github/fommil/netlib/F2jBLAS.daxpy (14 samples, 0.36%)</title><rect x="821.9" y="2899.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="824.9" y="2910.0"></text>
</g>
<g>
<title>org/netlib/blas/Daxpy.daxpy (14 samples, 0.36%)</title><rect x="821.9" y="2883.0" width="4.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="824.9" y="2894.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/BLAS$.getBLAS (1 samples, 0.03%)</title><rect x="826.1" y="2899.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="829.1" y="2910.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/BLAS$.nativeBLAS (1 samples, 0.03%)</title><rect x="826.1" y="2883.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="829.1" y="2894.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/BLAS$._nativeBLAS (1 samples, 0.03%)</title><rect x="826.1" y="2867.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="829.1" y="2878.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="826.1" y="2851.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="829.1" y="2862.0"></text>
</g>
<g>
<title>InterpreterRuntime::frequency_counter_overflow_inner(JavaThread*, unsigned char*) (1 samples, 0.03%)</title><rect x="826.1" y="2835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="829.1" y="2846.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::event(methodHandle const&amp;, methodHandle const&amp;, int, int, CompLevel, CompiledMethod*, Thread*) (1 samples, 0.03%)</title><rect x="826.1" y="2819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.1" y="2830.0"></text>
</g>
<g>
<title>TieredThresholdPolicy::method_invocation_event(methodHandle const&amp;, methodHandle const&amp;, CompLevel, CompiledMethod*, Thread*) (1 samples, 0.03%)</title><rect x="826.1" y="2803.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="829.1" y="2814.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.03%)</title><rect x="826.1" y="2787.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="829.1" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/DenseVector.copy (11 samples, 0.28%)</title><rect x="826.4" y="2931.0" width="3.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="829.4" y="2942.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/DenseVector.copy (11 samples, 0.28%)</title><rect x="826.4" y="2915.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="829.4" y="2926.0"></text>
</g>
<g>
<title>java/lang/Object.clone (11 samples, 0.28%)</title><rect x="826.4" y="2899.0" width="3.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="829.4" y="2910.0"></text>
</g>
<g>
<title>JVM_Clone (11 samples, 0.28%)</title><rect x="826.4" y="2883.0" width="3.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="829.4" y="2894.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="826.4" y="2867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="829.4" y="2878.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="826.4" y="2851.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="829.4" y="2862.0"></text>
</g>
<g>
<title>acl_CopyRight (10 samples, 0.25%)</title><rect x="826.7" y="2867.0" width="3.0" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="829.7" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/Vectors$.zeros (3 samples, 0.08%)</title><rect x="829.7" y="2931.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="832.7" y="2942.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (3 samples, 0.08%)</title><rect x="829.7" y="2915.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="832.7" y="2926.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.08%)</title><rect x="829.7" y="2899.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="832.7" y="2910.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.08%)</title><rect x="829.7" y="2883.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="832.7" y="2894.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.08%)</title><rect x="829.7" y="2867.0" width="0.9" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="832.7" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.treeAggregate (62 samples, 1.58%)</title><rect x="830.6" y="2931.0" width="18.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="833.6" y="2942.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.withScope (62 samples, 1.58%)</title><rect x="830.6" y="2915.0" width="18.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="833.6" y="2926.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (62 samples, 1.58%)</title><rect x="830.6" y="2899.0" width="18.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="833.6" y="2910.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (61 samples, 1.55%)</title><rect x="830.9" y="2883.0" width="18.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="833.9" y="2894.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$2576.0x00000008024452d0.apply (61 samples, 1.55%)</title><rect x="830.9" y="2867.0" width="18.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="833.9" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$treeAggregate$1 (61 samples, 1.55%)</title><rect x="830.9" y="2851.0" width="18.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="833.9" y="2862.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.clean (7 samples, 0.18%)</title><rect x="830.9" y="2835.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="833.9" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (7 samples, 0.18%)</title><rect x="830.9" y="2819.0" width="2.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="833.9" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (7 samples, 0.18%)</title><rect x="830.9" y="2803.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="833.9" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.ensureSerializable (1 samples, 0.03%)</title><rect x="830.9" y="2787.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="833.9" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.serialize (1 samples, 0.03%)</title><rect x="830.9" y="2771.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="833.9" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializationStream.close (1 samples, 0.03%)</title><rect x="830.9" y="2755.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="833.9" y="2766.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.close (1 samples, 0.03%)</title><rect x="830.9" y="2739.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="833.9" y="2750.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.clear (1 samples, 0.03%)</title><rect x="830.9" y="2723.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="833.9" y="2734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.clear (1 samples, 0.03%)</title><rect x="830.9" y="2707.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="833.9" y="2718.0"></text>
</g>
<g>
<title>java/util/Arrays.fill (1 samples, 0.03%)</title><rect x="830.9" y="2691.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="833.9" y="2702.0"></text>
</g>
<g>
<title>java/util/Arrays.rangeCheck (1 samples, 0.03%)</title><rect x="830.9" y="2675.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="833.9" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.getClassReader (4 samples, 0.10%)</title><rect x="831.2" y="2787.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="834.2" y="2798.0"></text>
</g>
<g>
<title>java/lang/Class.getResourceAsStream (3 samples, 0.08%)</title><rect x="831.2" y="2771.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="834.2" y="2782.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.getResourceAsStream (3 samples, 0.08%)</title><rect x="831.2" y="2755.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="834.2" y="2766.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.getResource (2 samples, 0.05%)</title><rect x="831.2" y="2739.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="834.2" y="2750.0"></text>
</g>
<g>
<title>sbt/classpath/ClasspathUtilities$$anon$1.findResource (2 samples, 0.05%)</title><rect x="831.2" y="2723.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="834.2" y="2734.0"></text>
</g>
<g>
<title>sbt/classpath/FixedResources$class.findResource (2 samples, 0.05%)</title><rect x="831.2" y="2707.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="834.2" y="2718.0"></text>
</g>
<g>
<title>scala/collection/AbstractMap.getOrElse (2 samples, 0.05%)</title><rect x="831.2" y="2691.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.2" y="2702.0"></text>
</g>
<g>
<title>scala/collection/MapLike$class.getOrElse (2 samples, 0.05%)</title><rect x="831.2" y="2675.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="834.2" y="2686.0"></text>
</g>
<g>
<title>sbt/classpath/FixedResources$$anonfun$findResource$1.apply (2 samples, 0.05%)</title><rect x="831.2" y="2659.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="834.2" y="2670.0"></text>
</g>
<g>
<title>sbt/classpath/FixedResources$$anonfun$findResource$1.apply (2 samples, 0.05%)</title><rect x="831.2" y="2643.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="834.2" y="2654.0"></text>
</g>
<g>
<title>sbt/classpath/ClasspathUtilities$$anon$1.sbt$classpath$FixedResources$$super$findResource (2 samples, 0.05%)</title><rect x="831.2" y="2627.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="834.2" y="2638.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findResource (2 samples, 0.05%)</title><rect x="831.2" y="2611.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="834.2" y="2622.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.05%)</title><rect x="831.2" y="2595.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="834.2" y="2606.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (2 samples, 0.05%)</title><rect x="831.2" y="2579.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="834.2" y="2590.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$2.run (2 samples, 0.05%)</title><rect x="831.2" y="2563.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="834.2" y="2574.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$2.run (2 samples, 0.05%)</title><rect x="831.2" y="2547.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="834.2" y="2558.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.findResource (2 samples, 0.05%)</title><rect x="831.2" y="2531.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="834.2" y="2542.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.findResource (2 samples, 0.05%)</title><rect x="831.2" y="2515.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="834.2" y="2526.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.getResource (2 samples, 0.05%)</title><rect x="831.2" y="2499.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="834.2" y="2510.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.checkResource (2 samples, 0.05%)</title><rect x="831.2" y="2483.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="834.2" y="2494.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="831.2" y="2467.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="834.2" y="2478.0"></text>
</g>
<g>
<title>java/net/URL.&lt;init&gt; (1 samples, 0.03%)</title><rect x="831.2" y="2451.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="834.2" y="2462.0"></text>
</g>
<g>
<title>java/net/URL.getURLStreamHandler (1 samples, 0.03%)</title><rect x="831.2" y="2435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="834.2" y="2446.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.03%)</title><rect x="831.2" y="2419.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="834.2" y="2430.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.check (1 samples, 0.03%)</title><rect x="831.5" y="2467.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="834.5" y="2478.0"></text>
</g>
<g>
<title>java/net/URL.openConnection (1 samples, 0.03%)</title><rect x="831.5" y="2451.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="834.5" y="2462.0"></text>
</g>
<g>
<title>sun/net/www/protocol/jar/Handler.openConnection (1 samples, 0.03%)</title><rect x="831.5" y="2435.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="834.5" y="2446.0"></text>
</g>
<g>
<title>sun/net/www/protocol/jar/JarURLConnection.&lt;init&gt; (1 samples, 0.03%)</title><rect x="831.5" y="2419.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="834.5" y="2430.0"></text>
</g>
<g>
<title>java/net/URL.openConnection (1 samples, 0.03%)</title><rect x="831.5" y="2403.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="834.5" y="2414.0"></text>
</g>
<g>
<title>sun/net/www/protocol/file/Handler.openConnection (1 samples, 0.03%)</title><rect x="831.5" y="2387.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="834.5" y="2398.0"></text>
</g>
<g>
<title>sun/net/www/protocol/file/Handler.openConnection (1 samples, 0.03%)</title><rect x="831.5" y="2371.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="834.5" y="2382.0"></text>
</g>
<g>
<title>sun/net/www/protocol/file/Handler.createFileURLConnection (1 samples, 0.03%)</title><rect x="831.5" y="2355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="834.5" y="2366.0"></text>
</g>
<g>
<title>sun/net/www/protocol/file/FileURLConnection.&lt;init&gt; (1 samples, 0.03%)</title><rect x="831.5" y="2339.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="834.5" y="2350.0"></text>
</g>
<g>
<title>sun/net/www/URLConnection.&lt;init&gt; (1 samples, 0.03%)</title><rect x="831.5" y="2323.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="834.5" y="2334.0"></text>
</g>
<g>
<title>sun/net/www/MessageHeader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="831.5" y="2307.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="834.5" y="2318.0"></text>
</g>
<g>
<title>sun/net/www/MessageHeader.grow (1 samples, 0.03%)</title><rect x="831.5" y="2291.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="834.5" y="2302.0"></text>
</g>
<g>
<title>sun/net/www/protocol/jar/JarURLConnection.getInputStream (1 samples, 0.03%)</title><rect x="831.8" y="2739.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="834.8" y="2750.0"></text>
</g>
<g>
<title>sun/net/www/protocol/jar/JarURLConnection.connect (1 samples, 0.03%)</title><rect x="831.8" y="2723.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="834.8" y="2734.0"></text>
</g>
<g>
<title>sun/net/www/protocol/jar/JarFileFactory.get (1 samples, 0.03%)</title><rect x="831.8" y="2707.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="834.8" y="2718.0"></text>
</g>
<g>
<title>sun/net/www/protocol/jar/JarFileFactory.getCachedJarFile (1 samples, 0.03%)</title><rect x="831.8" y="2691.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="834.8" y="2702.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.03%)</title><rect x="831.8" y="2675.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="834.8" y="2686.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.03%)</title><rect x="831.8" y="2659.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="834.8" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.copyStream (1 samples, 0.03%)</title><rect x="832.1" y="2771.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="835.1" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinally (1 samples, 0.03%)</title><rect x="832.1" y="2755.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="835.1" y="2766.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcJ$sp.apply (1 samples, 0.03%)</title><rect x="832.1" y="2739.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="835.1" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$$$Lambda$1828.0x0000000802192860.apply$mcJ$sp (1 samples, 0.03%)</title><rect x="832.1" y="2723.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="835.1" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.$anonfun$copyStream$1 (1 samples, 0.03%)</title><rect x="832.1" y="2707.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="835.1" y="2718.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (1 samples, 0.03%)</title><rect x="832.1" y="2691.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="835.1" y="2702.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="832.1" y="2675.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="835.1" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/util/IndylambdaScalaClosures$.getSerializationProxy (1 samples, 0.03%)</title><rect x="832.4" y="2787.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="835.4" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/util/IndylambdaScalaClosures$.isClosureCandidate$1 (1 samples, 0.03%)</title><rect x="832.4" y="2771.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="835.4" y="2782.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterable.exists (1 samples, 0.03%)</title><rect x="832.4" y="2755.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="835.4" y="2766.0"></text>
</g>
<g>
<title>scala/collection/IterableLike.exists$ (1 samples, 0.03%)</title><rect x="832.4" y="2739.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="835.4" y="2750.0"></text>
</g>
<g>
<title>scala/collection/IterableLike.exists (1 samples, 0.03%)</title><rect x="832.4" y="2723.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="835.4" y="2734.0"></text>
</g>
<g>
<title>scala/collection/convert/Wrappers$JListWrapper.iterator (1 samples, 0.03%)</title><rect x="832.4" y="2707.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="835.4" y="2718.0"></text>
</g>
<g>
<title>scala/collection/convert/WrapAsScala$.deprecated$u0020asScalaIterator (1 samples, 0.03%)</title><rect x="832.4" y="2691.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="835.4" y="2702.0"></text>
</g>
<g>
<title>scala/collection/convert/WrapAsScala.deprecated$u0020asScalaIterator$ (1 samples, 0.03%)</title><rect x="832.4" y="2675.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="835.4" y="2686.0"></text>
</g>
<g>
<title>scala/collection/convert/WrapAsScala.deprecated$u0020asScalaIterator (1 samples, 0.03%)</title><rect x="832.4" y="2659.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="835.4" y="2670.0"></text>
</g>
<g>
<title>scala/collection/convert/WrapAsScala$.asScalaIterator (1 samples, 0.03%)</title><rect x="832.4" y="2643.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="835.4" y="2654.0"></text>
</g>
<g>
<title>scala/collection/convert/LowPriorityWrapAsScala.asScalaIterator$ (1 samples, 0.03%)</title><rect x="832.4" y="2627.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="835.4" y="2638.0"></text>
</g>
<g>
<title>scala/collection/convert/LowPriorityWrapAsScala.asScalaIterator (1 samples, 0.03%)</title><rect x="832.4" y="2611.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="835.4" y="2622.0"></text>
</g>
<g>
<title>scala/collection/convert/Wrappers$JIteratorWrapper.&lt;init&gt; (1 samples, 0.03%)</title><rect x="832.4" y="2595.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="835.4" y="2606.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (1 samples, 0.03%)</title><rect x="832.7" y="2787.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="835.7" y="2798.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (1 samples, 0.03%)</title><rect x="832.7" y="2771.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="835.7" y="2782.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readMethod (1 samples, 0.03%)</title><rect x="832.7" y="2755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="835.7" y="2766.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readCode (1 samples, 0.03%)</title><rect x="832.7" y="2739.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="835.7" y="2750.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUnsignedShort (1 samples, 0.03%)</title><rect x="832.7" y="2723.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="835.7" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.fold (28 samples, 0.71%)</title><rect x="833.0" y="2835.0" width="8.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.0" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.withScope (28 samples, 0.71%)</title><rect x="833.0" y="2819.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.0" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (28 samples, 0.71%)</title><rect x="833.0" y="2803.0" width="8.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="836.0" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (28 samples, 0.71%)</title><rect x="833.0" y="2787.0" width="8.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="836.0" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$2580.0x0000000802445c48.apply (28 samples, 0.71%)</title><rect x="833.0" y="2771.0" width="8.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="836.0" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$fold$1 (28 samples, 0.71%)</title><rect x="833.0" y="2755.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="836.0" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.clean (4 samples, 0.10%)</title><rect x="833.0" y="2739.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="836.0" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (4 samples, 0.10%)</title><rect x="833.0" y="2723.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="836.0" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (4 samples, 0.10%)</title><rect x="833.0" y="2707.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.0" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.getClassReader (2 samples, 0.05%)</title><rect x="833.0" y="2691.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="836.0" y="2702.0"></text>
</g>
<g>
<title>java/lang/Class.getResourceAsStream (1 samples, 0.03%)</title><rect x="833.0" y="2675.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="836.0" y="2686.0"></text>
</g>
<g>
<title>java/lang/Class.resolveName (1 samples, 0.03%)</title><rect x="833.0" y="2659.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.0" y="2670.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.03%)</title><rect x="833.0" y="2643.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="836.0" y="2654.0"></text>
</g>
<g>
<title>java/lang/AbstractStringBuilder.append (1 samples, 0.03%)</title><rect x="833.0" y="2627.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="836.0" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.copyStream (1 samples, 0.03%)</title><rect x="833.3" y="2675.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="836.3" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinally (1 samples, 0.03%)</title><rect x="833.3" y="2659.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="836.3" y="2670.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcJ$sp.apply (1 samples, 0.03%)</title><rect x="833.3" y="2643.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="836.3" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$$$Lambda$1828.0x0000000802192860.apply$mcJ$sp (1 samples, 0.03%)</title><rect x="833.3" y="2627.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="836.3" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.$anonfun$copyStream$1 (1 samples, 0.03%)</title><rect x="833.3" y="2611.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="836.3" y="2622.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (1 samples, 0.03%)</title><rect x="833.3" y="2595.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="836.3" y="2606.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (1 samples, 0.03%)</title><rect x="833.3" y="2579.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="836.3" y="2590.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (1 samples, 0.03%)</title><rect x="833.3" y="2563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="836.3" y="2574.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (1 samples, 0.03%)</title><rect x="833.3" y="2547.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="836.3" y="2558.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="833.3" y="2531.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="836.3" y="2542.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libz.so.1.2.11 (1 samples, 0.03%)</title><rect x="833.3" y="2515.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="836.3" y="2526.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (2 samples, 0.05%)</title><rect x="833.6" y="2691.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="836.6" y="2702.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (2 samples, 0.05%)</title><rect x="833.6" y="2675.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="836.6" y="2686.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readMethod (2 samples, 0.05%)</title><rect x="833.6" y="2659.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="836.6" y="2670.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readCode (1 samples, 0.03%)</title><rect x="833.6" y="2643.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="836.6" y="2654.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.03%)</title><rect x="833.6" y="2627.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="836.6" y="2638.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (1 samples, 0.03%)</title><rect x="833.9" y="2643.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="836.9" y="2654.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (1 samples, 0.03%)</title><rect x="833.9" y="2627.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="836.9" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.runJob (24 samples, 0.61%)</title><rect x="834.2" y="2739.0" width="7.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.2" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.runJob (24 samples, 0.61%)</title><rect x="834.2" y="2723.0" width="7.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="837.2" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.clean (17 samples, 0.43%)</title><rect x="834.2" y="2707.0" width="5.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="837.2" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (17 samples, 0.43%)</title><rect x="834.2" y="2691.0" width="5.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="837.2" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (17 samples, 0.43%)</title><rect x="834.2" y="2675.0" width="5.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="837.2" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.ensureSerializable (1 samples, 0.03%)</title><rect x="834.2" y="2659.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="837.2" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.serialize (1 samples, 0.03%)</title><rect x="834.2" y="2643.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="837.2" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializationStream.writeObject (1 samples, 0.03%)</title><rect x="834.2" y="2627.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="837.2" y="2638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.03%)</title><rect x="834.2" y="2611.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="837.2" y="2622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="834.2" y="2595.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="837.2" y="2606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="834.2" y="2579.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="837.2" y="2590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="834.2" y="2563.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="837.2" y="2574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="834.2" y="2547.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="837.2" y="2558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="834.2" y="2531.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="837.2" y="2542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="834.2" y="2515.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="837.2" y="2526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.03%)</title><rect x="834.2" y="2499.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="837.2" y="2510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeHandle (1 samples, 0.03%)</title><rect x="834.2" y="2483.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="837.2" y="2494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeInt (1 samples, 0.03%)</title><rect x="834.2" y="2467.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="837.2" y="2478.0"></text>
</g>
<g>
<title>java/io/Bits.putInt (1 samples, 0.03%)</title><rect x="834.2" y="2451.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="837.2" y="2462.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.getClassReader (11 samples, 0.28%)</title><rect x="834.5" y="2659.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="837.5" y="2670.0"></text>
</g>
<g>
<title>java/lang/Class.getResourceAsStream (1 samples, 0.03%)</title><rect x="834.5" y="2643.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="837.5" y="2654.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.getResourceAsStream (1 samples, 0.03%)</title><rect x="834.5" y="2627.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="837.5" y="2638.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.getResource (1 samples, 0.03%)</title><rect x="834.5" y="2611.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="837.5" y="2622.0"></text>
</g>
<g>
<title>sbt/classpath/ClasspathUtilities$$anon$1.findResource (1 samples, 0.03%)</title><rect x="834.5" y="2595.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="837.5" y="2606.0"></text>
</g>
<g>
<title>sbt/classpath/FixedResources$class.findResource (1 samples, 0.03%)</title><rect x="834.5" y="2579.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="837.5" y="2590.0"></text>
</g>
<g>
<title>scala/collection/AbstractMap.getOrElse (1 samples, 0.03%)</title><rect x="834.5" y="2563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="837.5" y="2574.0"></text>
</g>
<g>
<title>scala/collection/MapLike$class.getOrElse (1 samples, 0.03%)</title><rect x="834.5" y="2547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="837.5" y="2558.0"></text>
</g>
<g>
<title>sbt/classpath/FixedResources$$anonfun$findResource$1.apply (1 samples, 0.03%)</title><rect x="834.5" y="2531.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="837.5" y="2542.0"></text>
</g>
<g>
<title>sbt/classpath/FixedResources$$anonfun$findResource$1.apply (1 samples, 0.03%)</title><rect x="834.5" y="2515.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="837.5" y="2526.0"></text>
</g>
<g>
<title>sbt/classpath/ClasspathUtilities$$anon$1.sbt$classpath$FixedResources$$super$findResource (1 samples, 0.03%)</title><rect x="834.5" y="2499.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="837.5" y="2510.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findResource (1 samples, 0.03%)</title><rect x="834.5" y="2483.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="837.5" y="2494.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="834.5" y="2467.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="837.5" y="2478.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.03%)</title><rect x="834.5" y="2451.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="837.5" y="2462.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$2.run (1 samples, 0.03%)</title><rect x="834.5" y="2435.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="837.5" y="2446.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$2.run (1 samples, 0.03%)</title><rect x="834.5" y="2419.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.5" y="2430.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.findResource (1 samples, 0.03%)</title><rect x="834.5" y="2403.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="837.5" y="2414.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.findResource (1 samples, 0.03%)</title><rect x="834.5" y="2387.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.5" y="2398.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$JarLoader.getResource (1 samples, 0.03%)</title><rect x="834.5" y="2371.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.5" y="2382.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getJarEntry (1 samples, 0.03%)</title><rect x="834.5" y="2355.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="837.5" y="2366.0"></text>
</g>
<g>
<title>java/util/jar/JarFile.getEntry (1 samples, 0.03%)</title><rect x="834.5" y="2339.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="837.5" y="2350.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile.getEntry (1 samples, 0.03%)</title><rect x="834.5" y="2323.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="837.5" y="2334.0"></text>
</g>
<g>
<title>java/util/zip/ZipFile$Source.getEntryPos (1 samples, 0.03%)</title><rect x="834.5" y="2307.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="837.5" y="2318.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.copyStream (7 samples, 0.18%)</title><rect x="834.8" y="2643.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="837.8" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinally (7 samples, 0.18%)</title><rect x="834.8" y="2627.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="837.8" y="2638.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcJ$sp.apply (7 samples, 0.18%)</title><rect x="834.8" y="2611.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="837.8" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$$$Lambda$1828.0x0000000802192860.apply$mcJ$sp (7 samples, 0.18%)</title><rect x="834.8" y="2595.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="837.8" y="2606.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.$anonfun$copyStream$1 (7 samples, 0.18%)</title><rect x="834.8" y="2579.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="837.8" y="2590.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (1 samples, 0.03%)</title><rect x="834.8" y="2563.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="837.8" y="2574.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="834.8" y="2547.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="837.8" y="2558.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (6 samples, 0.15%)</title><rect x="835.1" y="2563.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="838.1" y="2574.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (6 samples, 0.15%)</title><rect x="835.1" y="2547.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="838.1" y="2558.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (6 samples, 0.15%)</title><rect x="835.1" y="2531.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="838.1" y="2542.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (6 samples, 0.15%)</title><rect x="835.1" y="2515.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="838.1" y="2526.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflateBytesBytes (6 samples, 0.15%)</title><rect x="835.1" y="2499.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="838.1" y="2510.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libz.so.1.2.11 (4 samples, 0.10%)</title><rect x="835.1" y="2483.0" width="1.2" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="838.1" y="2494.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.05%)</title><rect x="836.3" y="2483.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="839.3" y="2494.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libz.so.1.2.11 (1 samples, 0.03%)</title><rect x="836.3" y="2467.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="839.3" y="2478.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="836.6" y="2467.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="839.6" y="2478.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.&lt;init&gt; (3 samples, 0.08%)</title><rect x="836.9" y="2643.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="839.9" y="2654.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.&lt;init&gt; (2 samples, 0.05%)</title><rect x="836.9" y="2627.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="839.9" y="2638.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.&lt;init&gt; (2 samples, 0.05%)</title><rect x="836.9" y="2611.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="839.9" y="2622.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.&lt;init&gt; (2 samples, 0.05%)</title><rect x="836.9" y="2595.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="839.9" y="2606.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUnsignedShort (1 samples, 0.03%)</title><rect x="837.2" y="2579.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="840.2" y="2590.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readStream (1 samples, 0.03%)</title><rect x="837.5" y="2627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="840.5" y="2638.0"></text>
</g>
<g>
<title>java/io/ByteArrayOutputStream.write (1 samples, 0.03%)</title><rect x="837.5" y="2611.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="840.5" y="2622.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (5 samples, 0.13%)</title><rect x="837.8" y="2659.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="840.8" y="2670.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (5 samples, 0.13%)</title><rect x="837.8" y="2643.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="840.8" y="2654.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readMethod (5 samples, 0.13%)</title><rect x="837.8" y="2627.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="840.8" y="2638.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readCode (5 samples, 0.13%)</title><rect x="837.8" y="2611.0" width="1.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="840.8" y="2622.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readStackMapFrame (1 samples, 0.03%)</title><rect x="838.1" y="2595.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="841.1" y="2606.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUTF8 (3 samples, 0.08%)</title><rect x="838.4" y="2595.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="841.4" y="2606.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (3 samples, 0.08%)</title><rect x="838.4" y="2579.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="841.4" y="2590.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (3 samples, 0.08%)</title><rect x="838.4" y="2563.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="841.4" y="2574.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.getCallSite (1 samples, 0.03%)</title><rect x="839.3" y="2707.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="842.3" y="2718.0"></text>
</g>
<g>
<title>scala/Option.getOrElse (1 samples, 0.03%)</title><rect x="839.3" y="2691.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="842.3" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext$$Lambda$1784.0x000000080216cb00.apply (1 samples, 0.03%)</title><rect x="839.3" y="2675.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="842.3" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.$anonfun$getCallSite$1 (1 samples, 0.03%)</title><rect x="839.3" y="2659.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="842.3" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.callSite$2 (1 samples, 0.03%)</title><rect x="839.3" y="2643.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="842.3" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.callSite$lzycompute$1 (1 samples, 0.03%)</title><rect x="839.3" y="2627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="842.3" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.getCallSite (1 samples, 0.03%)</title><rect x="839.3" y="2611.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="842.3" y="2622.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.foreach (1 samples, 0.03%)</title><rect x="839.3" y="2595.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="842.3" y="2606.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (1 samples, 0.03%)</title><rect x="839.3" y="2579.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="842.3" y="2590.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.stopped (1 samples, 0.03%)</title><rect x="839.6" y="2707.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="842.6" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.doCheckpoint (3 samples, 0.08%)</title><rect x="839.9" y="2707.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="842.9" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (3 samples, 0.08%)</title><rect x="839.9" y="2691.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="842.9" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope.toJson (2 samples, 0.05%)</title><rect x="839.9" y="2675.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="842.9" y="2686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.writeValueAsString (2 samples, 0.05%)</title><rect x="839.9" y="2659.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="842.9" y="2670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._configAndWriteValue (2 samples, 0.05%)</title><rect x="839.9" y="2643.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="842.9" y="2654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._serializerProvider (1 samples, 0.03%)</title><rect x="839.9" y="2627.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="842.9" y="2638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider$Impl.createInstance (1 samples, 0.03%)</title><rect x="839.9" y="2611.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="842.9" y="2622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.serializeValue (1 samples, 0.03%)</title><rect x="840.2" y="2627.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="843.2" y="2638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/DefaultSerializerProvider._serialize (1 samples, 0.03%)</title><rect x="840.2" y="2611.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="843.2" y="2622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanSerializer.serialize (1 samples, 0.03%)</title><rect x="840.2" y="2595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="843.2" y="2606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.serializeFields (1 samples, 0.03%)</title><rect x="840.2" y="2579.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="843.2" y="2590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ser/BeanPropertyWriter.serializeAsField (1 samples, 0.03%)</title><rect x="840.2" y="2563.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="843.2" y="2574.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="840.2" y="2547.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="843.2" y="2558.0"></text>
</g>
<g>
<title>scala/Option.map (1 samples, 0.03%)</title><rect x="840.5" y="2675.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="843.5" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$$$Lambda$1577.0x0000000802086308.apply (1 samples, 0.03%)</title><rect x="840.5" y="2659.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="843.5" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.$anonfun$withScope$6 (1 samples, 0.03%)</title><rect x="840.5" y="2643.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="843.5" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.fromJson (1 samples, 0.03%)</title><rect x="840.5" y="2627.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.5" y="2638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (1 samples, 0.03%)</title><rect x="840.5" y="2611.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="843.5" y="2622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (1 samples, 0.03%)</title><rect x="840.5" y="2595.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="843.5" y="2606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (1 samples, 0.03%)</title><rect x="840.5" y="2579.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="843.5" y="2590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (1 samples, 0.03%)</title><rect x="840.5" y="2563.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="843.5" y="2574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (1 samples, 0.03%)</title><rect x="840.5" y="2547.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="843.5" y="2558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (1 samples, 0.03%)</title><rect x="840.5" y="2531.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="843.5" y="2542.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (1 samples, 0.03%)</title><rect x="840.5" y="2515.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="843.5" y="2526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeWithErrorWrapping (1 samples, 0.03%)</title><rect x="840.5" y="2499.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.5" y="2510.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/SettableBeanProperty.deserialize (1 samples, 0.03%)</title><rect x="840.5" y="2483.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="843.5" y="2494.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StringDeserializer.deserialize (1 samples, 0.03%)</title><rect x="840.5" y="2467.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="843.5" y="2478.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StringDeserializer.deserialize (1 samples, 0.03%)</title><rect x="840.5" y="2451.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="843.5" y="2462.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.runJob (2 samples, 0.05%)</title><rect x="840.8" y="2707.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="843.8" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.logInfo (1 samples, 0.03%)</title><rect x="840.8" y="2691.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="843.8" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (1 samples, 0.03%)</title><rect x="840.8" y="2675.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.8" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (1 samples, 0.03%)</title><rect x="840.8" y="2659.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="843.8" y="2670.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (1 samples, 0.03%)</title><rect x="840.8" y="2643.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="843.8" y="2654.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (1 samples, 0.03%)</title><rect x="840.8" y="2627.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="843.8" y="2638.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (1 samples, 0.03%)</title><rect x="840.8" y="2611.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="843.8" y="2622.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (1 samples, 0.03%)</title><rect x="840.8" y="2595.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="843.8" y="2606.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.03%)</title><rect x="840.8" y="2579.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="843.8" y="2590.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (1 samples, 0.03%)</title><rect x="840.8" y="2563.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="843.8" y="2574.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (1 samples, 0.03%)</title><rect x="840.8" y="2547.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="843.8" y="2558.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (1 samples, 0.03%)</title><rect x="840.8" y="2531.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="843.8" y="2542.0"></text>
</g>
<g>
<title>org/apache/log4j/PatternLayout.format (1 samples, 0.03%)</title><rect x="840.8" y="2515.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="843.8" y="2526.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternConverter.format (1 samples, 0.03%)</title><rect x="840.8" y="2499.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="843.8" y="2510.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/PatternParser$DatePatternConverter.convert (1 samples, 0.03%)</title><rect x="840.8" y="2483.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="843.8" y="2494.0"></text>
</g>
<g>
<title>java/text/DateFormat.format (1 samples, 0.03%)</title><rect x="840.8" y="2467.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="843.8" y="2478.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (1 samples, 0.03%)</title><rect x="840.8" y="2451.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="843.8" y="2462.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.format (1 samples, 0.03%)</title><rect x="840.8" y="2435.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="843.8" y="2446.0"></text>
</g>
<g>
<title>java/text/SimpleDateFormat.subFormat (1 samples, 0.03%)</title><rect x="840.8" y="2419.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="843.8" y="2430.0"></text>
</g>
<g>
<title>java/util/Calendar.getDisplayName (1 samples, 0.03%)</title><rect x="840.8" y="2403.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="843.8" y="2414.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getInstance (1 samples, 0.03%)</title><rect x="840.8" y="2387.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="843.8" y="2398.0"></text>
</g>
<g>
<title>java/text/DateFormatSymbols.getProviderInstance (1 samples, 0.03%)</title><rect x="840.8" y="2371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="843.8" y="2382.0"></text>
</g>
<g>
<title>sun/util/locale/provider/LocaleProviderAdapter.getAdapter (1 samples, 0.03%)</title><rect x="840.8" y="2355.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="843.8" y="2366.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.submitJob (1 samples, 0.03%)</title><rect x="841.1" y="2691.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="844.1" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/util/EventLoop.post (1 samples, 0.03%)</title><rect x="841.1" y="2675.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="844.1" y="2686.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="841.1" y="2659.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="844.1" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.mapPartitions (25 samples, 0.64%)</title><rect x="841.4" y="2835.0" width="7.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.4" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.withScope (25 samples, 0.64%)</title><rect x="841.4" y="2819.0" width="7.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="844.4" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (25 samples, 0.64%)</title><rect x="841.4" y="2803.0" width="7.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="844.4" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (25 samples, 0.64%)</title><rect x="841.4" y="2787.0" width="7.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="844.4" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$1844.0x00000008021a4a88.apply (22 samples, 0.56%)</title><rect x="841.4" y="2771.0" width="6.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="844.4" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$mapPartitions$1 (22 samples, 0.56%)</title><rect x="841.4" y="2755.0" width="6.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.4" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.clean (20 samples, 0.51%)</title><rect x="841.4" y="2739.0" width="6.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="844.4" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (20 samples, 0.51%)</title><rect x="841.4" y="2723.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="844.4" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (20 samples, 0.51%)</title><rect x="841.4" y="2707.0" width="6.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="844.4" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.ensureSerializable (1 samples, 0.03%)</title><rect x="841.4" y="2691.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="844.4" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.serialize (1 samples, 0.03%)</title><rect x="841.4" y="2675.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="844.4" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializationStream.writeObject (1 samples, 0.03%)</title><rect x="841.4" y="2659.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="844.4" y="2670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.03%)</title><rect x="841.4" y="2643.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="844.4" y="2654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="841.4" y="2627.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="844.4" y="2638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="841.4" y="2611.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="844.4" y="2622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="841.4" y="2595.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="844.4" y="2606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="841.4" y="2579.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="844.4" y="2590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="841.4" y="2563.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="844.4" y="2574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="841.4" y="2547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="844.4" y="2558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="841.4" y="2531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="844.4" y="2542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="841.4" y="2515.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="844.4" y="2526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="841.4" y="2499.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="844.4" y="2510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="841.4" y="2483.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="844.4" y="2494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="841.4" y="2467.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="844.4" y="2478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="841.4" y="2451.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="844.4" y="2462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="841.4" y="2435.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="844.4" y="2446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="841.4" y="2419.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="844.4" y="2430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="841.4" y="2403.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="844.4" y="2414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="841.4" y="2387.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="844.4" y="2398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="841.4" y="2371.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="844.4" y="2382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="841.4" y="2355.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="844.4" y="2366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="841.4" y="2339.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="844.4" y="2350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="841.4" y="2323.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="844.4" y="2334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="841.4" y="2307.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="844.4" y="2318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="841.4" y="2291.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="844.4" y="2302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="841.4" y="2275.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="844.4" y="2286.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="841.4" y="2259.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="844.4" y="2270.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="841.4" y="2243.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="844.4" y="2254.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="841.4" y="2227.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="844.4" y="2238.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="841.4" y="2211.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="844.4" y="2222.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="841.4" y="2195.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="844.4" y="2206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="841.4" y="2179.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="844.4" y="2190.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.getClassReader (5 samples, 0.13%)</title><rect x="841.7" y="2691.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="844.7" y="2702.0"></text>
</g>
<g>
<title>java/lang/Class.getResourceAsStream (1 samples, 0.03%)</title><rect x="841.7" y="2675.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="844.7" y="2686.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.getResourceAsStream (1 samples, 0.03%)</title><rect x="841.7" y="2659.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="844.7" y="2670.0"></text>
</g>
<g>
<title>java/lang/ClassLoader.getResource (1 samples, 0.03%)</title><rect x="841.7" y="2643.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="844.7" y="2654.0"></text>
</g>
<g>
<title>sbt/classpath/ClasspathUtilities$$anon$1.findResource (1 samples, 0.03%)</title><rect x="841.7" y="2627.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="844.7" y="2638.0"></text>
</g>
<g>
<title>sbt/classpath/FixedResources$class.findResource (1 samples, 0.03%)</title><rect x="841.7" y="2611.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="844.7" y="2622.0"></text>
</g>
<g>
<title>scala/collection/AbstractMap.getOrElse (1 samples, 0.03%)</title><rect x="841.7" y="2595.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="844.7" y="2606.0"></text>
</g>
<g>
<title>scala/collection/MapLike$class.getOrElse (1 samples, 0.03%)</title><rect x="841.7" y="2579.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="844.7" y="2590.0"></text>
</g>
<g>
<title>sbt/classpath/FixedResources$$anonfun$findResource$1.apply (1 samples, 0.03%)</title><rect x="841.7" y="2563.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="844.7" y="2574.0"></text>
</g>
<g>
<title>sbt/classpath/FixedResources$$anonfun$findResource$1.apply (1 samples, 0.03%)</title><rect x="841.7" y="2547.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="844.7" y="2558.0"></text>
</g>
<g>
<title>sbt/classpath/ClasspathUtilities$$anon$1.sbt$classpath$FixedResources$$super$findResource (1 samples, 0.03%)</title><rect x="841.7" y="2531.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="844.7" y="2542.0"></text>
</g>
<g>
<title>java/net/URLClassLoader.findResource (1 samples, 0.03%)</title><rect x="841.7" y="2515.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="844.7" y="2526.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.03%)</title><rect x="841.7" y="2499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="844.7" y="2510.0"></text>
</g>
<g>
<title>java/security/AccessController.executePrivileged (1 samples, 0.03%)</title><rect x="841.7" y="2483.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="844.7" y="2494.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$2.run (1 samples, 0.03%)</title><rect x="841.7" y="2467.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="844.7" y="2478.0"></text>
</g>
<g>
<title>java/net/URLClassLoader$2.run (1 samples, 0.03%)</title><rect x="841.7" y="2451.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="844.7" y="2462.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath.findResource (1 samples, 0.03%)</title><rect x="841.7" y="2435.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="844.7" y="2446.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$FileLoader.findResource (1 samples, 0.03%)</title><rect x="841.7" y="2419.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="844.7" y="2430.0"></text>
</g>
<g>
<title>jdk/internal/loader/URLClassPath$FileLoader.getResource (1 samples, 0.03%)</title><rect x="841.7" y="2403.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="844.7" y="2414.0"></text>
</g>
<g>
<title>java/io/File.exists (1 samples, 0.03%)</title><rect x="841.7" y="2387.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="844.7" y="2398.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.hasBooleanAttributes (1 samples, 0.03%)</title><rect x="841.7" y="2371.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="844.7" y="2382.0"></text>
</g>
<g>
<title>java/io/UnixFileSystem.getBooleanAttributes0 (1 samples, 0.03%)</title><rect x="841.7" y="2355.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="844.7" y="2366.0"></text>
</g>
<g>
<title>JNU_ReleaseStringPlatformChars (1 samples, 0.03%)</title><rect x="841.7" y="2339.0" width="0.3" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="844.7" y="2350.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.copyStream (4 samples, 0.10%)</title><rect x="842.0" y="2675.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="845.0" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinally (4 samples, 0.10%)</title><rect x="842.0" y="2659.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="845.0" y="2670.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcJ$sp.apply (4 samples, 0.10%)</title><rect x="842.0" y="2643.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="845.0" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$$$Lambda$1828.0x0000000802192860.apply$mcJ$sp (4 samples, 0.10%)</title><rect x="842.0" y="2627.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="845.0" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.$anonfun$copyStream$1 (4 samples, 0.10%)</title><rect x="842.0" y="2611.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.0" y="2622.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (4 samples, 0.10%)</title><rect x="842.0" y="2595.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.0" y="2606.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (4 samples, 0.10%)</title><rect x="842.0" y="2579.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="845.0" y="2590.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (4 samples, 0.10%)</title><rect x="842.0" y="2563.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="845.0" y="2574.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (4 samples, 0.10%)</title><rect x="842.0" y="2547.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="845.0" y="2558.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflateBytesBytes (4 samples, 0.10%)</title><rect x="842.0" y="2531.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="845.0" y="2542.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libz.so.1.2.11 (3 samples, 0.08%)</title><rect x="842.0" y="2515.0" width="0.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="845.0" y="2526.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="842.9" y="2515.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="845.9" y="2526.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="842.9" y="2499.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="845.9" y="2510.0"></text>
</g>
<g>
<title>org/apache/spark/util/IndylambdaScalaClosures$.getSerializationProxy (1 samples, 0.03%)</title><rect x="843.2" y="2691.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="846.2" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/util/IndylambdaScalaClosures$.isClosureCandidate$1 (1 samples, 0.03%)</title><rect x="843.2" y="2675.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="846.2" y="2686.0"></text>
</g>
<g>
<title>org/apache/commons/lang3/ClassUtils.getAllInterfaces (1 samples, 0.03%)</title><rect x="843.2" y="2659.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="846.2" y="2670.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="843.2" y="2643.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="846.2" y="2654.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (13 samples, 0.33%)</title><rect x="843.5" y="2691.0" width="3.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="846.5" y="2702.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (13 samples, 0.33%)</title><rect x="843.5" y="2675.0" width="3.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="846.5" y="2686.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.03%)</title><rect x="843.5" y="2659.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="846.5" y="2670.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="843.5" y="2643.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="846.5" y="2654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="843.5" y="2627.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="846.5" y="2638.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="843.5" y="2611.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="846.5" y="2622.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readMethod (12 samples, 0.31%)</title><rect x="843.8" y="2659.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="846.8" y="2670.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readCode (10 samples, 0.25%)</title><rect x="843.8" y="2643.0" width="3.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="846.8" y="2654.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readConst (5 samples, 0.13%)</title><rect x="844.4" y="2627.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="847.4" y="2638.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readStackMapFrame (1 samples, 0.03%)</title><rect x="845.9" y="2627.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="848.9" y="2638.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readVerificationTypeInfo (1 samples, 0.03%)</title><rect x="845.9" y="2611.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="848.9" y="2622.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUTF8 (1 samples, 0.03%)</title><rect x="845.9" y="2595.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="848.9" y="2606.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/MethodVisitor.visitInsn (1 samples, 0.03%)</title><rect x="846.2" y="2627.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="849.2" y="2638.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/MethodVisitor.visitMethodInsn (1 samples, 0.03%)</title><rect x="846.5" y="2627.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="849.5" y="2638.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUTF8 (2 samples, 0.05%)</title><rect x="846.8" y="2643.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="849.8" y="2654.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (2 samples, 0.05%)</title><rect x="846.8" y="2627.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="849.8" y="2638.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (2 samples, 0.05%)</title><rect x="846.8" y="2611.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="849.8" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/MapPartitionsRDD.&lt;init&gt; (2 samples, 0.05%)</title><rect x="847.4" y="2739.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="850.4" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.&lt;init&gt; (2 samples, 0.05%)</title><rect x="847.4" y="2723.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="850.4" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.&lt;init&gt; (2 samples, 0.05%)</title><rect x="847.4" y="2707.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="850.4" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.getCallSite (2 samples, 0.05%)</title><rect x="847.4" y="2691.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="850.4" y="2702.0"></text>
</g>
<g>
<title>scala/Option.getOrElse (2 samples, 0.05%)</title><rect x="847.4" y="2675.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="850.4" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext$$Lambda$1784.0x000000080216cb00.apply (2 samples, 0.05%)</title><rect x="847.4" y="2659.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="850.4" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.$anonfun$getCallSite$1 (2 samples, 0.05%)</title><rect x="847.4" y="2643.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="850.4" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.callSite$2 (2 samples, 0.05%)</title><rect x="847.4" y="2627.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="850.4" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.callSite$lzycompute$1 (2 samples, 0.05%)</title><rect x="847.4" y="2611.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="850.4" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.getCallSite (2 samples, 0.05%)</title><rect x="847.4" y="2595.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="850.4" y="2606.0"></text>
</g>
<g>
<title>java/lang/Thread.getStackTrace (2 samples, 0.05%)</title><rect x="847.4" y="2579.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="850.4" y="2590.0"></text>
</g>
<g>
<title>java/lang/Throwable.getStackTrace (2 samples, 0.05%)</title><rect x="847.4" y="2563.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="850.4" y="2574.0"></text>
</g>
<g>
<title>java/lang/Throwable.getOurStackTrace (2 samples, 0.05%)</title><rect x="847.4" y="2547.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="850.4" y="2558.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.of (2 samples, 0.05%)</title><rect x="847.4" y="2531.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="850.4" y="2542.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.initStackTraceElements (2 samples, 0.05%)</title><rect x="847.4" y="2515.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="850.4" y="2526.0"></text>
</g>
<g>
<title>JVM_InitStackTraceElementArray (2 samples, 0.05%)</title><rect x="847.4" y="2499.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="850.4" y="2510.0"></text>
</g>
<g>
<title>java_lang_Throwable::get_stack_trace_elements(Handle, objArrayHandle, Thread*) (2 samples, 0.05%)</title><rect x="847.4" y="2483.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="850.4" y="2494.0"></text>
</g>
<g>
<title>java_lang_StackTraceElement::fill_in(Handle, InstanceKlass*, methodHandle const&amp;, int, int, Symbol*, Thread*) (2 samples, 0.05%)</title><rect x="847.4" y="2467.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="850.4" y="2478.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (2 samples, 0.05%)</title><rect x="847.4" y="2451.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="850.4" y="2462.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short const*, int, Thread*) (1 samples, 0.03%)</title><rect x="847.4" y="2435.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="850.4" y="2446.0"></text>
</g>
<g>
<title>StringTable::do_lookup(unsigned short const*, int, unsigned long) (1 samples, 0.03%)</title><rect x="847.4" y="2419.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="850.4" y="2430.0"></text>
</g>
<g>
<title>Symbol::as_unicode(int&amp;) const (1 samples, 0.03%)</title><rect x="847.7" y="2435.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="850.7" y="2446.0"></text>
</g>
<g>
<title>scala/Option.map (3 samples, 0.08%)</title><rect x="848.0" y="2771.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="851.0" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$$$Lambda$1577.0x0000000802086308.apply (3 samples, 0.08%)</title><rect x="848.0" y="2755.0" width="1.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="851.0" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.$anonfun$withScope$6 (3 samples, 0.08%)</title><rect x="848.0" y="2739.0" width="1.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="851.0" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.fromJson (3 samples, 0.08%)</title><rect x="848.0" y="2723.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="851.0" y="2734.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (3 samples, 0.08%)</title><rect x="848.0" y="2707.0" width="1.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="851.0" y="2718.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper.readValue (2 samples, 0.05%)</title><rect x="848.0" y="2691.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="851.0" y="2702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/ObjectMapper._readMapAndClose (2 samples, 0.05%)</title><rect x="848.0" y="2675.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="851.0" y="2686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserialize (2 samples, 0.05%)</title><rect x="848.0" y="2659.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="851.0" y="2670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer.deserializeFromObject (2 samples, 0.05%)</title><rect x="848.0" y="2643.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="851.0" y="2654.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializerBase.deserializeFromObjectUsingNonDefault (2 samples, 0.05%)</title><rect x="848.0" y="2627.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="851.0" y="2638.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/BeanDeserializer._deserializeUsingPropertyBased (2 samples, 0.05%)</title><rect x="848.0" y="2611.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="851.0" y="2622.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyBasedCreator.build (2 samples, 0.05%)</title><rect x="848.0" y="2595.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="851.0" y="2606.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/ValueInstantiator.createFromObjectWith (2 samples, 0.05%)</title><rect x="848.0" y="2579.0" width="0.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="851.0" y="2590.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer.getParameters (1 samples, 0.03%)</title><rect x="848.0" y="2563.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="851.0" y="2574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/impl/PropertyValueBuffer._findMissing (1 samples, 0.03%)</title><rect x="848.0" y="2547.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="851.0" y="2558.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.createFromObjectWith (1 samples, 0.03%)</title><rect x="848.3" y="2563.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="851.3" y="2574.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.call (1 samples, 0.03%)</title><rect x="848.3" y="2547.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="851.3" y="2558.0"></text>
</g>
<g>
<title>java/lang/reflect/Constructor.newInstance (1 samples, 0.03%)</title><rect x="848.3" y="2531.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="851.3" y="2542.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingConstructorAccessorImpl.newInstance (1 samples, 0.03%)</title><rect x="848.3" y="2515.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="851.3" y="2526.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory.constructType (1 samples, 0.03%)</title><rect x="848.7" y="2691.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="851.7" y="2702.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/type/TypeFactory._fromAny (1 samples, 0.03%)</title><rect x="848.7" y="2675.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="851.7" y="2686.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/module/scala/modifiers/ScalaTypeModifier.modifyType (1 samples, 0.03%)</title><rect x="848.7" y="2659.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="851.7" y="2670.0"></text>
</g>
<g>
<title>com/fasterxml/jackson/databind/JavaType.isTypeOrSubTypeOf (1 samples, 0.03%)</title><rect x="848.7" y="2643.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="851.7" y="2654.0"></text>
</g>
<g>
<title>java/lang/Class.isAssignableFrom (1 samples, 0.03%)</title><rect x="848.7" y="2627.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="851.7" y="2638.0"></text>
</g>
<g>
<title>oopDesc::metadata_field(int) const (1 samples, 0.03%)</title><rect x="848.7" y="2611.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="851.7" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.clone (1 samples, 0.03%)</title><rect x="849.0" y="2835.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="852.0" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.deserialize (1 samples, 0.03%)</title><rect x="849.0" y="2819.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.0" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaDeserializationStream.readObject (1 samples, 0.03%)</title><rect x="849.0" y="2803.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.0" y="2814.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.03%)</title><rect x="849.0" y="2787.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.0" y="2798.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.03%)</title><rect x="849.0" y="2771.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.0" y="2782.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.03%)</title><rect x="849.0" y="2755.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.0" y="2766.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.03%)</title><rect x="849.0" y="2739.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.0" y="2750.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.03%)</title><rect x="849.0" y="2723.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.0" y="2734.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.03%)</title><rect x="849.0" y="2707.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="852.0" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaDeserializationStream$$anon$1.resolveClass (1 samples, 0.03%)</title><rect x="849.0" y="2691.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="852.0" y="2702.0"></text>
</g>
<g>
<title>java/lang/Class.forName (1 samples, 0.03%)</title><rect x="849.0" y="2675.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="852.0" y="2686.0"></text>
</g>
<g>
<title>java/lang/Class.forName0 (1 samples, 0.03%)</title><rect x="849.0" y="2659.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="852.0" y="2670.0"></text>
</g>
<g>
<title>Java_java_lang_Class_forName0 (1 samples, 0.03%)</title><rect x="849.0" y="2643.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="852.0" y="2654.0"></text>
</g>
<g>
<title>JVM_FindClassFromCaller (1 samples, 0.03%)</title><rect x="849.0" y="2627.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="852.0" y="2638.0"></text>
</g>
<g>
<title>SymbolTable::new_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="849.0" y="2611.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="852.0" y="2622.0"></text>
</g>
<g>
<title>SymbolTable::do_lookup(char const*, int, unsigned long) (1 samples, 0.03%)</title><rect x="849.0" y="2595.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="852.0" y="2606.0"></text>
</g>
<g>
<title>breeze/optimize/StrongWolfeLineSearch.zoom$1 (67 samples, 1.71%)</title><rect x="849.3" y="3027.0" width="20.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.3" y="3038.0"></text>
</g>
<g>
<title>scala/collection/immutable/Range.foreach$mVc$sp (67 samples, 1.71%)</title><rect x="849.3" y="3011.0" width="20.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="852.3" y="3022.0"></text>
</g>
<g>
<title>breeze/optimize/StrongWolfeLineSearch$$Lambda$2691.0x00000008024a6460.apply$mcVI$sp (67 samples, 1.71%)</title><rect x="849.3" y="2995.0" width="20.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.3" y="3006.0"></text>
</g>
<g>
<title>breeze/optimize/StrongWolfeLineSearch.$anonfun$minimizeWithBound$2 (67 samples, 1.71%)</title><rect x="849.3" y="2979.0" width="20.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.3" y="2990.0"></text>
</g>
<g>
<title>breeze/optimize/CubicLineSearch.interp (1 samples, 0.03%)</title><rect x="849.3" y="2963.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="852.3" y="2974.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="849.3" y="2947.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.3" y="2958.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="849.3" y="2931.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="852.3" y="2942.0"></text>
</g>
<g>
<title>java/lang/invoke/CallSite.makeSite (1 samples, 0.03%)</title><rect x="849.3" y="2915.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.3" y="2926.0"></text>
</g>
<g>
<title>java/lang/invoke/BootstrapMethodInvoker.invoke (1 samples, 0.03%)</title><rect x="849.3" y="2899.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="852.3" y="2910.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH.0x00000008017d4000.invokeExact_MT (1 samples, 0.03%)</title><rect x="849.3" y="2883.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.3" y="2894.0"></text>
</g>
<g>
<title>java/lang/invoke/DelegatingMethodHandle$Holder.delegate (1 samples, 0.03%)</title><rect x="849.3" y="2867.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="852.3" y="2878.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1 samples, 0.03%)</title><rect x="849.3" y="2851.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="852.3" y="2862.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaMetafactory.altMetafactory (1 samples, 0.03%)</title><rect x="849.3" y="2835.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="852.3" y="2846.0"></text>
</g>
<g>
<title>java/lang/invoke/InnerClassLambdaMetafactory.buildCallSite (1 samples, 0.03%)</title><rect x="849.3" y="2819.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="852.3" y="2830.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.findConstructor (1 samples, 0.03%)</title><rect x="849.3" y="2803.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="852.3" y="2814.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.getDirectConstructor (1 samples, 0.03%)</title><rect x="849.3" y="2787.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.3" y="2798.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandles$Lookup.getDirectConstructorCommon (1 samples, 0.03%)</title><rect x="849.3" y="2771.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="852.3" y="2782.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="849.3" y="2755.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="852.3" y="2766.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.makeAllocator (1 samples, 0.03%)</title><rect x="849.3" y="2739.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.3" y="2750.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="849.3" y="2723.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="852.3" y="2734.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="849.3" y="2707.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="852.3" y="2718.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="849.3" y="2691.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="852.3" y="2702.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="849.3" y="2675.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="852.3" y="2686.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolveOrFail (1 samples, 0.03%)</title><rect x="849.3" y="2659.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="852.3" y="2670.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolve (1 samples, 0.03%)</title><rect x="849.3" y="2643.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="852.3" y="2654.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.resolve (1 samples, 0.03%)</title><rect x="849.3" y="2627.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="852.3" y="2638.0"></text>
</g>
<g>
<title>__pthread_cond_broadcast (1 samples, 0.03%)</title><rect x="849.3" y="2611.0" width="0.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="852.3" y="2622.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="849.3" y="2595.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="852.3" y="2606.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="849.3" y="2579.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="852.3" y="2590.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="849.3" y="2563.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="852.3" y="2574.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="849.3" y="2547.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="852.3" y="2558.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="849.3" y="2531.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="852.3" y="2542.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="849.3" y="2515.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="852.3" y="2526.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="849.3" y="2499.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="852.3" y="2510.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="849.3" y="2483.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="852.3" y="2494.0"></text>
</g>
<g>
<title>breeze/optimize/StrongWolfeLineSearch.phi$1 (66 samples, 1.68%)</title><rect x="849.6" y="2963.0" width="19.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.6" y="2974.0"></text>
</g>
<g>
<title>breeze/optimize/LineSearch$$anon$1.calculate (66 samples, 1.68%)</title><rect x="849.6" y="2947.0" width="19.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="852.6" y="2958.0"></text>
</g>
<g>
<title>breeze/optimize/LineSearch$$anon$1.calculate (66 samples, 1.68%)</title><rect x="849.6" y="2931.0" width="19.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="852.6" y="2942.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$colon$plus$eq (1 samples, 0.03%)</title><rect x="849.6" y="2915.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="852.6" y="2926.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$plus$eq$ (1 samples, 0.03%)</title><rect x="849.6" y="2899.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="852.6" y="2910.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$plus$eq (1 samples, 0.03%)</title><rect x="849.6" y="2883.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.6" y="2894.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$13.apply (1 samples, 0.03%)</title><rect x="849.6" y="2867.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="852.6" y="2878.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$13.apply (1 samples, 0.03%)</title><rect x="849.6" y="2851.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.6" y="2862.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (1 samples, 0.03%)</title><rect x="849.6" y="2835.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="852.6" y="2846.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$times (3 samples, 0.08%)</title><rect x="849.9" y="2915.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="852.9" y="2926.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$times$ (3 samples, 0.08%)</title><rect x="849.9" y="2899.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="852.9" y="2910.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$times (3 samples, 0.08%)</title><rect x="849.9" y="2883.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.9" y="2894.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$66.apply (3 samples, 0.08%)</title><rect x="849.9" y="2867.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="852.9" y="2878.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$66.apply (3 samples, 0.08%)</title><rect x="849.9" y="2851.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="852.9" y="2862.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$.zeros$mDc$sp (2 samples, 0.05%)</title><rect x="850.2" y="2835.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="853.2" y="2846.0"></text>
</g>
<g>
<title>scala/reflect/ManifestFactory$DoubleManifest.newArray (2 samples, 0.05%)</title><rect x="850.2" y="2819.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="853.2" y="2830.0"></text>
</g>
<g>
<title>scala/reflect/ManifestFactory$DoubleManifest.newArray (2 samples, 0.05%)</title><rect x="850.2" y="2803.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="853.2" y="2814.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (2 samples, 0.05%)</title><rect x="850.2" y="2787.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="853.2" y="2798.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="850.2" y="2771.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="853.2" y="2782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="850.2" y="2755.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="853.2" y="2766.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="850.2" y="2739.0" width="0.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="853.2" y="2750.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.dot (1 samples, 0.03%)</title><rect x="850.8" y="2915.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="853.8" y="2926.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot$ (1 samples, 0.03%)</title><rect x="850.8" y="2899.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="853.8" y="2910.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.dot (1 samples, 0.03%)</title><rect x="850.8" y="2883.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="853.8" y="2894.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (1 samples, 0.03%)</title><rect x="850.8" y="2867.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="853.8" y="2878.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.apply (1 samples, 0.03%)</title><rect x="850.8" y="2851.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="853.8" y="2862.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDotD$.blasPath (1 samples, 0.03%)</title><rect x="850.8" y="2835.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="853.8" y="2846.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorSupportMethods.dotProduct_Double (1 samples, 0.03%)</title><rect x="850.8" y="2819.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="853.8" y="2830.0"></text>
</g>
<g>
<title>breeze/optimize/CachedDiffFunction.calculate (61 samples, 1.55%)</title><rect x="851.1" y="2915.0" width="18.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="854.1" y="2926.0"></text>
</g>
<g>
<title>breeze/linalg/package$.copy (3 samples, 0.08%)</title><rect x="851.1" y="2899.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="854.1" y="2910.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$2.apply (3 samples, 0.08%)</title><rect x="851.1" y="2883.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="854.1" y="2894.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$2.apply (3 samples, 0.08%)</title><rect x="851.1" y="2867.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="854.1" y="2878.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.copy (3 samples, 0.08%)</title><rect x="851.1" y="2851.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="854.1" y="2862.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.copy$mcD$sp (3 samples, 0.08%)</title><rect x="851.1" y="2835.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="854.1" y="2846.0"></text>
</g>
<g>
<title>breeze/util/ArrayUtil$.copyOfRange (3 samples, 0.08%)</title><rect x="851.1" y="2819.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="854.1" y="2830.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.08%)</title><rect x="851.1" y="2803.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="854.1" y="2814.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="851.1" y="2787.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="854.1" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$CostFun.calculate (58 samples, 1.48%)</title><rect x="852.0" y="2899.0" width="17.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="855.0" y="2910.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$CostFun.calculate (58 samples, 1.48%)</title><rect x="852.0" y="2883.0" width="17.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="855.0" y="2894.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.broadcast (26 samples, 0.66%)</title><rect x="852.0" y="2867.0" width="7.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="855.0" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/BroadcastManager.newBroadcast (26 samples, 0.66%)</title><rect x="852.0" y="2851.0" width="7.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="855.0" y="2862.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcastFactory.newBroadcast (26 samples, 0.66%)</title><rect x="852.0" y="2835.0" width="7.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.0" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.&lt;init&gt; (26 samples, 0.66%)</title><rect x="852.0" y="2819.0" width="7.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="855.0" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.writeBlocks (26 samples, 0.66%)</title><rect x="852.0" y="2803.0" width="7.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="855.0" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.blockifyObject (18 samples, 0.46%)</title><rect x="852.0" y="2787.0" width="5.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="855.0" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinally (17 samples, 0.43%)</title><rect x="852.0" y="2771.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="855.0" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$$Lambda$1759.0x0000000802168000.apply (17 samples, 0.43%)</title><rect x="852.0" y="2755.0" width="5.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="855.0" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$4 (17 samples, 0.43%)</title><rect x="852.0" y="2739.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="855.0" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializationStream.writeObject (17 samples, 0.43%)</title><rect x="852.0" y="2723.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="855.0" y="2734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (17 samples, 0.43%)</title><rect x="852.0" y="2707.0" width="5.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.0" y="2718.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (17 samples, 0.43%)</title><rect x="852.0" y="2691.0" width="5.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="855.0" y="2702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (16 samples, 0.41%)</title><rect x="852.3" y="2675.0" width="4.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="855.3" y="2686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (16 samples, 0.41%)</title><rect x="852.3" y="2659.0" width="4.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="855.3" y="2670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (16 samples, 0.41%)</title><rect x="852.3" y="2643.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.3" y="2654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (16 samples, 0.41%)</title><rect x="852.3" y="2627.0" width="4.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="855.3" y="2638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (16 samples, 0.41%)</title><rect x="852.3" y="2611.0" width="4.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="855.3" y="2622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeDoubles (16 samples, 0.41%)</title><rect x="852.3" y="2595.0" width="4.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="855.3" y="2606.0"></text>
</g>
<g>
<title>java/io/Bits.putDouble (9 samples, 0.23%)</title><rect x="852.3" y="2579.0" width="2.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="855.3" y="2590.0"></text>
</g>
<g>
<title>java/io/Bits.putLong (9 samples, 0.23%)</title><rect x="852.3" y="2563.0" width="2.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="855.3" y="2574.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.writeDouble (7 samples, 0.18%)</title><rect x="855.0" y="2579.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="858.0" y="2590.0"></text>
</g>
<g>
<title>java/io/DataOutputStream.writeLong (7 samples, 0.18%)</title><rect x="855.0" y="2563.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="858.0" y="2574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.write (7 samples, 0.18%)</title><rect x="855.0" y="2547.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="858.0" y="2558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.write (7 samples, 0.18%)</title><rect x="855.0" y="2531.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="858.0" y="2542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (7 samples, 0.18%)</title><rect x="855.0" y="2515.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="858.0" y="2526.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4BlockOutputStream.write (6 samples, 0.15%)</title><rect x="855.3" y="2499.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="858.3" y="2510.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4BlockOutputStream.flushBufferedData (6 samples, 0.15%)</title><rect x="855.3" y="2483.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="858.3" y="2494.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4Compressor.compress (1 samples, 0.03%)</title><rect x="855.3" y="2467.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="858.3" y="2478.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JavaUnsafeCompressor.compress (1 samples, 0.03%)</title><rect x="855.3" y="2451.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="858.3" y="2462.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4JavaUnsafeCompressor.compress64k (1 samples, 0.03%)</title><rect x="855.3" y="2435.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="858.3" y="2446.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBufferOutputStream.write (5 samples, 0.13%)</title><rect x="855.6" y="2467.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="858.6" y="2478.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBufferOutputStream.allocateNewChunkIfNeeded (5 samples, 0.13%)</title><rect x="855.6" y="2451.0" width="1.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="858.6" y="2462.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$$Lambda$1756.0x0000000802160a80.apply (2 samples, 0.05%)</title><rect x="855.6" y="2435.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="858.6" y="2446.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$1$adapted (2 samples, 0.05%)</title><rect x="855.6" y="2419.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="858.6" y="2430.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$1 (2 samples, 0.05%)</title><rect x="855.6" y="2403.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="858.6" y="2414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2 samples, 0.05%)</title><rect x="855.6" y="2387.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="858.6" y="2398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.05%)</title><rect x="855.6" y="2371.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="858.6" y="2382.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (2 samples, 0.05%)</title><rect x="855.6" y="2355.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="858.6" y="2366.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="855.6" y="2339.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="858.6" y="2350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="855.6" y="2323.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="858.6" y="2334.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="855.6" y="2307.0" width="0.6" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="858.6" y="2318.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.boxToInteger (3 samples, 0.08%)</title><rect x="856.2" y="2435.0" width="0.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="859.2" y="2446.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.08%)</title><rect x="856.2" y="2419.0" width="0.9" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="859.2" y="2430.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBufferOutputStream.toChunkedByteBuffer (1 samples, 0.03%)</title><rect x="857.1" y="2771.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="860.1" y="2782.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.03%)</title><rect x="857.1" y="2755.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="860.1" y="2766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.put (1 samples, 0.03%)</title><rect x="857.1" y="2739.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="860.1" y="2750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.putBuffer (1 samples, 0.03%)</title><rect x="857.1" y="2723.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="860.1" y="2734.0"></text>
</g>
<g>
<title>jdk/internal/misc/ScopedMemoryAccess.copyMemory (1 samples, 0.03%)</title><rect x="857.1" y="2707.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="860.1" y="2718.0"></text>
</g>
<g>
<title>jdk/internal/misc/ScopedMemoryAccess.copyMemoryInternal (1 samples, 0.03%)</title><rect x="857.1" y="2691.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="860.1" y="2702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.copyMemory (1 samples, 0.03%)</title><rect x="857.1" y="2675.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="860.1" y="2686.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="857.1" y="2659.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="860.1" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.putSingle (2 samples, 0.05%)</title><rect x="857.4" y="2787.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="860.4" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.putIterator (2 samples, 0.05%)</title><rect x="857.4" y="2771.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="860.4" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.doPutIterator (2 samples, 0.05%)</title><rect x="857.4" y="2755.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="860.4" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$doPut (2 samples, 0.05%)</title><rect x="857.4" y="2739.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="860.4" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$$Lambda$1736.0x00000008021527f0.apply (2 samples, 0.05%)</title><rect x="857.4" y="2723.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="860.4" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.$anonfun$doPutIterator$1 (2 samples, 0.05%)</title><rect x="857.4" y="2707.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="860.4" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.putIteratorAsValues (2 samples, 0.05%)</title><rect x="857.4" y="2691.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="860.4" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.putIterator (2 samples, 0.05%)</title><rect x="857.4" y="2675.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="860.4" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.logInfo (2 samples, 0.05%)</title><rect x="857.4" y="2659.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="860.4" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (2 samples, 0.05%)</title><rect x="857.4" y="2643.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="860.4" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (2 samples, 0.05%)</title><rect x="857.4" y="2627.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="860.4" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore$$Lambda$1750.0x000000080215b108.apply (1 samples, 0.03%)</title><rect x="857.4" y="2611.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="860.4" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.$anonfun$putIterator$4 (1 samples, 0.03%)</title><rect x="857.4" y="2595.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="860.4" y="2606.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.blocksMemoryUsed (1 samples, 0.03%)</title><rect x="857.4" y="2579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="860.4" y="2590.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.currentUnrollMemory (1 samples, 0.03%)</title><rect x="857.4" y="2563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="860.4" y="2574.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.onHeapUnrollMemoryMap (1 samples, 0.03%)</title><rect x="857.4" y="2547.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="860.4" y="2558.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (1 samples, 0.03%)</title><rect x="857.7" y="2611.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="860.7" y="2622.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (1 samples, 0.03%)</title><rect x="857.7" y="2595.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="860.7" y="2606.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (1 samples, 0.03%)</title><rect x="857.7" y="2579.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="860.7" y="2590.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (1 samples, 0.03%)</title><rect x="857.7" y="2563.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="860.7" y="2574.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.03%)</title><rect x="857.7" y="2547.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="860.7" y="2558.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (1 samples, 0.03%)</title><rect x="857.7" y="2531.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="860.7" y="2542.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (1 samples, 0.03%)</title><rect x="857.7" y="2515.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="860.7" y="2526.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (1 samples, 0.03%)</title><rect x="857.7" y="2499.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="860.7" y="2510.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/QuietWriter.flush (1 samples, 0.03%)</title><rect x="857.7" y="2483.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="860.7" y="2494.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flush (1 samples, 0.03%)</title><rect x="857.7" y="2467.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="860.7" y="2478.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flush (1 samples, 0.03%)</title><rect x="857.7" y="2451.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="860.7" y="2462.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlush (1 samples, 0.03%)</title><rect x="857.7" y="2435.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="860.7" y="2446.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (1 samples, 0.03%)</title><rect x="857.7" y="2419.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="860.7" y="2430.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (1 samples, 0.03%)</title><rect x="857.7" y="2403.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="860.7" y="2414.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (1 samples, 0.03%)</title><rect x="857.7" y="2387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="860.7" y="2398.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.03%)</title><rect x="857.7" y="2371.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="860.7" y="2382.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.03%)</title><rect x="857.7" y="2355.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="860.7" y="2366.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (1 samples, 0.03%)</title><rect x="857.7" y="2339.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="860.7" y="2350.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.03%)</title><rect x="857.7" y="2323.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="860.7" y="2334.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (1 samples, 0.03%)</title><rect x="857.7" y="2307.0" width="0.3" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="860.7" y="2318.0"></text>
</g>
<g>
<title>writeBytes (1 samples, 0.03%)</title><rect x="857.7" y="2291.0" width="0.3" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="860.7" y="2302.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="857.7" y="2275.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="860.7" y="2286.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="857.7" y="2259.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="860.7" y="2270.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="857.7" y="2243.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="860.7" y="2254.0"></text>
</g>
<g>
<title>__x64_sys_write (1 samples, 0.03%)</title><rect x="857.7" y="2227.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="860.7" y="2238.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.03%)</title><rect x="857.7" y="2211.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="860.7" y="2222.0"></text>
</g>
<g>
<title>vfs_write (1 samples, 0.03%)</title><rect x="857.7" y="2195.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="860.7" y="2206.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.03%)</title><rect x="857.7" y="2179.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="860.7" y="2190.0"></text>
</g>
<g>
<title>tty_write (1 samples, 0.03%)</title><rect x="857.7" y="2163.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="860.7" y="2174.0"></text>
</g>
<g>
<title>n_tty_write (1 samples, 0.03%)</title><rect x="857.7" y="2147.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="860.7" y="2158.0"></text>
</g>
<g>
<title>pty_write (1 samples, 0.03%)</title><rect x="857.7" y="2131.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="860.7" y="2142.0"></text>
</g>
<g>
<title>tty_flip_buffer_push (1 samples, 0.03%)</title><rect x="857.7" y="2115.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="860.7" y="2126.0"></text>
</g>
<g>
<title>queue_work_on (1 samples, 0.03%)</title><rect x="857.7" y="2099.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="860.7" y="2110.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.foreach (6 samples, 0.15%)</title><rect x="858.0" y="2787.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="861.0" y="2798.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (6 samples, 0.15%)</title><rect x="858.0" y="2771.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="861.0" y="2782.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (6 samples, 0.15%)</title><rect x="858.0" y="2755.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="861.0" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$Lambda$1773.0x000000080216b600.apply (6 samples, 0.15%)</title><rect x="858.0" y="2739.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="861.0" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.$anonfun$writeBlocks$1$adapted (6 samples, 0.15%)</title><rect x="858.0" y="2723.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="861.0" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.$anonfun$writeBlocks$1 (6 samples, 0.15%)</title><rect x="858.0" y="2707.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="861.0" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.calcChecksum (3 samples, 0.08%)</title><rect x="858.0" y="2691.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="861.0" y="2702.0"></text>
</g>
<g>
<title>java/util/zip/Adler32.update (3 samples, 0.08%)</title><rect x="858.0" y="2675.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="861.0" y="2686.0"></text>
</g>
<g>
<title>java/util/zip/Adler32.updateBytes (3 samples, 0.08%)</title><rect x="858.0" y="2659.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="861.0" y="2670.0"></text>
</g>
<g>
<title>adler32_z (3 samples, 0.08%)</title><rect x="858.0" y="2643.0" width="0.9" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="861.0" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.putBytes (3 samples, 0.08%)</title><rect x="858.9" y="2691.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="861.9" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater.save (3 samples, 0.08%)</title><rect x="858.9" y="2675.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="861.9" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$doPut (3 samples, 0.08%)</title><rect x="858.9" y="2659.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="861.9" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater$$Lambda$1775.0x000000080216e588.apply (3 samples, 0.08%)</title><rect x="858.9" y="2643.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="861.9" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater.$anonfun$save$1 (3 samples, 0.08%)</title><rect x="858.9" y="2627.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="861.9" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater.saveSerializedValuesToMemoryStore (1 samples, 0.03%)</title><rect x="858.9" y="2611.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="861.9" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.putBytes (1 samples, 0.03%)</title><rect x="858.9" y="2595.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="861.9" y="2606.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.logInfo (1 samples, 0.03%)</title><rect x="858.9" y="2579.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="861.9" y="2590.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (1 samples, 0.03%)</title><rect x="858.9" y="2563.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="861.9" y="2574.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (1 samples, 0.03%)</title><rect x="858.9" y="2547.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="861.9" y="2558.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore$$Lambda$1778.0x000000080216f210.apply (1 samples, 0.03%)</title><rect x="858.9" y="2531.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="861.9" y="2542.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.$anonfun$putBytes$2 (1 samples, 0.03%)</title><rect x="858.9" y="2515.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="861.9" y="2526.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.blocksMemoryUsed (1 samples, 0.03%)</title><rect x="858.9" y="2499.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="861.9" y="2510.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.memoryUsed (1 samples, 0.03%)</title><rect x="858.9" y="2483.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="861.9" y="2494.0"></text>
</g>
<g>
<title>org/apache/spark/memory/MemoryManager.storageMemoryUsed (1 samples, 0.03%)</title><rect x="858.9" y="2467.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="861.9" y="2478.0"></text>
</g>
<g>
<title>org/apache/spark/memory/StorageMemoryPool.memoryUsed (1 samples, 0.03%)</title><rect x="858.9" y="2451.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="861.9" y="2462.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$getCurrentBlockStatus (1 samples, 0.03%)</title><rect x="859.2" y="2611.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="862.2" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/storage/StorageLevel$.apply (1 samples, 0.03%)</title><rect x="859.2" y="2595.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="862.2" y="2606.0"></text>
</g>
<g>
<title>org/apache/spark/storage/StorageLevel$.getCachedStorageLevel (1 samples, 0.03%)</title><rect x="859.2" y="2579.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="862.2" y="2590.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putIfAbsent (1 samples, 0.03%)</title><rect x="859.2" y="2563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="862.2" y="2574.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$reportBlockStatus (1 samples, 0.03%)</title><rect x="859.5" y="2611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="862.5" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.tryToReportBlockStatus (1 samples, 0.03%)</title><rect x="859.5" y="2595.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="862.5" y="2606.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMaster.updateBlockInfo (1 samples, 0.03%)</title><rect x="859.5" y="2579.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="862.5" y="2590.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (1 samples, 0.03%)</title><rect x="859.5" y="2563.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="862.5" y="2574.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (1 samples, 0.03%)</title><rect x="859.5" y="2547.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="862.5" y="2558.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.ask (1 samples, 0.03%)</title><rect x="859.5" y="2531.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="862.5" y="2542.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.askAbortable (1 samples, 0.03%)</title><rect x="859.5" y="2515.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="862.5" y="2526.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.askAbortable (1 samples, 0.03%)</title><rect x="859.5" y="2499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="862.5" y="2510.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postLocalMessage (1 samples, 0.03%)</title><rect x="859.5" y="2483.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="862.5" y="2494.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postMessage (1 samples, 0.03%)</title><rect x="859.5" y="2467.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="862.5" y="2478.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/DedicatedMessageLoop.post (1 samples, 0.03%)</title><rect x="859.5" y="2451.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="862.5" y="2462.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/MessageLoop.setActive (1 samples, 0.03%)</title><rect x="859.5" y="2435.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="862.5" y="2446.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.03%)</title><rect x="859.5" y="2419.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="862.5" y="2430.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.03%)</title><rect x="859.5" y="2403.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="862.5" y="2414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="859.5" y="2387.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="862.5" y="2398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="859.5" y="2371.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="862.5" y="2382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="859.5" y="2355.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="862.5" y="2366.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="859.5" y="2339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="862.5" y="2350.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="859.5" y="2323.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="862.5" y="2334.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="859.5" y="2307.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="862.5" y="2318.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="859.5" y="2291.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="862.5" y="2302.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="859.5" y="2275.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="862.5" y="2286.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="859.5" y="2259.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="862.5" y="2270.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="859.5" y="2243.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="862.5" y="2254.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="859.5" y="2227.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="862.5" y="2238.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="859.5" y="2211.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="862.5" y="2222.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="859.5" y="2195.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="862.5" y="2206.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="859.5" y="2179.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="862.5" y="2190.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/Broadcast.destroy (2 samples, 0.05%)</title><rect x="859.8" y="2867.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="862.8" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/Broadcast.destroy (2 samples, 0.05%)</title><rect x="859.8" y="2851.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="862.8" y="2862.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.doDestroy (1 samples, 0.03%)</title><rect x="859.8" y="2835.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="862.8" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.unpersist (1 samples, 0.03%)</title><rect x="859.8" y="2819.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="862.8" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMaster.removeBroadcast (1 samples, 0.03%)</title><rect x="859.8" y="2803.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="862.8" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (1 samples, 0.03%)</title><rect x="859.8" y="2787.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="862.8" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (1 samples, 0.03%)</title><rect x="859.8" y="2771.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="862.8" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.ask (1 samples, 0.03%)</title><rect x="859.8" y="2755.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="862.8" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.askAbortable (1 samples, 0.03%)</title><rect x="859.8" y="2739.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="862.8" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.askAbortable (1 samples, 0.03%)</title><rect x="859.8" y="2723.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="862.8" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.getCallSite (1 samples, 0.03%)</title><rect x="860.1" y="2835.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="863.1" y="2846.0"></text>
</g>
<g>
<title>java/lang/Thread.getStackTrace (1 samples, 0.03%)</title><rect x="860.1" y="2819.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="863.1" y="2830.0"></text>
</g>
<g>
<title>java/lang/Throwable.getStackTrace (1 samples, 0.03%)</title><rect x="860.1" y="2803.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="863.1" y="2814.0"></text>
</g>
<g>
<title>java/lang/Throwable.getOurStackTrace (1 samples, 0.03%)</title><rect x="860.1" y="2787.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="863.1" y="2798.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.of (1 samples, 0.03%)</title><rect x="860.1" y="2771.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="863.1" y="2782.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.initStackTraceElements (1 samples, 0.03%)</title><rect x="860.1" y="2755.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="863.1" y="2766.0"></text>
</g>
<g>
<title>JVM_InitStackTraceElementArray (1 samples, 0.03%)</title><rect x="860.1" y="2739.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="863.1" y="2750.0"></text>
</g>
<g>
<title>java_lang_Throwable::get_stack_trace_elements(Handle, objArrayHandle, Thread*) (1 samples, 0.03%)</title><rect x="860.1" y="2723.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="863.1" y="2734.0"></text>
</g>
<g>
<title>java_lang_StackTraceElement::fill_in(Handle, InstanceKlass*, methodHandle const&amp;, int, int, Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="860.1" y="2707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="863.1" y="2718.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (1 samples, 0.03%)</title><rect x="860.1" y="2691.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="863.1" y="2702.0"></text>
</g>
<g>
<title>Symbol::as_unicode(int&amp;) const (1 samples, 0.03%)</title><rect x="860.1" y="2675.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="863.1" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/ml/ann/ANNUpdater.compute (5 samples, 0.13%)</title><rect x="860.4" y="2867.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="863.4" y="2878.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.toDenseVector$mcD$sp (4 samples, 0.10%)</title><rect x="860.4" y="2851.0" width="1.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="863.4" y="2862.0"></text>
</g>
<g>
<title>breeze/linalg/Vector.toDenseVector$mcD$sp$ (4 samples, 0.10%)</title><rect x="860.4" y="2835.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="863.4" y="2846.0"></text>
</g>
<g>
<title>breeze/linalg/Vector.toDenseVector$mcD$sp (4 samples, 0.10%)</title><rect x="860.4" y="2819.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="863.4" y="2830.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.toDenseVector (4 samples, 0.10%)</title><rect x="860.4" y="2803.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="863.4" y="2814.0"></text>
</g>
<g>
<title>breeze/linalg/Vector.toDenseVector$ (4 samples, 0.10%)</title><rect x="860.4" y="2787.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="863.4" y="2798.0"></text>
</g>
<g>
<title>breeze/linalg/Vector.toDenseVector (4 samples, 0.10%)</title><rect x="860.4" y="2771.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="863.4" y="2782.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.toArray (4 samples, 0.10%)</title><rect x="860.4" y="2755.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="863.4" y="2766.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.toArray (4 samples, 0.10%)</title><rect x="860.4" y="2739.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="863.4" y="2750.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.toArray$mcD$sp (4 samples, 0.10%)</title><rect x="860.4" y="2723.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="863.4" y="2734.0"></text>
</g>
<g>
<title>breeze/util/ArrayUtil$.copyOfRange (4 samples, 0.10%)</title><rect x="860.4" y="2707.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="863.4" y="2718.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.08%)</title><rect x="860.7" y="2691.0" width="0.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="863.7" y="2702.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (2 samples, 0.05%)</title><rect x="860.7" y="2675.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="863.7" y="2686.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="860.7" y="2659.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="863.7" y="2670.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="860.7" y="2643.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="863.7" y="2654.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="860.7" y="2627.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="863.7" y="2638.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="861.0" y="2627.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="864.0" y="2638.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (1 samples, 0.03%)</title><rect x="861.0" y="2611.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="864.0" y="2622.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="861.0" y="2595.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="864.0" y="2606.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long) (1 samples, 0.03%)</title><rect x="861.0" y="2579.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="864.0" y="2590.0"></text>
</g>
<g>
<title>CollectedHeap::fill_with_objects(HeapWordImpl**, unsigned long, bool) (1 samples, 0.03%)</title><rect x="861.0" y="2563.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="864.0" y="2574.0"></text>
</g>
<g>
<title>ObjArrayAllocator::initialize(HeapWordImpl**) const (1 samples, 0.03%)</title><rect x="861.0" y="2547.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="864.0" y="2558.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.03%)</title><rect x="861.3" y="2675.0" width="0.3" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="864.3" y="2686.0"></text>
</g>
<g>
<title>breeze/linalg/package$.axpy (1 samples, 0.03%)</title><rect x="861.6" y="2851.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="864.6" y="2862.0"></text>
</g>
<g>
<title>breeze/linalg/VectorOps$$anon$187.apply (1 samples, 0.03%)</title><rect x="861.6" y="2835.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="864.6" y="2846.0"></text>
</g>
<g>
<title>breeze/linalg/operators/TernaryUpdateRegistry.apply$ (1 samples, 0.03%)</title><rect x="861.6" y="2819.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="864.6" y="2830.0"></text>
</g>
<g>
<title>breeze/linalg/operators/TernaryUpdateRegistry.apply (1 samples, 0.03%)</title><rect x="861.6" y="2803.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="864.6" y="2814.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (1 samples, 0.03%)</title><rect x="861.6" y="2787.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="864.6" y="2798.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (1 samples, 0.03%)</title><rect x="861.6" y="2771.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="864.6" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/BLAS$.axpy (5 samples, 0.13%)</title><rect x="861.9" y="2867.0" width="1.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="864.9" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/BLAS$.axpy (5 samples, 0.13%)</title><rect x="861.9" y="2851.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="864.9" y="2862.0"></text>
</g>
<g>
<title>com/github/fommil/netlib/F2jBLAS.daxpy (5 samples, 0.13%)</title><rect x="861.9" y="2835.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="864.9" y="2846.0"></text>
</g>
<g>
<title>org/netlib/blas/Daxpy.daxpy (5 samples, 0.13%)</title><rect x="861.9" y="2819.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="864.9" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/DenseVector.copy (5 samples, 0.13%)</title><rect x="863.4" y="2867.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="866.4" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/DenseVector.copy (5 samples, 0.13%)</title><rect x="863.4" y="2851.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="866.4" y="2862.0"></text>
</g>
<g>
<title>java/lang/Object.clone (5 samples, 0.13%)</title><rect x="863.4" y="2835.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="866.4" y="2846.0"></text>
</g>
<g>
<title>JVM_Clone (5 samples, 0.13%)</title><rect x="863.4" y="2819.0" width="1.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="866.4" y="2830.0"></text>
</g>
<g>
<title>acl_CopyRight (5 samples, 0.13%)</title><rect x="863.4" y="2803.0" width="1.5" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="866.4" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.treeAggregate (15 samples, 0.38%)</title><rect x="864.9" y="2867.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="867.9" y="2878.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.withScope (15 samples, 0.38%)</title><rect x="864.9" y="2851.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="867.9" y="2862.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (15 samples, 0.38%)</title><rect x="864.9" y="2835.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="867.9" y="2846.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (15 samples, 0.38%)</title><rect x="864.9" y="2819.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="867.9" y="2830.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$2576.0x00000008024452d0.apply (15 samples, 0.38%)</title><rect x="864.9" y="2803.0" width="4.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="867.9" y="2814.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$treeAggregate$1 (15 samples, 0.38%)</title><rect x="864.9" y="2787.0" width="4.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="867.9" y="2798.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.clean (2 samples, 0.05%)</title><rect x="864.9" y="2771.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="867.9" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (2 samples, 0.05%)</title><rect x="864.9" y="2755.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.9" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (2 samples, 0.05%)</title><rect x="864.9" y="2739.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="867.9" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/util/IndylambdaScalaClosures$.getSerializationProxy (1 samples, 0.03%)</title><rect x="864.9" y="2723.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="867.9" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/util/IndylambdaScalaClosures$.isClosureCandidate$1 (1 samples, 0.03%)</title><rect x="864.9" y="2707.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="867.9" y="2718.0"></text>
</g>
<g>
<title>scala/collection/JavaConverters$.asScalaBufferConverter (1 samples, 0.03%)</title><rect x="864.9" y="2691.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="867.9" y="2702.0"></text>
</g>
<g>
<title>scala/collection/convert/DecorateAsScala.asScalaBufferConverter$ (1 samples, 0.03%)</title><rect x="864.9" y="2675.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="867.9" y="2686.0"></text>
</g>
<g>
<title>scala/collection/convert/DecorateAsScala.asScalaBufferConverter (1 samples, 0.03%)</title><rect x="864.9" y="2659.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="867.9" y="2670.0"></text>
</g>
<g>
<title>scala/collection/convert/Decorators$AsScala.&lt;init&gt; (1 samples, 0.03%)</title><rect x="864.9" y="2643.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="867.9" y="2654.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (1 samples, 0.03%)</title><rect x="865.2" y="2723.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.2" y="2734.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (1 samples, 0.03%)</title><rect x="865.2" y="2707.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="868.2" y="2718.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.03%)</title><rect x="865.2" y="2691.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="868.2" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.fold (6 samples, 0.15%)</title><rect x="865.5" y="2771.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="868.5" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.withScope (6 samples, 0.15%)</title><rect x="865.5" y="2755.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="868.5" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (6 samples, 0.15%)</title><rect x="865.5" y="2739.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="868.5" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (6 samples, 0.15%)</title><rect x="865.5" y="2723.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="868.5" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$2580.0x0000000802445c48.apply (6 samples, 0.15%)</title><rect x="865.5" y="2707.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="868.5" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$fold$1 (6 samples, 0.15%)</title><rect x="865.5" y="2691.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="868.5" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.runJob (6 samples, 0.15%)</title><rect x="865.5" y="2675.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="868.5" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.runJob (6 samples, 0.15%)</title><rect x="865.5" y="2659.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="868.5" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.clean (5 samples, 0.13%)</title><rect x="865.5" y="2643.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="868.5" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (5 samples, 0.13%)</title><rect x="865.5" y="2627.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="868.5" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (5 samples, 0.13%)</title><rect x="865.5" y="2611.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="868.5" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.getClassReader (1 samples, 0.03%)</title><rect x="865.5" y="2595.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="868.5" y="2606.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.copyStream (1 samples, 0.03%)</title><rect x="865.5" y="2579.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="868.5" y="2590.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinally (1 samples, 0.03%)</title><rect x="865.5" y="2563.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.5" y="2574.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcJ$sp.apply (1 samples, 0.03%)</title><rect x="865.5" y="2547.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="868.5" y="2558.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$$$Lambda$1828.0x0000000802192860.apply$mcJ$sp (1 samples, 0.03%)</title><rect x="865.5" y="2531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="868.5" y="2542.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.$anonfun$copyStream$1 (1 samples, 0.03%)</title><rect x="865.5" y="2515.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="868.5" y="2526.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (1 samples, 0.03%)</title><rect x="865.5" y="2499.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="868.5" y="2510.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (1 samples, 0.03%)</title><rect x="865.5" y="2483.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="868.5" y="2494.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (1 samples, 0.03%)</title><rect x="865.5" y="2467.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="868.5" y="2478.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (1 samples, 0.03%)</title><rect x="865.5" y="2451.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="868.5" y="2462.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflateBytesBytes (1 samples, 0.03%)</title><rect x="865.5" y="2435.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="868.5" y="2446.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libz.so.1.2.11 (1 samples, 0.03%)</title><rect x="865.5" y="2419.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="868.5" y="2430.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (4 samples, 0.10%)</title><rect x="865.8" y="2595.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="868.8" y="2606.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (4 samples, 0.10%)</title><rect x="865.8" y="2579.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.8" y="2590.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readMethod (4 samples, 0.10%)</title><rect x="865.8" y="2563.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="868.8" y="2574.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readCode (4 samples, 0.10%)</title><rect x="865.8" y="2547.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="868.8" y="2558.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readClass (1 samples, 0.03%)</title><rect x="865.8" y="2531.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="868.8" y="2542.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readStringish (1 samples, 0.03%)</title><rect x="865.8" y="2515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="868.8" y="2526.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUTF8 (1 samples, 0.03%)</title><rect x="865.8" y="2499.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="868.8" y="2510.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (1 samples, 0.03%)</title><rect x="865.8" y="2483.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="868.8" y="2494.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (1 samples, 0.03%)</title><rect x="865.8" y="2467.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="868.8" y="2478.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readConst (1 samples, 0.03%)</title><rect x="866.1" y="2531.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="869.1" y="2542.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUTF8 (2 samples, 0.05%)</title><rect x="866.4" y="2531.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="869.4" y="2542.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (2 samples, 0.05%)</title><rect x="866.4" y="2515.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="869.4" y="2526.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (2 samples, 0.05%)</title><rect x="866.4" y="2499.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="869.4" y="2510.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.logInfo (1 samples, 0.03%)</title><rect x="867.0" y="2643.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.0" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (1 samples, 0.03%)</title><rect x="867.0" y="2627.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="870.0" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (1 samples, 0.03%)</title><rect x="867.0" y="2611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="870.0" y="2622.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (1 samples, 0.03%)</title><rect x="867.0" y="2595.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="870.0" y="2606.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (1 samples, 0.03%)</title><rect x="867.0" y="2579.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="870.0" y="2590.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (1 samples, 0.03%)</title><rect x="867.0" y="2563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="870.0" y="2574.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (1 samples, 0.03%)</title><rect x="867.0" y="2547.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="870.0" y="2558.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (1 samples, 0.03%)</title><rect x="867.0" y="2531.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.0" y="2542.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (1 samples, 0.03%)</title><rect x="867.0" y="2515.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="870.0" y="2526.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (1 samples, 0.03%)</title><rect x="867.0" y="2499.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="870.0" y="2510.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (1 samples, 0.03%)</title><rect x="867.0" y="2483.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.0" y="2494.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/QuietWriter.flush (1 samples, 0.03%)</title><rect x="867.0" y="2467.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="870.0" y="2478.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flush (1 samples, 0.03%)</title><rect x="867.0" y="2451.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.0" y="2462.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flush (1 samples, 0.03%)</title><rect x="867.0" y="2435.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="870.0" y="2446.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlush (1 samples, 0.03%)</title><rect x="867.0" y="2419.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="870.0" y="2430.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (1 samples, 0.03%)</title><rect x="867.0" y="2403.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="870.0" y="2414.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (1 samples, 0.03%)</title><rect x="867.0" y="2387.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.0" y="2398.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (1 samples, 0.03%)</title><rect x="867.0" y="2371.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="870.0" y="2382.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (1 samples, 0.03%)</title><rect x="867.0" y="2355.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="870.0" y="2366.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (1 samples, 0.03%)</title><rect x="867.0" y="2339.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="870.0" y="2350.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (1 samples, 0.03%)</title><rect x="867.0" y="2323.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="870.0" y="2334.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (1 samples, 0.03%)</title><rect x="867.0" y="2307.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.0" y="2318.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (1 samples, 0.03%)</title><rect x="867.0" y="2291.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="870.0" y="2302.0"></text>
</g>
<g>
<title>writeBytes (1 samples, 0.03%)</title><rect x="867.0" y="2275.0" width="0.3" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="870.0" y="2286.0"></text>
</g>
<g>
<title>__write (1 samples, 0.03%)</title><rect x="867.0" y="2259.0" width="0.3" height="15" fill="#e76363" rx="2" ry="2"/>
<text x="870.0" y="2270.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="867.0" y="2243.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="870.0" y="2254.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="867.0" y="2227.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="870.0" y="2238.0"></text>
</g>
<g>
<title>__x64_sys_write (1 samples, 0.03%)</title><rect x="867.0" y="2211.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="870.0" y="2222.0"></text>
</g>
<g>
<title>ksys_write (1 samples, 0.03%)</title><rect x="867.0" y="2195.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="870.0" y="2206.0"></text>
</g>
<g>
<title>vfs_write (1 samples, 0.03%)</title><rect x="867.0" y="2179.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="870.0" y="2190.0"></text>
</g>
<g>
<title>__vfs_write (1 samples, 0.03%)</title><rect x="867.0" y="2163.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="870.0" y="2174.0"></text>
</g>
<g>
<title>tty_write (1 samples, 0.03%)</title><rect x="867.0" y="2147.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="870.0" y="2158.0"></text>
</g>
<g>
<title>n_tty_write (1 samples, 0.03%)</title><rect x="867.0" y="2131.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="870.0" y="2142.0"></text>
</g>
<g>
<title>pty_write (1 samples, 0.03%)</title><rect x="867.0" y="2115.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="870.0" y="2126.0"></text>
</g>
<g>
<title>tty_flip_buffer_push (1 samples, 0.03%)</title><rect x="867.0" y="2099.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="870.0" y="2110.0"></text>
</g>
<g>
<title>queue_work_on (1 samples, 0.03%)</title><rect x="867.0" y="2083.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="870.0" y="2094.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.mapPartitions (6 samples, 0.15%)</title><rect x="867.3" y="2771.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="870.3" y="2782.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.withScope (6 samples, 0.15%)</title><rect x="867.3" y="2755.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="870.3" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (6 samples, 0.15%)</title><rect x="867.3" y="2739.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="870.3" y="2750.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope$.withScope (6 samples, 0.15%)</title><rect x="867.3" y="2723.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="870.3" y="2734.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$1844.0x00000008021a4a88.apply (6 samples, 0.15%)</title><rect x="867.3" y="2707.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="870.3" y="2718.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$mapPartitions$1 (6 samples, 0.15%)</title><rect x="867.3" y="2691.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="870.3" y="2702.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.clean (6 samples, 0.15%)</title><rect x="867.3" y="2675.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.3" y="2686.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (6 samples, 0.15%)</title><rect x="867.3" y="2659.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="870.3" y="2670.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.clean (6 samples, 0.15%)</title><rect x="867.3" y="2643.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.3" y="2654.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.ensureSerializable (1 samples, 0.03%)</title><rect x="867.3" y="2627.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.3" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.serialize (1 samples, 0.03%)</title><rect x="867.3" y="2611.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="870.3" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializationStream.writeObject (1 samples, 0.03%)</title><rect x="867.3" y="2595.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.3" y="2606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.03%)</title><rect x="867.3" y="2579.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="870.3" y="2590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="867.3" y="2563.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="870.3" y="2574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="867.3" y="2547.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="870.3" y="2558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="867.3" y="2531.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="870.3" y="2542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="867.3" y="2515.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="870.3" y="2526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="867.3" y="2499.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="870.3" y="2510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="867.3" y="2483.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="870.3" y="2494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="867.3" y="2467.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="870.3" y="2478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="867.3" y="2451.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="870.3" y="2462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="867.3" y="2435.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="870.3" y="2446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="867.3" y="2419.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="870.3" y="2430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="867.3" y="2403.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="870.3" y="2414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="867.3" y="2387.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="870.3" y="2398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="867.3" y="2371.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="870.3" y="2382.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.03%)</title><rect x="867.3" y="2355.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="870.3" y="2366.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putIfAbsent (1 samples, 0.03%)</title><rect x="867.3" y="2339.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="870.3" y="2350.0"></text>
</g>
<g>
<title>org/apache/spark/util/ClosureCleaner$.getClassReader (3 samples, 0.08%)</title><rect x="867.6" y="2627.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="870.6" y="2638.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.copyStream (2 samples, 0.05%)</title><rect x="867.6" y="2611.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="870.6" y="2622.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinally (2 samples, 0.05%)</title><rect x="867.6" y="2595.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="870.6" y="2606.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcJ$sp.apply (2 samples, 0.05%)</title><rect x="867.6" y="2579.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="870.6" y="2590.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$$$Lambda$1828.0x0000000802192860.apply$mcJ$sp (2 samples, 0.05%)</title><rect x="867.6" y="2563.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="870.6" y="2574.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.$anonfun$copyStream$1 (2 samples, 0.05%)</title><rect x="867.6" y="2547.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="870.6" y="2558.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (2 samples, 0.05%)</title><rect x="867.6" y="2531.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.6" y="2542.0"></text>
</g>
<g>
<title>java/io/FilterInputStream.read (2 samples, 0.05%)</title><rect x="867.6" y="2515.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="870.6" y="2526.0"></text>
</g>
<g>
<title>java/util/zip/InflaterInputStream.read (2 samples, 0.05%)</title><rect x="867.6" y="2499.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="870.6" y="2510.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflate (2 samples, 0.05%)</title><rect x="867.6" y="2483.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="870.6" y="2494.0"></text>
</g>
<g>
<title>java/util/zip/Inflater.inflateBytesBytes (2 samples, 0.05%)</title><rect x="867.6" y="2467.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="870.6" y="2478.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libz.so.1.2.11 (1 samples, 0.03%)</title><rect x="867.6" y="2451.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="870.6" y="2462.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="867.9" y="2451.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="870.9" y="2462.0"></text>
</g>
<g>
<title>inflate (1 samples, 0.03%)</title><rect x="867.9" y="2435.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="870.9" y="2446.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="868.2" y="2611.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="871.2" y="2622.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="868.2" y="2595.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="871.2" y="2606.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="868.2" y="2579.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="871.2" y="2590.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.&lt;init&gt; (1 samples, 0.03%)</title><rect x="868.2" y="2563.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="871.2" y="2574.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (2 samples, 0.05%)</title><rect x="868.5" y="2627.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="871.5" y="2638.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.accept (2 samples, 0.05%)</title><rect x="868.5" y="2611.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="871.5" y="2622.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readMethod (2 samples, 0.05%)</title><rect x="868.5" y="2595.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="871.5" y="2606.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readCode (2 samples, 0.05%)</title><rect x="868.5" y="2579.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="871.5" y="2590.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readConst (1 samples, 0.03%)</title><rect x="868.5" y="2563.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="871.5" y="2574.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUTF8 (1 samples, 0.03%)</title><rect x="868.8" y="2563.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="871.8" y="2574.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (1 samples, 0.03%)</title><rect x="868.8" y="2547.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="871.8" y="2558.0"></text>
</g>
<g>
<title>org/apache/xbean/asm7/ClassReader.readUtf (1 samples, 0.03%)</title><rect x="868.8" y="2531.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="871.8" y="2542.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.partitions (1 samples, 0.03%)</title><rect x="869.1" y="2771.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="872.1" y="2782.0"></text>
</g>
<g>
<title>scala/Option.getOrElse (1 samples, 0.03%)</title><rect x="869.1" y="2755.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="872.1" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$1856.0x00000008021ad150.apply (1 samples, 0.03%)</title><rect x="869.1" y="2739.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="872.1" y="2750.0"></text>
</g>
<g>
<title>breeze/optimize/LBFGS.takeStep (7 samples, 0.18%)</title><rect x="869.4" y="3139.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="872.4" y="3150.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$colon$plus$eq (4 samples, 0.10%)</title><rect x="869.7" y="3123.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="872.7" y="3134.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$plus$eq$ (4 samples, 0.10%)</title><rect x="869.7" y="3107.0" width="1.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="872.7" y="3118.0"></text>
</g>
<g>
<title>breeze/linalg/NumericOps.$colon$plus$eq (4 samples, 0.10%)</title><rect x="869.7" y="3091.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="872.7" y="3102.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$13.apply (4 samples, 0.10%)</title><rect x="869.7" y="3075.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="872.7" y="3086.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$13.apply (4 samples, 0.10%)</title><rect x="869.7" y="3059.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="872.7" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (4 samples, 0.10%)</title><rect x="869.7" y="3043.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="872.7" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$times (2 samples, 0.05%)</title><rect x="870.9" y="3123.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="873.9" y="3134.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$times$ (2 samples, 0.05%)</title><rect x="870.9" y="3107.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="873.9" y="3118.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$times (2 samples, 0.05%)</title><rect x="870.9" y="3091.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="873.9" y="3102.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$66.apply (2 samples, 0.05%)</title><rect x="870.9" y="3075.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="873.9" y="3086.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVectorOps$$anon$66.apply (2 samples, 0.05%)</title><rect x="870.9" y="3059.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="873.9" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$.zeros$mDc$sp (1 samples, 0.03%)</title><rect x="871.2" y="3043.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="874.2" y="3054.0"></text>
</g>
<g>
<title>scala/reflect/ManifestFactory$DoubleManifest.newArray (1 samples, 0.03%)</title><rect x="871.2" y="3027.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="874.2" y="3038.0"></text>
</g>
<g>
<title>scala/reflect/ManifestFactory$DoubleManifest.newArray (1 samples, 0.03%)</title><rect x="871.2" y="3011.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="874.2" y="3022.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (1 samples, 0.03%)</title><rect x="871.2" y="2995.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="874.2" y="3006.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="871.2" y="2979.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="874.2" y="2990.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="871.2" y="2963.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="874.2" y="2974.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (1 samples, 0.03%)</title><rect x="871.2" y="2947.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="874.2" y="2958.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_humongous(unsigned long) (1 samples, 0.03%)</title><rect x="871.2" y="2931.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="874.2" y="2942.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate(unsigned long) (1 samples, 0.03%)</title><rect x="871.2" y="2915.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="874.2" y="2926.0"></text>
</g>
<g>
<title>G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion*, unsigned int, unsigned long) (1 samples, 0.03%)</title><rect x="871.2" y="2899.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="874.2" y="2910.0"></text>
</g>
<g>
<title>breeze/optimize/LBFGS.updateHistory (29 samples, 0.74%)</title><rect x="871.5" y="3139.0" width="8.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="874.5" y="3150.0"></text>
</g>
<g>
<title>breeze/optimize/LBFGS.updateHistory (29 samples, 0.74%)</title><rect x="871.5" y="3123.0" width="8.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="874.5" y="3134.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$minus (17 samples, 0.43%)</title><rect x="871.5" y="3107.0" width="5.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="874.5" y="3118.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$minus$ (17 samples, 0.43%)</title><rect x="871.5" y="3091.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.5" y="3102.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$minus (17 samples, 0.43%)</title><rect x="871.5" y="3075.0" width="5.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="874.5" y="3086.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$312.apply (17 samples, 0.43%)</title><rect x="871.5" y="3059.0" width="5.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="874.5" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$312.apply (17 samples, 0.43%)</title><rect x="871.5" y="3043.0" width="5.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="874.5" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$14.apply (7 samples, 0.18%)</title><rect x="871.5" y="3027.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="874.5" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$14.apply (7 samples, 0.18%)</title><rect x="871.5" y="3011.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="874.5" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (7 samples, 0.18%)</title><rect x="871.5" y="2995.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="874.5" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$2.apply (10 samples, 0.25%)</title><rect x="873.6" y="3027.0" width="3.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="876.6" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$2.apply (10 samples, 0.25%)</title><rect x="873.6" y="3011.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="876.6" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.copy (10 samples, 0.25%)</title><rect x="873.6" y="2995.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="876.6" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.copy$mcD$sp (10 samples, 0.25%)</title><rect x="873.6" y="2979.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="876.6" y="2990.0"></text>
</g>
<g>
<title>breeze/util/ArrayUtil$.copyOfRange (10 samples, 0.25%)</title><rect x="873.6" y="2963.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="876.6" y="2974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (10 samples, 0.25%)</title><rect x="873.6" y="2947.0" width="3.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="876.6" y="2958.0"></text>
</g>
<g>
<title>java/lang/System.arraycopy (5 samples, 0.13%)</title><rect x="873.6" y="2931.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="876.6" y="2942.0"></text>
</g>
<g>
<title>JVM_ArrayCopy (5 samples, 0.13%)</title><rect x="873.6" y="2915.0" width="1.5" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="876.6" y="2926.0"></text>
</g>
<g>
<title>acl_CopyRight (5 samples, 0.13%)</title><rect x="873.6" y="2899.0" width="1.5" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="876.6" y="2910.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (5 samples, 0.13%)</title><rect x="875.1" y="2931.0" width="1.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="878.1" y="2942.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector.$minus$colon$minus (10 samples, 0.25%)</title><rect x="876.6" y="3107.0" width="3.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="879.6" y="3118.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$minus$colon$minus$ (10 samples, 0.25%)</title><rect x="876.6" y="3091.0" width="3.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="879.6" y="3102.0"></text>
</g>
<g>
<title>breeze/linalg/ImmutableNumericOps.$minus$colon$minus (10 samples, 0.25%)</title><rect x="876.6" y="3075.0" width="3.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="879.6" y="3086.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$312.apply (10 samples, 0.25%)</title><rect x="876.6" y="3059.0" width="3.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="879.6" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$312.apply (10 samples, 0.25%)</title><rect x="876.6" y="3043.0" width="3.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="879.6" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$14.apply (7 samples, 0.18%)</title><rect x="876.6" y="3027.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="879.6" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$14.apply (7 samples, 0.18%)</title><rect x="876.6" y="3011.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="879.6" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$canDaxpy$.apply (7 samples, 0.18%)</title><rect x="876.6" y="2995.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="879.6" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$2.apply (3 samples, 0.08%)</title><rect x="878.7" y="3027.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="881.7" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$$anon$2.apply (3 samples, 0.08%)</title><rect x="878.7" y="3011.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="881.7" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.copy (3 samples, 0.08%)</title><rect x="878.7" y="2995.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="881.7" y="3006.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.copy$mcD$sp (3 samples, 0.08%)</title><rect x="878.7" y="2979.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="881.7" y="2990.0"></text>
</g>
<g>
<title>breeze/util/ArrayUtil$.copyOfRange (3 samples, 0.08%)</title><rect x="878.7" y="2963.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="881.7" y="2974.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.08%)</title><rect x="878.7" y="2947.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="881.7" y="2958.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (1 samples, 0.03%)</title><rect x="878.7" y="2931.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="881.7" y="2942.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.03%)</title><rect x="878.7" y="2915.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="881.7" y="2926.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="878.7" y="2899.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="881.7" y="2910.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="878.7" y="2883.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="881.7" y="2894.0"></text>
</g>
<g>
<title>java/lang/System.arraycopy (2 samples, 0.05%)</title><rect x="879.0" y="2931.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="882.0" y="2942.0"></text>
</g>
<g>
<title>JVM_ArrayCopy (2 samples, 0.05%)</title><rect x="879.0" y="2915.0" width="0.6" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="882.0" y="2926.0"></text>
</g>
<g>
<title>acl_CopyRight (2 samples, 0.05%)</title><rect x="879.0" y="2899.0" width="0.6" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="882.0" y="2910.0"></text>
</g>
<g>
<title>breeze/optimize/LBFGS$ApproximateInverseHessian.updated (2 samples, 0.05%)</title><rect x="879.6" y="3107.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="882.6" y="3118.0"></text>
</g>
<g>
<title>scala/collection/immutable/Vector.$plus$colon (1 samples, 0.03%)</title><rect x="879.6" y="3091.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="882.6" y="3102.0"></text>
</g>
<g>
<title>scala/collection/immutable/Vector.appendFront (1 samples, 0.03%)</title><rect x="879.6" y="3075.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="882.6" y="3086.0"></text>
</g>
<g>
<title>scala/collection/immutable/Vector.initFrom (1 samples, 0.03%)</title><rect x="879.6" y="3059.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="882.6" y="3070.0"></text>
</g>
<g>
<title>scala/collection/immutable/VectorPointer.initFrom$ (1 samples, 0.03%)</title><rect x="879.6" y="3043.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="882.6" y="3054.0"></text>
</g>
<g>
<title>scala/collection/immutable/VectorPointer.initFrom (1 samples, 0.03%)</title><rect x="879.6" y="3027.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="882.6" y="3038.0"></text>
</g>
<g>
<title>scala/collection/immutable/Vector.depth (1 samples, 0.03%)</title><rect x="879.6" y="3011.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="882.6" y="3022.0"></text>
</g>
<g>
<title>scala/collection/immutable/Vector.take (1 samples, 0.03%)</title><rect x="879.9" y="3091.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="882.9" y="3102.0"></text>
</g>
<g>
<title>scala/collection/immutable/Vector.take (1 samples, 0.03%)</title><rect x="879.9" y="3075.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="882.9" y="3086.0"></text>
</g>
<g>
<title>scala/collection/immutable/Vector.dropBack0 (1 samples, 0.03%)</title><rect x="879.9" y="3059.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="882.9" y="3070.0"></text>
</g>
<g>
<title>scala/collection/immutable/Vector.preClean (1 samples, 0.03%)</title><rect x="879.9" y="3043.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="882.9" y="3054.0"></text>
</g>
<g>
<title>breeze/util/LazyLogger.info (43 samples, 1.09%)</title><rect x="880.2" y="3139.0" width="12.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="883.2" y="3150.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$$Lambda$2700.0x00000008024ac5a0.apply (1 samples, 0.03%)</title><rect x="880.2" y="3123.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="883.2" y="3134.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer.$anonfun$infiniteIterations$2 (1 samples, 0.03%)</title><rect x="880.2" y="3107.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="883.2" y="3118.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringOps.format (1 samples, 0.03%)</title><rect x="880.2" y="3091.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="883.2" y="3102.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.format$ (1 samples, 0.03%)</title><rect x="880.2" y="3075.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="883.2" y="3086.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.format (1 samples, 0.03%)</title><rect x="880.2" y="3059.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="883.2" y="3070.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.03%)</title><rect x="880.2" y="3043.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="883.2" y="3054.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="880.2" y="3027.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="883.2" y="3038.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="880.2" y="3011.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="883.2" y="3022.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.03%)</title><rect x="880.2" y="2995.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="883.2" y="3006.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printFloat (1 samples, 0.03%)</title><rect x="880.2" y="2979.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="883.2" y="2990.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.03%)</title><rect x="880.2" y="2963.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="883.2" y="2974.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (1 samples, 0.03%)</title><rect x="880.2" y="2947.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="883.2" y="2958.0"></text>
</g>
<g>
<title>jdk/internal/math/FormattedFloatingDecimal.valueOf (1 samples, 0.03%)</title><rect x="880.2" y="2931.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="883.2" y="2942.0"></text>
</g>
<g>
<title>jdk/internal/math/FormattedFloatingDecimal.&lt;init&gt; (1 samples, 0.03%)</title><rect x="880.2" y="2915.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="883.2" y="2926.0"></text>
</g>
<g>
<title>jdk/internal/math/FloatingDecimal$BinaryToASCIIBuffer.getDigits (1 samples, 0.03%)</title><rect x="880.2" y="2899.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="883.2" y="2910.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer$$Lambda$2701.0x00000008024ac868.apply (40 samples, 1.02%)</title><rect x="880.5" y="3123.0" width="12.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="883.5" y="3134.0"></text>
</g>
<g>
<title>breeze/optimize/FirstOrderMinimizer.$anonfun$infiniteIterations$3 (40 samples, 1.02%)</title><rect x="880.5" y="3107.0" width="12.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="883.5" y="3118.0"></text>
</g>
<g>
<title>breeze/linalg/norm$.apply (39 samples, 0.99%)</title><rect x="880.5" y="3091.0" width="11.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="883.5" y="3102.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply$ (39 samples, 0.99%)</title><rect x="880.5" y="3075.0" width="11.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="883.5" y="3086.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply (39 samples, 0.99%)</title><rect x="880.5" y="3059.0" width="11.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="883.5" y="3070.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.apply (39 samples, 0.99%)</title><rect x="880.5" y="3043.0" width="11.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="883.5" y="3054.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.apply (39 samples, 0.99%)</title><rect x="880.5" y="3027.0" width="11.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="883.5" y="3038.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.foreach$mVc$sp (39 samples, 0.99%)</title><rect x="880.5" y="3011.0" width="11.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="883.5" y="3022.0"></text>
</g>
<g>
<title>breeze/linalg/DenseVector$mcD$sp.foreach$mVcD$sp (39 samples, 0.99%)</title><rect x="880.5" y="2995.0" width="11.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="883.5" y="3006.0"></text>
</g>
<g>
<title>scala/Function1.apply$mcVD$sp (39 samples, 0.99%)</title><rect x="880.5" y="2979.0" width="11.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="883.5" y="2990.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322$$Lambda$2685.0x00000008024a38d0.apply (38 samples, 0.97%)</title><rect x="880.5" y="2963.0" width="11.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="883.5" y="2974.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.$anonfun$apply$16$adapted (38 samples, 0.97%)</title><rect x="880.5" y="2947.0" width="11.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="883.5" y="2958.0"></text>
</g>
<g>
<title>breeze/linalg/operators/DenseVector_GenericOps$$anon$322.$anonfun$apply$16 (38 samples, 0.97%)</title><rect x="880.5" y="2931.0" width="11.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="883.5" y="2942.0"></text>
</g>
<g>
<title>breeze/math/Field$fieldDouble$.sNorm (38 samples, 0.97%)</title><rect x="880.5" y="2915.0" width="11.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="883.5" y="2926.0"></text>
</g>
<g>
<title>breeze/math/Ring.sNorm$ (38 samples, 0.97%)</title><rect x="880.5" y="2899.0" width="11.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="883.5" y="2910.0"></text>
</g>
<g>
<title>breeze/math/Ring.sNorm (38 samples, 0.97%)</title><rect x="880.5" y="2883.0" width="11.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="883.5" y="2894.0"></text>
</g>
<g>
<title>breeze/linalg/norm$.apply (38 samples, 0.97%)</title><rect x="880.5" y="2867.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="883.5" y="2878.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply$ (38 samples, 0.97%)</title><rect x="880.5" y="2851.0" width="11.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="883.5" y="2862.0"></text>
</g>
<g>
<title>breeze/generic/UFunc.apply (38 samples, 0.97%)</title><rect x="880.5" y="2835.0" width="11.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="883.5" y="2846.0"></text>
</g>
<g>
<title>breeze/math/Field$fieldDouble$$anon$7.apply (38 samples, 0.97%)</title><rect x="880.5" y="2819.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="883.5" y="2830.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.boxToDouble (38 samples, 0.97%)</title><rect x="880.5" y="2803.0" width="11.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="883.5" y="2814.0"></text>
</g>
<g>
<title>java/lang/Double.valueOf (38 samples, 0.97%)</title><rect x="880.5" y="2787.0" width="11.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="883.5" y="2798.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.boxToDouble (1 samples, 0.03%)</title><rect x="891.9" y="2963.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="894.9" y="2974.0"></text>
</g>
<g>
<title>java/lang/Double.valueOf (1 samples, 0.03%)</title><rect x="891.9" y="2947.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="894.9" y="2958.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.03%)</title><rect x="891.9" y="2931.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="894.9" y="2942.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (1 samples, 0.03%)</title><rect x="891.9" y="2915.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="894.9" y="2926.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.03%)</title><rect x="891.9" y="2899.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="894.9" y="2910.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.03%)</title><rect x="891.9" y="2883.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="894.9" y="2894.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="891.9" y="2867.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="894.9" y="2878.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.03%)</title><rect x="891.9" y="2851.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="894.9" y="2862.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.03%)</title><rect x="891.9" y="2835.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="894.9" y="2846.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.03%)</title><rect x="891.9" y="2819.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="894.9" y="2830.0"></text>
</g>
<g>
<title>G1CollectionSet::add_eden_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="891.9" y="2803.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="894.9" y="2814.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringOps.format (1 samples, 0.03%)</title><rect x="892.2" y="3091.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="895.2" y="3102.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.format$ (1 samples, 0.03%)</title><rect x="892.2" y="3075.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="895.2" y="3086.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.format (1 samples, 0.03%)</title><rect x="892.2" y="3059.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="895.2" y="3070.0"></text>
</g>
<g>
<title>java/lang/String.format (1 samples, 0.03%)</title><rect x="892.2" y="3043.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="895.2" y="3054.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="892.2" y="3027.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="895.2" y="3038.0"></text>
</g>
<g>
<title>java/util/Formatter.format (1 samples, 0.03%)</title><rect x="892.2" y="3011.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="895.2" y="3022.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (1 samples, 0.03%)</title><rect x="892.2" y="2995.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="895.2" y="3006.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.&lt;init&gt; (1 samples, 0.03%)</title><rect x="892.2" y="2979.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="895.2" y="2990.0"></text>
</g>
<g>
<title>java/lang/String.charAt (1 samples, 0.03%)</title><rect x="892.2" y="2963.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="895.2" y="2974.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (1 samples, 0.03%)</title><rect x="892.2" y="2947.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="895.2" y="2958.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (2 samples, 0.05%)</title><rect x="892.5" y="3123.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="895.5" y="3134.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (2 samples, 0.05%)</title><rect x="892.5" y="3107.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="895.5" y="3118.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (2 samples, 0.05%)</title><rect x="892.5" y="3091.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="895.5" y="3102.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (2 samples, 0.05%)</title><rect x="892.5" y="3075.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="895.5" y="3086.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (2 samples, 0.05%)</title><rect x="892.5" y="3059.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="895.5" y="3070.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (1 samples, 0.03%)</title><rect x="892.8" y="3043.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="895.8" y="3054.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (1 samples, 0.03%)</title><rect x="892.8" y="3027.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="895.8" y="3038.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (1 samples, 0.03%)</title><rect x="892.8" y="3011.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="895.8" y="3022.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/QuietWriter.flush (1 samples, 0.03%)</title><rect x="892.8" y="2995.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="895.8" y="3006.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flush (1 samples, 0.03%)</title><rect x="892.8" y="2979.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="895.8" y="2990.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flush (1 samples, 0.03%)</title><rect x="892.8" y="2963.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="895.8" y="2974.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlush (1 samples, 0.03%)</title><rect x="892.8" y="2947.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="895.8" y="2958.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (1 samples, 0.03%)</title><rect x="892.8" y="2931.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="895.8" y="2942.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (1 samples, 0.03%)</title><rect x="892.8" y="2915.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="895.8" y="2926.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (1 samples, 0.03%)</title><rect x="892.8" y="2899.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="895.8" y="2910.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.write (1 samples, 0.03%)</title><rect x="892.8" y="2883.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="895.8" y="2894.0"></text>
</g>
<g>
<title>org/apache/spark/ContextCleaner$$anon$1.run (6 samples, 0.15%)</title><rect x="893.1" y="3683.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="896.1" y="3694.0"></text>
</g>
<g>
<title>org/apache/spark/ContextCleaner.org$apache$spark$ContextCleaner$$keepCleaning (6 samples, 0.15%)</title><rect x="893.1" y="3667.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="896.1" y="3678.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryOrStopSparkContext (6 samples, 0.15%)</title><rect x="893.1" y="3651.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="896.1" y="3662.0"></text>
</g>
<g>
<title>org/apache/spark/ContextCleaner$$Lambda$652.0x0000000801b5efa0.apply$mcV$sp (6 samples, 0.15%)</title><rect x="893.1" y="3635.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="896.1" y="3646.0"></text>
</g>
<g>
<title>org/apache/spark/ContextCleaner.$anonfun$keepCleaning$1 (6 samples, 0.15%)</title><rect x="893.1" y="3619.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="896.1" y="3630.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.remove (2 samples, 0.05%)</title><rect x="893.1" y="3603.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="896.1" y="3614.0"></text>
</g>
<g>
<title>java/lang/Object.wait (1 samples, 0.03%)</title><rect x="893.1" y="3587.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="896.1" y="3598.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.03%)</title><rect x="893.1" y="3571.0" width="0.3" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="896.1" y="3582.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (1 samples, 0.03%)</title><rect x="893.1" y="3555.0" width="0.3" height="15" fill="#ec6868" rx="2" ry="2"/>
<text x="896.1" y="3566.0"></text>
</g>
<g>
<title>java/lang/ref/ReferenceQueue.reallyPoll (1 samples, 0.03%)</title><rect x="893.4" y="3587.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="896.4" y="3598.0"></text>
</g>
<g>
<title>scala/Option.foreach (4 samples, 0.10%)</title><rect x="893.7" y="3603.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="896.7" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/ContextCleaner$$Lambda$785.0x0000000801ba9958.apply (4 samples, 0.10%)</title><rect x="893.7" y="3587.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="896.7" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/ContextCleaner.$anonfun$keepCleaning$3$adapted (4 samples, 0.10%)</title><rect x="893.7" y="3571.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="896.7" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/ContextCleaner.$anonfun$keepCleaning$3 (4 samples, 0.10%)</title><rect x="893.7" y="3555.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="896.7" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/ContextCleaner.doCleanupBroadcast (4 samples, 0.10%)</title><rect x="893.7" y="3539.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="896.7" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/BroadcastManager.unbroadcast (4 samples, 0.10%)</title><rect x="893.7" y="3523.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="896.7" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcastFactory.unbroadcast (4 samples, 0.10%)</title><rect x="893.7" y="3507.0" width="1.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="896.7" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.unpersist (4 samples, 0.10%)</title><rect x="893.7" y="3491.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="896.7" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.logDebug (1 samples, 0.03%)</title><rect x="893.7" y="3475.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="896.7" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logDebug$ (1 samples, 0.03%)</title><rect x="893.7" y="3459.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="896.7" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logDebug (1 samples, 0.03%)</title><rect x="893.7" y="3443.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="896.7" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.log (1 samples, 0.03%)</title><rect x="893.7" y="3427.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="896.7" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMaster.removeBroadcast (3 samples, 0.08%)</title><rect x="894.0" y="3475.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="897.0" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (3 samples, 0.08%)</title><rect x="894.0" y="3459.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="897.0" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (3 samples, 0.08%)</title><rect x="894.0" y="3443.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="897.0" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.ask (3 samples, 0.08%)</title><rect x="894.0" y="3427.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="897.0" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.askAbortable (3 samples, 0.08%)</title><rect x="894.0" y="3411.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="897.0" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.askAbortable (3 samples, 0.08%)</title><rect x="894.0" y="3395.0" width="0.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="897.0" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postLocalMessage (1 samples, 0.03%)</title><rect x="894.0" y="3379.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="897.0" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/Dispatcher.postMessage (1 samples, 0.03%)</title><rect x="894.0" y="3363.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="897.0" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/DedicatedMessageLoop.post (1 samples, 0.03%)</title><rect x="894.0" y="3347.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="897.0" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/MessageLoop.setActive (1 samples, 0.03%)</title><rect x="894.0" y="3331.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="897.0" y="3342.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.03%)</title><rect x="894.0" y="3315.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="897.0" y="3326.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.03%)</title><rect x="894.0" y="3299.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="897.0" y="3310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="894.0" y="3283.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="897.0" y="3294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="894.0" y="3267.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="897.0" y="3278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="894.0" y="3251.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="897.0" y="3262.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="894.0" y="3235.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="897.0" y="3246.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="894.0" y="3219.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="897.0" y="3230.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="894.0" y="3203.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="897.0" y="3214.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="894.0" y="3187.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="897.0" y="3198.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="894.0" y="3171.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="897.0" y="3182.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="894.0" y="3155.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="897.0" y="3166.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="894.0" y="3139.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="897.0" y="3150.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="894.0" y="3123.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="897.0" y="3134.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="894.0" y="3107.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="897.0" y="3118.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="894.0" y="3091.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="897.0" y="3102.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="894.0" y="3075.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="897.0" y="3086.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.mapTo (2 samples, 0.05%)</title><rect x="894.3" y="3379.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="897.3" y="3390.0"></text>
</g>
<g>
<title>scala/concurrent/Future.mapTo$ (2 samples, 0.05%)</title><rect x="894.3" y="3363.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="897.3" y="3374.0"></text>
</g>
<g>
<title>scala/concurrent/Future.mapTo (2 samples, 0.05%)</title><rect x="894.3" y="3347.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="897.3" y="3358.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="894.3" y="3331.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="897.3" y="3342.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="894.3" y="3315.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="897.3" y="3326.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="894.3" y="3299.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="897.3" y="3310.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateInstance (1 samples, 0.03%)</title><rect x="894.3" y="3283.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="897.3" y="3294.0"></text>
</g>
<g>
<title>Unsafe_AllocateInstance (1 samples, 0.03%)</title><rect x="894.3" y="3267.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="897.3" y="3278.0"></text>
</g>
<g>
<title>scala/concurrent/impl/Promise$DefaultPromise.map (1 samples, 0.03%)</title><rect x="894.6" y="3331.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="897.6" y="3342.0"></text>
</g>
<g>
<title>scala/concurrent/Future.map$ (1 samples, 0.03%)</title><rect x="894.6" y="3315.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="897.6" y="3326.0"></text>
</g>
<g>
<title>scala/concurrent/Future.map (1 samples, 0.03%)</title><rect x="894.6" y="3299.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="897.6" y="3310.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="894.6" y="3283.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="897.6" y="3294.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="894.6" y="3267.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="897.6" y="3278.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="894.6" y="3251.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="897.6" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/AsyncEventQueue$$anon$2.run (34 samples, 0.87%)</title><rect x="894.9" y="3683.0" width="10.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="897.9" y="3694.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryOrStopSparkContext (34 samples, 0.87%)</title><rect x="894.9" y="3667.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="897.9" y="3678.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/AsyncEventQueue$$anon$2$$Lambda$657.0x0000000801b5fc38.apply$mcV$sp (34 samples, 0.87%)</title><rect x="894.9" y="3651.0" width="10.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="897.9" y="3662.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/AsyncEventQueue$$anon$2.$anonfun$run$1 (34 samples, 0.87%)</title><rect x="894.9" y="3635.0" width="10.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="897.9" y="3646.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/AsyncEventQueue.org$apache$spark$scheduler$AsyncEventQueue$$dispatch (34 samples, 0.87%)</title><rect x="894.9" y="3619.0" width="10.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="897.9" y="3630.0"></text>
</g>
<g>
<title>scala/util/DynamicVariable.withValue (34 samples, 0.87%)</title><rect x="894.9" y="3603.0" width="10.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="897.9" y="3614.0"></text>
</g>
<g>
<title>scala/runtime/java8/JFunction0$mcJ$sp.apply (34 samples, 0.87%)</title><rect x="894.9" y="3587.0" width="10.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="897.9" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/AsyncEventQueue$$Lambda$658.0x0000000801b59ba0.apply$mcJ$sp (34 samples, 0.87%)</title><rect x="894.9" y="3571.0" width="10.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="897.9" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/AsyncEventQueue.$anonfun$dispatch$1 (34 samples, 0.87%)</title><rect x="894.9" y="3555.0" width="10.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="897.9" y="3566.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="895.2" y="3539.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.2" y="3550.0"></text>
</g>
<g>
<title>com/codahale/metrics/Timer$Context.stop (4 samples, 0.10%)</title><rect x="895.5" y="3539.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="898.5" y="3550.0"></text>
</g>
<g>
<title>com/codahale/metrics/Timer.update (4 samples, 0.10%)</title><rect x="895.5" y="3523.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.5" y="3534.0"></text>
</g>
<g>
<title>com/codahale/metrics/Timer.update (4 samples, 0.10%)</title><rect x="895.5" y="3507.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="898.5" y="3518.0"></text>
</g>
<g>
<title>com/codahale/metrics/Histogram.update (4 samples, 0.10%)</title><rect x="895.5" y="3491.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="898.5" y="3502.0"></text>
</g>
<g>
<title>com/codahale/metrics/ExponentiallyDecayingReservoir.update (4 samples, 0.10%)</title><rect x="895.5" y="3475.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="898.5" y="3486.0"></text>
</g>
<g>
<title>com/codahale/metrics/ExponentiallyDecayingReservoir.update (4 samples, 0.10%)</title><rect x="895.5" y="3459.0" width="1.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="898.5" y="3470.0"></text>
</g>
<g>
<title>com/codahale/metrics/ExponentiallyDecayingReservoir.lockForRegularUsage (1 samples, 0.03%)</title><rect x="895.5" y="3443.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="898.5" y="3454.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.03%)</title><rect x="895.5" y="3427.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="898.5" y="3438.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.03%)</title><rect x="895.5" y="3411.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="898.5" y="3422.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.03%)</title><rect x="895.5" y="3395.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="898.5" y="3406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (1 samples, 0.03%)</title><rect x="895.5" y="3379.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="898.5" y="3390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.apparentlyFirstQueuedIsExclusive (1 samples, 0.03%)</title><rect x="895.5" y="3363.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="898.5" y="3374.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (2 samples, 0.05%)</title><rect x="895.8" y="3443.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="898.8" y="3454.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (2 samples, 0.05%)</title><rect x="895.8" y="3427.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="898.8" y="3438.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.remove (1 samples, 0.03%)</title><rect x="896.4" y="3443.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="899.4" y="3454.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doRemove (1 samples, 0.03%)</title><rect x="896.4" y="3427.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="899.4" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/AsyncEventQueue.super$postToAll (27 samples, 0.69%)</title><rect x="896.7" y="3539.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="899.7" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/util/ListenerBus.postToAll$ (27 samples, 0.69%)</title><rect x="896.7" y="3523.0" width="8.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="899.7" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/util/ListenerBus.postToAll (26 samples, 0.66%)</title><rect x="897.0" y="3507.0" width="7.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="900.0" y="3518.0"></text>
</g>
<g>
<title>com/codahale/metrics/Timer$Context.stop (5 samples, 0.13%)</title><rect x="897.3" y="3491.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="900.3" y="3502.0"></text>
</g>
<g>
<title>com/codahale/metrics/Timer.update (5 samples, 0.13%)</title><rect x="897.3" y="3475.0" width="1.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="900.3" y="3486.0"></text>
</g>
<g>
<title>com/codahale/metrics/Timer.update (5 samples, 0.13%)</title><rect x="897.3" y="3459.0" width="1.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="900.3" y="3470.0"></text>
</g>
<g>
<title>com/codahale/metrics/Histogram.update (5 samples, 0.13%)</title><rect x="897.3" y="3443.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="900.3" y="3454.0"></text>
</g>
<g>
<title>com/codahale/metrics/ExponentiallyDecayingReservoir.update (5 samples, 0.13%)</title><rect x="897.3" y="3427.0" width="1.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="900.3" y="3438.0"></text>
</g>
<g>
<title>com/codahale/metrics/ExponentiallyDecayingReservoir.update (5 samples, 0.13%)</title><rect x="897.3" y="3411.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="900.3" y="3422.0"></text>
</g>
<g>
<title>com/codahale/metrics/ExponentiallyDecayingReservoir.lockForRegularUsage (1 samples, 0.03%)</title><rect x="897.3" y="3395.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="900.3" y="3406.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (1 samples, 0.03%)</title><rect x="897.3" y="3379.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="900.3" y="3390.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (1 samples, 0.03%)</title><rect x="897.3" y="3363.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="900.3" y="3374.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (1 samples, 0.03%)</title><rect x="897.3" y="3347.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="900.3" y="3358.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$NonfairSync.readerShouldBlock (1 samples, 0.03%)</title><rect x="897.3" y="3331.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="900.3" y="3342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.putIfAbsent (2 samples, 0.05%)</title><rect x="897.6" y="3395.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="900.6" y="3406.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (2 samples, 0.05%)</title><rect x="897.6" y="3379.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="900.6" y="3390.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="897.9" y="3363.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="900.9" y="3374.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="897.9" y="3347.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="900.9" y="3358.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="897.9" y="3331.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="900.9" y="3342.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.addIndices (1 samples, 0.03%)</title><rect x="897.9" y="3315.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="900.9" y="3326.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.remove (1 samples, 0.03%)</title><rect x="898.2" y="3395.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="901.2" y="3406.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doRemove (1 samples, 0.03%)</title><rect x="898.2" y="3379.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="901.2" y="3390.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextDouble (1 samples, 0.03%)</title><rect x="898.5" y="3395.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="901.5" y="3406.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadLocalRandom.nextSeed (1 samples, 0.03%)</title><rect x="898.5" y="3379.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="901.5" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/AsyncEventQueue.doPostEvent (20 samples, 0.51%)</title><rect x="898.8" y="3491.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="901.8" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/AsyncEventQueue.doPostEvent (20 samples, 0.51%)</title><rect x="898.8" y="3475.0" width="6.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="901.8" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/SparkListenerBus.doPostEvent$ (20 samples, 0.51%)</title><rect x="898.8" y="3459.0" width="6.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="901.8" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/SparkListenerBus.doPostEvent (20 samples, 0.51%)</title><rect x="898.8" y="3443.0" width="6.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="901.8" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/SparkListener.onBlockUpdated (1 samples, 0.03%)</title><rect x="898.8" y="3427.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="901.8" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.onExecutorMetricsUpdate (1 samples, 0.03%)</title><rect x="899.1" y="3427.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="902.1" y="3438.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray.foreach (1 samples, 0.03%)</title><rect x="899.1" y="3411.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="902.1" y="3422.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (1 samples, 0.03%)</title><rect x="899.1" y="3395.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="902.1" y="3406.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (1 samples, 0.03%)</title><rect x="899.1" y="3379.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="902.1" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener$$Lambda$2732.0x00000008024c83e0.apply (1 samples, 0.03%)</title><rect x="899.1" y="3363.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="902.1" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onExecutorMetricsUpdate$1$adapted (1 samples, 0.03%)</title><rect x="899.1" y="3347.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="902.1" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onExecutorMetricsUpdate$1 (1 samples, 0.03%)</title><rect x="899.1" y="3331.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="902.1" y="3342.0"></text>
</g>
<g>
<title>scala/Option.foreach (1 samples, 0.03%)</title><rect x="899.1" y="3315.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="902.1" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener$$Lambda$2733.0x00000008024c87c8.apply (1 samples, 0.03%)</title><rect x="899.1" y="3299.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.1" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onExecutorMetricsUpdate$2$adapted (1 samples, 0.03%)</title><rect x="899.1" y="3283.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="902.1" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onExecutorMetricsUpdate$2 (1 samples, 0.03%)</title><rect x="899.1" y="3267.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="902.1" y="3278.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSite (1 samples, 0.03%)</title><rect x="899.1" y="3251.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.1" y="3262.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.linkCallSiteImpl (1 samples, 0.03%)</title><rect x="899.1" y="3235.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="902.1" y="3246.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.linkToTargetMethod (1 samples, 0.03%)</title><rect x="899.1" y="3219.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="902.1" y="3230.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.callSiteForm (1 samples, 0.03%)</title><rect x="899.1" y="3203.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="902.1" y="3214.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$Name.&lt;init&gt; (1 samples, 0.03%)</title><rect x="899.1" y="3187.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="902.1" y="3198.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$NamedFunction.&lt;init&gt; (1 samples, 0.03%)</title><rect x="899.1" y="3171.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="902.1" y="3182.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers.basicInvoker (1 samples, 0.03%)</title><rect x="899.1" y="3155.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="902.1" y="3166.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="899.1" y="3139.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.1" y="3150.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="899.1" y="3123.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="902.1" y="3134.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.make (1 samples, 0.03%)</title><rect x="899.1" y="3107.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.1" y="3118.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="899.1" y="3091.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="902.1" y="3102.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="899.1" y="3075.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="902.1" y="3086.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.preparedLambdaForm (1 samples, 0.03%)</title><rect x="899.1" y="3059.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="902.1" y="3070.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.makePreparedLambdaForm (1 samples, 0.03%)</title><rect x="899.1" y="3043.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="902.1" y="3054.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm.compileToBytecode (1 samples, 0.03%)</title><rect x="899.1" y="3027.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="902.1" y="3038.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.generateCustomizedCode (1 samples, 0.03%)</title><rect x="899.1" y="3011.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="902.1" y="3022.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.lookupPregenerated (1 samples, 0.03%)</title><rect x="899.1" y="2995.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="902.1" y="3006.0"></text>
</g>
<g>
<title>java/lang/invoke/InvokerBytecodeGenerator.resolveFrom (1 samples, 0.03%)</title><rect x="899.1" y="2979.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="902.1" y="2990.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolveOrNull (1 samples, 0.03%)</title><rect x="899.1" y="2963.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="902.1" y="2974.0"></text>
</g>
<g>
<title>java/lang/invoke/MemberName$Factory.resolve (1 samples, 0.03%)</title><rect x="899.1" y="2947.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="902.1" y="2958.0"></text>
</g>
<g>
<title>java/lang/invoke/MethodHandleNatives.resolve (1 samples, 0.03%)</title><rect x="899.1" y="2931.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="902.1" y="2942.0"></text>
</g>
<g>
<title>java/lang/NoSuchMethodError.&lt;init&gt; (1 samples, 0.03%)</title><rect x="899.1" y="2915.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="902.1" y="2926.0"></text>
</g>
<g>
<title>java/lang/IncompatibleClassChangeError.&lt;init&gt; (1 samples, 0.03%)</title><rect x="899.1" y="2899.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="902.1" y="2910.0"></text>
</g>
<g>
<title>java/lang/LinkageError.&lt;init&gt; (1 samples, 0.03%)</title><rect x="899.1" y="2883.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="902.1" y="2894.0"></text>
</g>
<g>
<title>java/lang/Error.&lt;init&gt; (1 samples, 0.03%)</title><rect x="899.1" y="2867.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="902.1" y="2878.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="899.1" y="2851.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.1" y="2862.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="899.1" y="2835.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.1" y="2846.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="899.1" y="2819.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="902.1" y="2830.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 0.03%)</title><rect x="899.1" y="2803.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="902.1" y="2814.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.03%)</title><rect x="899.1" y="2787.0" width="0.3" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="902.1" y="2798.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="899.1" y="2771.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="902.1" y="2782.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="899.1" y="2755.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="902.1" y="2766.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.onJobStart (10 samples, 0.25%)</title><rect x="899.4" y="3427.0" width="3.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="902.4" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.liveUpdate (1 samples, 0.03%)</title><rect x="899.7" y="3411.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="902.7" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.update (1 samples, 0.03%)</title><rect x="899.7" y="3395.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="902.7" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/status/LiveEntity.write (1 samples, 0.03%)</title><rect x="899.7" y="3379.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="902.7" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore.write (1 samples, 0.03%)</title><rect x="899.7" y="3363.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.7" y="3374.0"></text>
</g>
<g>
<title>scala/Option.map (1 samples, 0.03%)</title><rect x="899.7" y="3347.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.7" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore$$Lambda$683.0x0000000801b74b88.apply (1 samples, 0.03%)</title><rect x="899.7" y="3331.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="902.7" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore.$anonfun$write$1 (1 samples, 0.03%)</title><rect x="899.7" y="3315.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="902.7" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore$LatchedTriggers.fireOnce (1 samples, 0.03%)</title><rect x="899.7" y="3299.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="902.7" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore.doAsync (1 samples, 0.03%)</title><rect x="899.7" y="3283.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="902.7" y="3294.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.submit (1 samples, 0.03%)</title><rect x="899.7" y="3267.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.7" y="3278.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (1 samples, 0.03%)</title><rect x="899.7" y="3251.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="902.7" y="3262.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (1 samples, 0.03%)</title><rect x="899.7" y="3235.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="902.7" y="3246.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray.foreach (8 samples, 0.20%)</title><rect x="900.0" y="3411.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="903.0" y="3422.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (8 samples, 0.20%)</title><rect x="900.0" y="3395.0" width="2.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="903.0" y="3406.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (8 samples, 0.20%)</title><rect x="900.0" y="3379.0" width="2.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="903.0" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener$$Lambda$1930.0x00000008021c5000.apply (2 samples, 0.05%)</title><rect x="900.0" y="3363.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="903.0" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onJobStart$10$adapted (2 samples, 0.05%)</title><rect x="900.0" y="3347.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="903.0" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onJobStart$10 (2 samples, 0.05%)</title><rect x="900.0" y="3331.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="903.0" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.getOrCreateStage (1 samples, 0.03%)</title><rect x="900.0" y="3315.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="903.0" y="3326.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfAbsent (1 samples, 0.03%)</title><rect x="900.0" y="3299.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="903.0" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener$$Lambda$1931.0x00000008021c5990.apply (1 samples, 0.03%)</title><rect x="900.0" y="3283.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="903.0" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$getOrCreateStage$1 (1 samples, 0.03%)</title><rect x="900.0" y="3267.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="903.0" y="3278.0"></text>
</g>
<g>
<title>org/apache/spark/status/LiveStage.&lt;init&gt; (1 samples, 0.03%)</title><rect x="900.0" y="3251.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="903.0" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.liveUpdate (1 samples, 0.03%)</title><rect x="900.3" y="3315.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="903.3" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.update (1 samples, 0.03%)</title><rect x="900.3" y="3299.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="903.3" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/status/LiveEntity.write (1 samples, 0.03%)</title><rect x="900.3" y="3283.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="903.3" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore.write (1 samples, 0.03%)</title><rect x="900.3" y="3267.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="903.3" y="3278.0"></text>
</g>
<g>
<title>scala/Option.map (1 samples, 0.03%)</title><rect x="900.3" y="3251.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="903.3" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore$$Lambda$683.0x0000000801b74b88.apply (1 samples, 0.03%)</title><rect x="900.3" y="3235.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="903.3" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore.$anonfun$write$1 (1 samples, 0.03%)</title><rect x="900.3" y="3219.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="903.3" y="3230.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore$LatchedTriggers.fireOnce (1 samples, 0.03%)</title><rect x="900.3" y="3203.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="903.3" y="3214.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore.doAsync (1 samples, 0.03%)</title><rect x="900.3" y="3187.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="903.3" y="3198.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$DelegatedExecutorService.submit (1 samples, 0.03%)</title><rect x="900.3" y="3171.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="903.3" y="3182.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (1 samples, 0.03%)</title><rect x="900.3" y="3155.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="903.3" y="3166.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1 samples, 0.03%)</title><rect x="900.3" y="3139.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="903.3" y="3150.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.03%)</title><rect x="900.3" y="3123.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="903.3" y="3134.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.03%)</title><rect x="900.3" y="3107.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="903.3" y="3118.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="900.3" y="3091.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="903.3" y="3102.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="900.3" y="3075.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="903.3" y="3086.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="900.3" y="3059.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="903.3" y="3070.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="900.3" y="3043.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="903.3" y="3054.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="900.3" y="3027.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="903.3" y="3038.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="900.3" y="3011.0" width="0.3" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="903.3" y="3022.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="900.3" y="2995.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="903.3" y="3006.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="900.3" y="2979.0" width="0.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="903.3" y="2990.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="900.3" y="2963.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="903.3" y="2974.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="900.3" y="2947.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="903.3" y="2958.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="900.3" y="2931.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="903.3" y="2942.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="900.3" y="2915.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="903.3" y="2926.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="900.3" y="2899.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="903.3" y="2910.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="900.3" y="2883.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="903.3" y="2894.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener$$Lambda$1944.0x00000008021cb5d8.apply (6 samples, 0.15%)</title><rect x="900.6" y="3363.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="903.6" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onJobStart$11$adapted (6 samples, 0.15%)</title><rect x="900.6" y="3347.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="903.6" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onJobStart$11 (6 samples, 0.15%)</title><rect x="900.6" y="3331.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="903.6" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$.makeOperationGraph (6 samples, 0.15%)</title><rect x="900.6" y="3315.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="903.6" y="3326.0"></text>
</g>
<g>
<title>scala/collection/AbstractSeq.sortBy (1 samples, 0.03%)</title><rect x="900.6" y="3299.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="903.6" y="3310.0"></text>
</g>
<g>
<title>scala/collection/SeqLike.sortBy$ (1 samples, 0.03%)</title><rect x="900.6" y="3283.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="903.6" y="3294.0"></text>
</g>
<g>
<title>scala/collection/SeqLike.sortBy (1 samples, 0.03%)</title><rect x="900.6" y="3267.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="903.6" y="3278.0"></text>
</g>
<g>
<title>scala/collection/AbstractSeq.sorted (1 samples, 0.03%)</title><rect x="900.6" y="3251.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="903.6" y="3262.0"></text>
</g>
<g>
<title>scala/collection/SeqLike.sorted$ (1 samples, 0.03%)</title><rect x="900.6" y="3235.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="903.6" y="3246.0"></text>
</g>
<g>
<title>scala/collection/SeqLike.sorted (1 samples, 0.03%)</title><rect x="900.6" y="3219.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="903.6" y="3230.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="900.6" y="3203.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="903.6" y="3214.0"></text>
</g>
<g>
<title>scala/collection/immutable/List.foreach (5 samples, 0.13%)</title><rect x="900.9" y="3299.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="903.9" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$$$Lambda$1946.0x00000008021d43d8.apply (5 samples, 0.13%)</title><rect x="900.9" y="3283.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="903.9" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$.$anonfun$makeOperationGraph$2$adapted (5 samples, 0.13%)</title><rect x="900.9" y="3267.0" width="1.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="903.9" y="3278.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$.$anonfun$makeOperationGraph$2 (5 samples, 0.13%)</title><rect x="900.9" y="3251.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="903.9" y="3262.0"></text>
</g>
<g>
<title>scala/Option.foreach (1 samples, 0.03%)</title><rect x="900.9" y="3235.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="903.9" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$$$Lambda$1959.0x00000008021d74d0.apply (1 samples, 0.03%)</title><rect x="900.9" y="3219.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="903.9" y="3230.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$.$anonfun$makeOperationGraph$12$adapted (1 samples, 0.03%)</title><rect x="900.9" y="3203.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="903.9" y="3214.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$.$anonfun$makeOperationGraph$12 (1 samples, 0.03%)</title><rect x="900.9" y="3187.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="903.9" y="3198.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationCluster.childClusters (1 samples, 0.03%)</title><rect x="900.9" y="3171.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="903.9" y="3182.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterator.toSeq (1 samples, 0.03%)</title><rect x="900.9" y="3155.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="903.9" y="3166.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.toSeq$ (1 samples, 0.03%)</title><rect x="900.9" y="3139.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="903.9" y="3150.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.toSeq (1 samples, 0.03%)</title><rect x="900.9" y="3123.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="903.9" y="3134.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterator.toStream (1 samples, 0.03%)</title><rect x="900.9" y="3107.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="903.9" y="3118.0"></text>
</g>
<g>
<title>scala/collection/Iterator.toStream$ (1 samples, 0.03%)</title><rect x="900.9" y="3091.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="903.9" y="3102.0"></text>
</g>
<g>
<title>scala/Option.map (2 samples, 0.05%)</title><rect x="901.2" y="3235.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="904.2" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$$$Lambda$1950.0x00000008021d5820.apply (2 samples, 0.05%)</title><rect x="901.2" y="3219.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="904.2" y="3230.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$.$anonfun$makeOperationGraph$7 (2 samples, 0.05%)</title><rect x="901.2" y="3203.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="904.2" y="3214.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDDOperationScope.getAllScopes (2 samples, 0.05%)</title><rect x="901.2" y="3187.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="904.2" y="3198.0"></text>
</g>
<g>
<title>scala/collection/generic/GenericCompanion.apply (1 samples, 0.03%)</title><rect x="901.2" y="3171.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="904.2" y="3182.0"></text>
</g>
<g>
<title>scala/collection/mutable/ListBuffer.$plus$plus$eq (1 samples, 0.03%)</title><rect x="901.2" y="3155.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="904.2" y="3166.0"></text>
</g>
<g>
<title>scala/collection/mutable/ListBuffer.$plus$plus$eq (1 samples, 0.03%)</title><rect x="901.2" y="3139.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="904.2" y="3150.0"></text>
</g>
<g>
<title>scala/collection/generic/Growable.$plus$plus$eq$ (1 samples, 0.03%)</title><rect x="901.2" y="3123.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="904.2" y="3134.0"></text>
</g>
<g>
<title>scala/collection/generic/Growable.$plus$plus$eq (1 samples, 0.03%)</title><rect x="901.2" y="3107.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="904.2" y="3118.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray.foreach (1 samples, 0.03%)</title><rect x="901.2" y="3091.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="904.2" y="3102.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (1 samples, 0.03%)</title><rect x="901.2" y="3075.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="904.2" y="3086.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (1 samples, 0.03%)</title><rect x="901.2" y="3059.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="904.2" y="3070.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="901.2" y="3043.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="904.2" y="3054.0"></text>
</g>
<g>
<title>scala/collection/immutable/List.$plus$plus (1 samples, 0.03%)</title><rect x="901.5" y="3171.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="904.5" y="3182.0"></text>
</g>
<g>
<title>scala/collection/immutable/List.map (1 samples, 0.03%)</title><rect x="901.8" y="3235.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="904.8" y="3246.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map$ (1 samples, 0.03%)</title><rect x="901.8" y="3219.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="904.8" y="3230.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map (1 samples, 0.03%)</title><rect x="901.8" y="3203.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="904.8" y="3214.0"></text>
</g>
<g>
<title>scala/collection/immutable/List.foreach (1 samples, 0.03%)</title><rect x="901.8" y="3187.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="904.8" y="3198.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike$$Lambda$89.0x0000000801826bb8.apply (1 samples, 0.03%)</title><rect x="901.8" y="3171.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="904.8" y="3182.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.$anonfun$map$1 (1 samples, 0.03%)</title><rect x="901.8" y="3155.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="904.8" y="3166.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$$$Lambda$1954.0x00000008021d6758.apply (1 samples, 0.03%)</title><rect x="901.8" y="3139.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="904.8" y="3150.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$.$anonfun$makeOperationGraph$9 (1 samples, 0.03%)</title><rect x="901.8" y="3123.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="904.8" y="3134.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashMap.getOrElseUpdate (1 samples, 0.03%)</title><rect x="902.1" y="3235.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="905.1" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$$$Lambda$1949.0x00000008021d5550.apply (1 samples, 0.03%)</title><rect x="902.1" y="3219.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="905.1" y="3230.0"></text>
</g>
<g>
<title>org/apache/spark/ui/scope/RDDOperationGraph$.$anonfun$makeOperationGraph$6 (1 samples, 0.03%)</title><rect x="902.1" y="3203.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="905.1" y="3214.0"></text>
</g>
<g>
<title>org/apache/spark/storage/StorageLevel.equals (1 samples, 0.03%)</title><rect x="902.1" y="3187.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="905.1" y="3198.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.onTaskEnd (7 samples, 0.18%)</title><rect x="902.4" y="3427.0" width="2.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="905.4" y="3438.0"></text>
</g>
<g>
<title>scala/Option.foreach (5 samples, 0.13%)</title><rect x="902.4" y="3411.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="905.4" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener$$Lambda$2183.0x0000000802278d60.apply (4 samples, 0.10%)</title><rect x="902.4" y="3395.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="905.4" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onTaskEnd$3 (4 samples, 0.10%)</title><rect x="902.4" y="3379.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="905.4" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/status/LiveStage.executorSummary (1 samples, 0.03%)</title><rect x="902.4" y="3363.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="905.4" y="3374.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashMap.getOrElseUpdate (1 samples, 0.03%)</title><rect x="902.4" y="3347.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="905.4" y="3358.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashMap.elemHashCode (1 samples, 0.03%)</title><rect x="902.4" y="3331.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="905.4" y="3342.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable$HashUtils.elemHashCode$ (1 samples, 0.03%)</title><rect x="902.4" y="3315.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="905.4" y="3326.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable$HashUtils.elemHashCode (1 samples, 0.03%)</title><rect x="902.4" y="3299.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="905.4" y="3310.0"></text>
</g>
<g>
<title>scala/collection/immutable/List.foreach (3 samples, 0.08%)</title><rect x="902.7" y="3363.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="905.7" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener$$Lambda$2200.0x0000000802280b38.apply (3 samples, 0.08%)</title><rect x="902.7" y="3347.0" width="0.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="905.7" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onTaskEnd$4$adapted (3 samples, 0.08%)</title><rect x="902.7" y="3331.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="905.7" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onTaskEnd$4 (3 samples, 0.08%)</title><rect x="902.7" y="3315.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="905.7" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.maybeUpdate (3 samples, 0.08%)</title><rect x="902.7" y="3299.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="905.7" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.update (3 samples, 0.08%)</title><rect x="902.7" y="3283.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="905.7" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/status/LiveEntity.write (3 samples, 0.08%)</title><rect x="902.7" y="3267.0" width="0.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="905.7" y="3278.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore.write (1 samples, 0.03%)</title><rect x="902.7" y="3251.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="905.7" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore.write (1 samples, 0.03%)</title><rect x="902.7" y="3235.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="905.7" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/util/kvstore/InMemoryStore.write (1 samples, 0.03%)</title><rect x="902.7" y="3219.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="905.7" y="3230.0"></text>
</g>
<g>
<title>org/apache/spark/util/kvstore/InMemoryStore$InMemoryLists.write (1 samples, 0.03%)</title><rect x="902.7" y="3203.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="905.7" y="3214.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.computeIfAbsent (1 samples, 0.03%)</title><rect x="902.7" y="3187.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="905.7" y="3198.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap$Node.&lt;init&gt; (1 samples, 0.03%)</title><rect x="902.7" y="3171.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="905.7" y="3182.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.03%)</title><rect x="902.7" y="3155.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="905.7" y="3166.0"></text>
</g>
<g>
<title>org/apache/spark/status/LiveJob.doUpdate (2 samples, 0.05%)</title><rect x="903.0" y="3251.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="906.0" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener$$Lambda$2206.0x0000000802282eb0.apply (1 samples, 0.03%)</title><rect x="903.6" y="3395.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="906.6" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onTaskEnd$6$adapted (1 samples, 0.03%)</title><rect x="903.6" y="3379.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="906.6" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onTaskEnd$6 (1 samples, 0.03%)</title><rect x="903.6" y="3363.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="906.6" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.update (1 samples, 0.03%)</title><rect x="903.6" y="3347.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="906.6" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/status/LiveEntity.write (1 samples, 0.03%)</title><rect x="903.6" y="3331.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="906.6" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore.write (1 samples, 0.03%)</title><rect x="903.6" y="3315.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="906.6" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/status/ElementTrackingStore.write (1 samples, 0.03%)</title><rect x="903.6" y="3299.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="906.6" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/util/kvstore/InMemoryStore.write (1 samples, 0.03%)</title><rect x="903.6" y="3283.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="906.6" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/util/kvstore/InMemoryStore$InMemoryLists.write (1 samples, 0.03%)</title><rect x="903.6" y="3267.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="906.6" y="3278.0"></text>
</g>
<g>
<title>org/apache/spark/util/kvstore/InMemoryStore$InstanceList.put (1 samples, 0.03%)</title><rect x="903.6" y="3251.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="906.6" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/util/kvstore/KVTypeInfo$MethodAccessor.get (1 samples, 0.03%)</title><rect x="903.6" y="3235.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="906.6" y="3246.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="903.6" y="3219.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="906.6" y="3230.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="903.6" y="3203.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="906.6" y="3214.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor27.invoke (1 samples, 0.03%)</title><rect x="903.6" y="3187.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="906.6" y="3198.0"></text>
</g>
<g>
<title>scala/Option.map (2 samples, 0.05%)</title><rect x="903.9" y="3411.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="906.9" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener$$Lambda$2181.0x00000008022786a8.apply (2 samples, 0.05%)</title><rect x="903.9" y="3395.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="906.9" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onTaskEnd$1 (2 samples, 0.05%)</title><rect x="903.9" y="3379.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="906.9" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.update (2 samples, 0.05%)</title><rect x="903.9" y="3363.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="906.9" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/status/LiveEntity.write (2 samples, 0.05%)</title><rect x="903.9" y="3347.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="906.9" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/status/LiveTask.doUpdate (2 samples, 0.05%)</title><rect x="903.9" y="3331.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="906.9" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskInfo.gettingResult (1 samples, 0.03%)</title><rect x="903.9" y="3315.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="906.9" y="3326.0"></text>
</g>
<g>
<title>scala/Enumeration$Val.toString (1 samples, 0.03%)</title><rect x="904.2" y="3315.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="907.2" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.onTaskGettingResult (1 samples, 0.03%)</title><rect x="904.5" y="3427.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="907.5" y="3438.0"></text>
</g>
<g>
<title>scala/Option.foreach (1 samples, 0.03%)</title><rect x="904.5" y="3411.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="907.5" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener$$Lambda$2616.0x0000000802460978.apply (1 samples, 0.03%)</title><rect x="904.5" y="3395.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="907.5" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onTaskGettingResult$1$adapted (1 samples, 0.03%)</title><rect x="904.5" y="3379.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="907.5" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/status/AppStatusListener.$anonfun$onTaskGettingResult$1 (1 samples, 0.03%)</title><rect x="904.5" y="3363.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="907.5" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/SparkListenerTaskGettingResult.equals (1 samples, 0.03%)</title><rect x="904.8" y="3539.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="907.8" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/util/EventLoop$$anon$1.run (67 samples, 1.71%)</title><rect x="905.1" y="3683.0" width="20.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="908.1" y="3694.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGSchedulerEventProcessLoop.onReceive (67 samples, 1.71%)</title><rect x="905.1" y="3667.0" width="20.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="908.1" y="3678.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGSchedulerEventProcessLoop.onReceive (67 samples, 1.71%)</title><rect x="905.1" y="3651.0" width="20.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="908.1" y="3662.0"></text>
</g>
<g>
<title>com/codahale/metrics/Timer$Context.stop (1 samples, 0.03%)</title><rect x="905.1" y="3635.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="908.1" y="3646.0"></text>
</g>
<g>
<title>com/codahale/metrics/Timer.update (1 samples, 0.03%)</title><rect x="905.1" y="3619.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="908.1" y="3630.0"></text>
</g>
<g>
<title>com/codahale/metrics/Timer.update (1 samples, 0.03%)</title><rect x="905.1" y="3603.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="908.1" y="3614.0"></text>
</g>
<g>
<title>com/codahale/metrics/Histogram.update (1 samples, 0.03%)</title><rect x="905.1" y="3587.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="908.1" y="3598.0"></text>
</g>
<g>
<title>com/codahale/metrics/ExponentiallyDecayingReservoir.update (1 samples, 0.03%)</title><rect x="905.1" y="3571.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="908.1" y="3582.0"></text>
</g>
<g>
<title>com/codahale/metrics/ExponentiallyDecayingReservoir.update (1 samples, 0.03%)</title><rect x="905.1" y="3555.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="908.1" y="3566.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (1 samples, 0.03%)</title><rect x="905.1" y="3539.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="908.1" y="3550.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (1 samples, 0.03%)</title><rect x="905.1" y="3523.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="908.1" y="3534.0"></text>
</g>
<g>
<title>com/codahale/metrics/Timer.time (1 samples, 0.03%)</title><rect x="905.4" y="3635.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="908.4" y="3646.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_opt_virtual_call_C(JavaThread*) (1 samples, 0.03%)</title><rect x="905.4" y="3619.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="908.4" y="3630.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="905.4" y="3603.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="908.4" y="3614.0"></text>
</g>
<g>
<title>SharedRuntime::resolve_sub_helper(JavaThread*, bool, bool, Thread*) (1 samples, 0.03%)</title><rect x="905.4" y="3587.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="908.4" y="3598.0"></text>
</g>
<g>
<title>SharedRuntime::find_callee_info_helper(JavaThread*, vframeStream&amp;, Bytecodes::Code&amp;, CallInfo&amp;, Thread*) (1 samples, 0.03%)</title><rect x="905.4" y="3571.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="908.4" y="3582.0"></text>
</g>
<g>
<title>Bytecode_invoke::static_target(Thread*) (1 samples, 0.03%)</title><rect x="905.4" y="3555.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="908.4" y="3566.0"></text>
</g>
<g>
<title>ConstantPool::impl_name_ref_at(int, bool) (1 samples, 0.03%)</title><rect x="905.4" y="3539.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="908.4" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGSchedulerEventProcessLoop.doOnReceive (65 samples, 1.66%)</title><rect x="905.7" y="3635.0" width="19.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="908.7" y="3646.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.handleJobSubmitted (45 samples, 1.15%)</title><rect x="905.7" y="3619.0" width="13.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="908.7" y="3630.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.createResultStage (1 samples, 0.03%)</title><rect x="905.7" y="3603.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="908.7" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/ResultStage.&lt;init&gt; (1 samples, 0.03%)</title><rect x="905.7" y="3587.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="908.7" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/Stage.&lt;init&gt; (1 samples, 0.03%)</title><rect x="905.7" y="3571.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="908.7" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/StageInfo$.fromStage (1 samples, 0.03%)</title><rect x="905.7" y="3555.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="908.7" y="3566.0"></text>
</g>
<g>
<title>scala/collection/immutable/List.$plus$plus (1 samples, 0.03%)</title><rect x="905.7" y="3539.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="908.7" y="3550.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.$plus$plus$ (1 samples, 0.03%)</title><rect x="905.7" y="3523.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="908.7" y="3534.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.$plus$plus (1 samples, 0.03%)</title><rect x="905.7" y="3507.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="908.7" y="3518.0"></text>
</g>
<g>
<title>scala/collection/mutable/ListBuffer.sizeHint (1 samples, 0.03%)</title><rect x="905.7" y="3491.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="908.7" y="3502.0"></text>
</g>
<g>
<title>scala/collection/mutable/Builder.sizeHint$ (1 samples, 0.03%)</title><rect x="905.7" y="3475.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="908.7" y="3486.0"></text>
</g>
<g>
<title>scala/collection/mutable/Builder.sizeHint (1 samples, 0.03%)</title><rect x="905.7" y="3459.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="908.7" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.logInfo (6 samples, 0.15%)</title><rect x="906.0" y="3603.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="909.0" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (6 samples, 0.15%)</title><rect x="906.0" y="3587.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="909.0" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (6 samples, 0.15%)</title><rect x="906.0" y="3571.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="909.0" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler$$Lambda$1886.0x00000008021b9af8.apply (1 samples, 0.03%)</title><rect x="906.0" y="3555.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="909.0" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.$anonfun$handleJobSubmitted$6 (1 samples, 0.03%)</title><rect x="906.0" y="3539.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="909.0" y="3550.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.03%)</title><rect x="906.0" y="3523.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="909.0" y="3534.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.03%)</title><rect x="906.0" y="3507.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="909.0" y="3518.0"></text>
</g>
<g>
<title>scala/collection/AbstractSeq.toString (1 samples, 0.03%)</title><rect x="906.0" y="3491.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="909.0" y="3502.0"></text>
</g>
<g>
<title>scala/collection/SeqLike.toString$ (1 samples, 0.03%)</title><rect x="906.0" y="3475.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="909.0" y="3486.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="906.0" y="3459.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="909.0" y="3470.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="906.0" y="3443.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="909.0" y="3454.0"></text>
</g>
<g>
<title>frame::interpreter_callee_receiver_addr(Symbol*) (1 samples, 0.03%)</title><rect x="906.0" y="3427.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="909.0" y="3438.0"></text>
</g>
<g>
<title>ArgumentSizeComputer::ArgumentSizeComputer(Symbol*) (1 samples, 0.03%)</title><rect x="906.0" y="3411.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="909.0" y="3422.0"></text>
</g>
<g>
<title>SignatureStream::next() (1 samples, 0.03%)</title><rect x="906.0" y="3395.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="909.0" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler$$Lambda$1887.0x00000008021b9dc8.apply (5 samples, 0.13%)</title><rect x="906.3" y="3555.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="909.3" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.$anonfun$handleJobSubmitted$7 (5 samples, 0.13%)</title><rect x="906.3" y="3539.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="909.3" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.getMissingParentStages (5 samples, 0.13%)</title><rect x="906.3" y="3523.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="909.3" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.visit$1 (4 samples, 0.10%)</title><rect x="906.3" y="3507.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="909.3" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.getCacheLocs (3 samples, 0.08%)</title><rect x="906.3" y="3491.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="909.3" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManagerMaster.getLocations (1 samples, 0.03%)</title><rect x="906.3" y="3475.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="909.3" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (1 samples, 0.03%)</title><rect x="906.3" y="3459.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="909.3" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/RpcEndpointRef.askSync (1 samples, 0.03%)</title><rect x="906.3" y="3443.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="909.3" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.ask (1 samples, 0.03%)</title><rect x="906.3" y="3427.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="909.3" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEndpointRef.askAbortable (1 samples, 0.03%)</title><rect x="906.3" y="3411.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="909.3" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/rpc/netty/NettyRpcEnv.askAbortable (1 samples, 0.03%)</title><rect x="906.3" y="3395.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="909.3" y="3406.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor.schedule (1 samples, 0.03%)</title><rect x="906.3" y="3379.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="909.3" y="3390.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor.delayedExecute (1 samples, 0.03%)</title><rect x="906.3" y="3363.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="909.3" y="3374.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.add (1 samples, 0.03%)</title><rect x="906.3" y="3347.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="909.3" y="3358.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.add (1 samples, 0.03%)</title><rect x="906.3" y="3331.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="909.3" y="3342.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$DelayedWorkQueue.offer (1 samples, 0.03%)</title><rect x="906.3" y="3315.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="909.3" y="3326.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="906.3" y="3299.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="909.3" y="3310.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="906.3" y="3283.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="909.3" y="3294.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="906.3" y="3267.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="909.3" y="3278.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="906.3" y="3251.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="909.3" y="3262.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="906.3" y="3235.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="909.3" y="3246.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="906.3" y="3219.0" width="0.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="909.3" y="3230.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="906.3" y="3203.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="909.3" y="3214.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="906.3" y="3187.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="909.3" y="3198.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="906.3" y="3171.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="909.3" y="3182.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="906.3" y="3155.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="909.3" y="3166.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="906.3" y="3139.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="909.3" y="3150.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="906.3" y="3123.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="909.3" y="3134.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="906.3" y="3107.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="909.3" y="3118.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="906.3" y="3091.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="909.3" y="3102.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.map (1 samples, 0.03%)</title><rect x="906.6" y="3475.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="909.6" y="3486.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map$ (1 samples, 0.03%)</title><rect x="906.6" y="3459.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="909.6" y="3470.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map (1 samples, 0.03%)</title><rect x="906.6" y="3443.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="909.6" y="3454.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.builder$1 (1 samples, 0.03%)</title><rect x="906.6" y="3427.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="909.6" y="3438.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="906.6" y="3411.0" width="0.3" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="909.6" y="3422.0"></text>
</g>
<g>
<title>scala/collection/generic/GenTraversableFactory.fill (1 samples, 0.03%)</title><rect x="906.9" y="3475.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="909.9" y="3486.0"></text>
</g>
<g>
<title>scala/collection/immutable/VectorBuilder.result (1 samples, 0.03%)</title><rect x="906.9" y="3459.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="909.9" y="3470.0"></text>
</g>
<g>
<title>scala/collection/immutable/VectorBuilder.result (1 samples, 0.03%)</title><rect x="906.9" y="3443.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="909.9" y="3454.0"></text>
</g>
<g>
<title>scala/collection/immutable/Vector.initFrom (1 samples, 0.03%)</title><rect x="906.9" y="3427.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="909.9" y="3438.0"></text>
</g>
<g>
<title>scala/collection/immutable/VectorPointer.initFrom$ (1 samples, 0.03%)</title><rect x="906.9" y="3411.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="909.9" y="3422.0"></text>
</g>
<g>
<title>scala/collection/immutable/VectorPointer.initFrom (1 samples, 0.03%)</title><rect x="906.9" y="3395.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="909.9" y="3406.0"></text>
</g>
<g>
<title>scala/collection/immutable/Vector.initFrom (1 samples, 0.03%)</title><rect x="906.9" y="3379.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="909.9" y="3390.0"></text>
</g>
<g>
<title>scala/collection/immutable/VectorPointer.initFrom$ (1 samples, 0.03%)</title><rect x="906.9" y="3363.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="909.9" y="3374.0"></text>
</g>
<g>
<title>scala/collection/immutable/VectorPointer.initFrom (1 samples, 0.03%)</title><rect x="906.9" y="3347.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="909.9" y="3358.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="906.9" y="3331.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="909.9" y="3342.0"></text>
</g>
<g>
<title>scala/collection/AbstractSeq.contains (1 samples, 0.03%)</title><rect x="907.2" y="3491.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="910.2" y="3502.0"></text>
</g>
<g>
<title>scala/collection/SeqLike.contains$ (1 samples, 0.03%)</title><rect x="907.2" y="3475.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="910.2" y="3486.0"></text>
</g>
<g>
<title>scala/collection/SeqLike.contains (1 samples, 0.03%)</title><rect x="907.2" y="3459.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="910.2" y="3470.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArraySeq.exists (1 samples, 0.03%)</title><rect x="907.2" y="3443.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="910.2" y="3454.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.exists$ (1 samples, 0.03%)</title><rect x="907.2" y="3427.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="910.2" y="3438.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.exists (1 samples, 0.03%)</title><rect x="907.2" y="3411.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="910.2" y="3422.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.prefixLengthImpl (1 samples, 0.03%)</title><rect x="907.2" y="3395.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="910.2" y="3406.0"></text>
</g>
<g>
<title>scala/collection/SeqLike$$Lambda$452.0x0000000801a5edc0.apply (1 samples, 0.03%)</title><rect x="907.2" y="3379.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="910.2" y="3390.0"></text>
</g>
<g>
<title>scala/collection/SeqLike.$anonfun$contains$1$adapted (1 samples, 0.03%)</title><rect x="907.2" y="3363.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="910.2" y="3374.0"></text>
</g>
<g>
<title>scala/collection/SeqLike.$anonfun$contains$1 (1 samples, 0.03%)</title><rect x="907.2" y="3347.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="910.2" y="3358.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals (1 samples, 0.03%)</title><rect x="907.2" y="3331.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="910.2" y="3342.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals2 (1 samples, 0.03%)</title><rect x="907.2" y="3315.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="910.2" y="3326.0"></text>
</g>
<g>
<title>scala/collection/AbstractSeq.equals (1 samples, 0.03%)</title><rect x="907.2" y="3299.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="910.2" y="3310.0"></text>
</g>
<g>
<title>scala/collection/GenSeqLike.equals$ (1 samples, 0.03%)</title><rect x="907.2" y="3283.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="910.2" y="3294.0"></text>
</g>
<g>
<title>scala/collection/GenSeqLike.equals (1 samples, 0.03%)</title><rect x="907.2" y="3267.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="910.2" y="3278.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayBuffer.sameElements (1 samples, 0.03%)</title><rect x="907.2" y="3251.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="910.2" y="3262.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.sameElements$ (1 samples, 0.03%)</title><rect x="907.2" y="3235.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="910.2" y="3246.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.toList (1 samples, 0.03%)</title><rect x="907.5" y="3507.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="910.5" y="3518.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.toList$ (1 samples, 0.03%)</title><rect x="907.5" y="3491.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="910.5" y="3502.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.toList (1 samples, 0.03%)</title><rect x="907.5" y="3475.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="910.5" y="3486.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.to (1 samples, 0.03%)</title><rect x="907.5" y="3459.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="910.5" y="3470.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.to$ (1 samples, 0.03%)</title><rect x="907.5" y="3443.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="910.5" y="3454.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.to (1 samples, 0.03%)</title><rect x="907.5" y="3427.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="910.5" y="3438.0"></text>
</g>
<g>
<title>scala/collection/mutable/ListBuffer.sizeHint (1 samples, 0.03%)</title><rect x="907.5" y="3411.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="910.5" y="3422.0"></text>
</g>
<g>
<title>scala/collection/mutable/Builder.sizeHint$ (1 samples, 0.03%)</title><rect x="907.5" y="3395.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="910.5" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.submitStage (38 samples, 0.97%)</title><rect x="907.8" y="3603.0" width="11.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="910.8" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.submitMissingTasks (38 samples, 0.97%)</title><rect x="907.8" y="3587.0" width="11.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="910.8" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.broadcast (22 samples, 0.56%)</title><rect x="908.1" y="3571.0" width="6.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="911.1" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.getCallSite (6 samples, 0.15%)</title><rect x="908.1" y="3555.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="911.1" y="3566.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="908.1" y="3539.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="911.1" y="3550.0"></text>
</g>
<g>
<title>scala/Option.getOrElse (5 samples, 0.13%)</title><rect x="908.4" y="3539.0" width="1.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="911.4" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext$$Lambda$1784.0x000000080216cb00.apply (5 samples, 0.13%)</title><rect x="908.4" y="3523.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="911.4" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.$anonfun$getCallSite$1 (5 samples, 0.13%)</title><rect x="908.4" y="3507.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="911.4" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.callSite$2 (5 samples, 0.13%)</title><rect x="908.4" y="3491.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="911.4" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/SparkContext.callSite$lzycompute$1 (5 samples, 0.13%)</title><rect x="908.4" y="3475.0" width="1.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="911.4" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.getCallSite (5 samples, 0.13%)</title><rect x="908.4" y="3459.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="911.4" y="3470.0"></text>
</g>
<g>
<title>java/lang/Thread.getStackTrace (4 samples, 0.10%)</title><rect x="908.4" y="3443.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="911.4" y="3454.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1 samples, 0.03%)</title><rect x="908.4" y="3427.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="911.4" y="3438.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1 samples, 0.03%)</title><rect x="908.4" y="3411.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="911.4" y="3422.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="908.4" y="3395.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="911.4" y="3406.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1 samples, 0.03%)</title><rect x="908.4" y="3379.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="911.4" y="3390.0"></text>
</g>
<g>
<title>Java_java_lang_Throwable_fillInStackTrace (1 samples, 0.03%)</title><rect x="908.4" y="3363.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="911.4" y="3374.0"></text>
</g>
<g>
<title>JVM_FillInStackTrace (1 samples, 0.03%)</title><rect x="908.4" y="3347.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="911.4" y="3358.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="908.4" y="3331.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="911.4" y="3342.0"></text>
</g>
<g>
<title>java_lang_Throwable::fill_in_stack_trace(Handle, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="908.4" y="3315.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="911.4" y="3326.0"></text>
</g>
<g>
<title>BacktraceBuilder::push(Method*, int, Thread*) (1 samples, 0.03%)</title><rect x="908.4" y="3299.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="911.4" y="3310.0"></text>
</g>
<g>
<title>java/lang/Throwable.getStackTrace (3 samples, 0.08%)</title><rect x="908.7" y="3427.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="911.7" y="3438.0"></text>
</g>
<g>
<title>java/lang/Throwable.getOurStackTrace (3 samples, 0.08%)</title><rect x="908.7" y="3411.0" width="0.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="911.7" y="3422.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.of (3 samples, 0.08%)</title><rect x="908.7" y="3395.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="911.7" y="3406.0"></text>
</g>
<g>
<title>java/lang/StackTraceElement.initStackTraceElements (3 samples, 0.08%)</title><rect x="908.7" y="3379.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="911.7" y="3390.0"></text>
</g>
<g>
<title>JVM_InitStackTraceElementArray (3 samples, 0.08%)</title><rect x="908.7" y="3363.0" width="0.9" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="911.7" y="3374.0"></text>
</g>
<g>
<title>java_lang_Throwable::get_stack_trace_elements(Handle, objArrayHandle, Thread*) (3 samples, 0.08%)</title><rect x="908.7" y="3347.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="911.7" y="3358.0"></text>
</g>
<g>
<title>java_lang_StackTraceElement::fill_in(Handle, InstanceKlass*, methodHandle const&amp;, int, int, Symbol*, Thread*) (3 samples, 0.08%)</title><rect x="908.7" y="3331.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="911.7" y="3342.0"></text>
</g>
<g>
<title>StringTable::intern(Symbol*, Thread*) (3 samples, 0.08%)</title><rect x="908.7" y="3315.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="911.7" y="3326.0"></text>
</g>
<g>
<title>StringTable::do_intern(Handle, unsigned short const*, int, unsigned long, Thread*) (2 samples, 0.05%)</title><rect x="908.7" y="3299.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="911.7" y="3310.0"></text>
</g>
<g>
<title>WeakHandle::WeakHandle(OopStorage*, Handle) (1 samples, 0.03%)</title><rect x="908.7" y="3283.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="911.7" y="3294.0"></text>
</g>
<g>
<title>OopStorage::allocate() (1 samples, 0.03%)</title><rect x="908.7" y="3267.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="911.7" y="3278.0"></text>
</g>
<g>
<title>void ConcurrentHashTable&lt;StringTableConfig, (MEMFLAGS)10&gt;::delete_in_bucket&lt;StringTableLookupOop&gt;(Thread*, ConcurrentHashTable&lt;StringTableConfig, (MEMFLAGS)10&gt;::Bucket*, StringTableLookupOop&amp;) (1 samples, 0.03%)</title><rect x="909.0" y="3283.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="912.0" y="3294.0"></text>
</g>
<g>
<title>GlobalCounter::write_synchronize() (1 samples, 0.03%)</title><rect x="909.0" y="3267.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="912.0" y="3278.0"></text>
</g>
<g>
<title>StringTable::intern(Handle, unsigned short const*, int, Thread*) (1 samples, 0.03%)</title><rect x="909.3" y="3299.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="912.3" y="3310.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.foreach (1 samples, 0.03%)</title><rect x="909.6" y="3443.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="912.6" y="3454.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (1 samples, 0.03%)</title><rect x="909.6" y="3427.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="912.6" y="3438.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (1 samples, 0.03%)</title><rect x="909.6" y="3411.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="912.6" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$$$Lambda$199.0x000000080189aee0.apply (1 samples, 0.03%)</title><rect x="909.6" y="3395.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="912.6" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.$anonfun$getCallSite$1 (1 samples, 0.03%)</title><rect x="909.6" y="3379.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="912.6" y="3390.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayBuffer.$plus$eq (1 samples, 0.03%)</title><rect x="909.6" y="3363.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="912.6" y="3374.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayBuffer.ensureSize (1 samples, 0.03%)</title><rect x="909.6" y="3347.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="912.6" y="3358.0"></text>
</g>
<g>
<title>scala/collection/mutable/ResizableArray.ensureSize$ (1 samples, 0.03%)</title><rect x="909.6" y="3331.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="912.6" y="3342.0"></text>
</g>
<g>
<title>scala/collection/mutable/ResizableArray.ensureSize (1 samples, 0.03%)</title><rect x="909.6" y="3315.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="912.6" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/BroadcastManager.newBroadcast (16 samples, 0.41%)</title><rect x="909.9" y="3555.0" width="4.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="912.9" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcastFactory.newBroadcast (16 samples, 0.41%)</title><rect x="909.9" y="3539.0" width="4.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="912.9" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.&lt;init&gt; (16 samples, 0.41%)</title><rect x="909.9" y="3523.0" width="4.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="912.9" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.setConf (2 samples, 0.05%)</title><rect x="909.9" y="3507.0" width="0.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="912.9" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/SparkConf.get (2 samples, 0.05%)</title><rect x="909.9" y="3491.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="912.9" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigEntryWithDefaultString.readFrom (2 samples, 0.05%)</title><rect x="909.9" y="3475.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="912.9" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigBuilder$$Lambda$113.0x0000000801841548.apply (2 samples, 0.05%)</title><rect x="909.9" y="3459.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="912.9" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigBuilder.$anonfun$bytesConf$1$adapted (2 samples, 0.05%)</title><rect x="909.9" y="3443.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="912.9" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigBuilder.$anonfun$bytesConf$1 (2 samples, 0.05%)</title><rect x="909.9" y="3427.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="912.9" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigHelpers$.byteFromString (2 samples, 0.05%)</title><rect x="909.9" y="3411.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="912.9" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/network/util/JavaUtils.byteStringAs (2 samples, 0.05%)</title><rect x="909.9" y="3395.0" width="0.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="912.9" y="3406.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.compile (2 samples, 0.05%)</title><rect x="909.9" y="3379.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="912.9" y="3390.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.&lt;init&gt; (2 samples, 0.05%)</title><rect x="909.9" y="3363.0" width="0.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="912.9" y="3374.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.compile (2 samples, 0.05%)</title><rect x="909.9" y="3347.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="912.9" y="3358.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.expr (1 samples, 0.03%)</title><rect x="910.2" y="3331.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="913.2" y="3342.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.sequence (1 samples, 0.03%)</title><rect x="910.2" y="3315.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="913.2" y="3326.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.group0 (1 samples, 0.03%)</title><rect x="910.2" y="3299.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="913.2" y="3310.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.expr (1 samples, 0.03%)</title><rect x="910.2" y="3283.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="913.2" y="3294.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.sequence (1 samples, 0.03%)</title><rect x="910.2" y="3267.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="913.2" y="3278.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.clazz (1 samples, 0.03%)</title><rect x="910.2" y="3251.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="913.2" y="3262.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.range (1 samples, 0.03%)</title><rect x="910.2" y="3235.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="913.2" y="3246.0"></text>
</g>
<g>
<title>java/util/regex/Pattern.Range (1 samples, 0.03%)</title><rect x="910.2" y="3219.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="913.2" y="3230.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="910.2" y="3203.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="913.2" y="3214.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="910.2" y="3187.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="913.2" y="3198.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="910.2" y="3171.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="913.2" y="3182.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.writeBlocks (14 samples, 0.36%)</title><rect x="910.6" y="3507.0" width="4.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="913.6" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.blockifyObject (6 samples, 0.15%)</title><rect x="910.6" y="3491.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="913.6" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.tryWithSafeFinally (4 samples, 0.10%)</title><rect x="910.6" y="3475.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="913.6" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$$Lambda$1759.0x0000000802168000.apply (4 samples, 0.10%)</title><rect x="910.6" y="3459.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="913.6" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$4 (4 samples, 0.10%)</title><rect x="910.6" y="3443.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="913.6" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializationStream.writeObject (4 samples, 0.10%)</title><rect x="910.6" y="3427.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="913.6" y="3438.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (4 samples, 0.10%)</title><rect x="910.6" y="3411.0" width="1.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="913.6" y="3422.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (4 samples, 0.10%)</title><rect x="910.6" y="3395.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="913.6" y="3406.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (4 samples, 0.10%)</title><rect x="910.6" y="3379.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="913.6" y="3390.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.write (4 samples, 0.10%)</title><rect x="910.6" y="3363.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="913.6" y="3374.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.drain (4 samples, 0.10%)</title><rect x="910.6" y="3347.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="913.6" y="3358.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4BlockOutputStream.write (4 samples, 0.10%)</title><rect x="910.6" y="3331.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="913.6" y="3342.0"></text>
</g>
<g>
<title>net/jpountz/lz4/LZ4BlockOutputStream.flushBufferedData (4 samples, 0.10%)</title><rect x="910.6" y="3315.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="913.6" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBufferOutputStream.write (4 samples, 0.10%)</title><rect x="910.6" y="3299.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="913.6" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBufferOutputStream.allocateNewChunkIfNeeded (4 samples, 0.10%)</title><rect x="910.6" y="3283.0" width="1.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="913.6" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$$Lambda$1756.0x0000000802160a80.apply (4 samples, 0.10%)</title><rect x="910.6" y="3267.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="913.6" y="3278.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$1$adapted (4 samples, 0.10%)</title><rect x="910.6" y="3251.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="913.6" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$1 (4 samples, 0.10%)</title><rect x="910.6" y="3235.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="913.6" y="3246.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4 samples, 0.10%)</title><rect x="910.6" y="3219.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="913.6" y="3230.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.10%)</title><rect x="910.6" y="3203.0" width="1.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="913.6" y="3214.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (4 samples, 0.10%)</title><rect x="910.6" y="3187.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="913.6" y="3198.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (4 samples, 0.10%)</title><rect x="910.6" y="3171.0" width="1.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="913.6" y="3182.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.10%)</title><rect x="910.6" y="3155.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="913.6" y="3166.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.10%)</title><rect x="910.6" y="3139.0" width="1.2" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="913.6" y="3150.0"></text>
</g>
<g>
<title>org/apache/spark/util/io/ChunkedByteBufferOutputStream.toChunkedByteBuffer (1 samples, 0.03%)</title><rect x="911.8" y="3475.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="914.8" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$$Lambda$1756.0x0000000802160a80.apply (1 samples, 0.03%)</title><rect x="911.8" y="3459.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="914.8" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$1$adapted (1 samples, 0.03%)</title><rect x="911.8" y="3443.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="914.8" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$1 (1 samples, 0.03%)</title><rect x="911.8" y="3427.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="914.8" y="3438.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.03%)</title><rect x="911.8" y="3411.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="914.8" y="3422.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.03%)</title><rect x="911.8" y="3395.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="914.8" y="3406.0"></text>
</g>
<g>
<title>scala/Option.map (1 samples, 0.03%)</title><rect x="912.1" y="3475.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="915.1" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$$Lambda$1757.0x0000000802160e58.apply (1 samples, 0.03%)</title><rect x="912.1" y="3459.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="915.1" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$.$anonfun$blockifyObject$2 (1 samples, 0.03%)</title><rect x="912.1" y="3443.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="915.1" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/io/LZ4CompressionCodec.compressedOutputStream (1 samples, 0.03%)</title><rect x="912.1" y="3427.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="915.1" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/SparkConf.get (1 samples, 0.03%)</title><rect x="912.1" y="3411.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="915.1" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigEntryWithDefaultString.readFrom (1 samples, 0.03%)</title><rect x="912.1" y="3395.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="915.1" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigEntry.readString (1 samples, 0.03%)</title><rect x="912.1" y="3379.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="915.1" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/ConfigReader.get (1 samples, 0.03%)</title><rect x="912.1" y="3363.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="915.1" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/SparkConfigProvider.get (1 samples, 0.03%)</title><rect x="912.1" y="3347.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="915.1" y="3358.0"></text>
</g>
<g>
<title>scala/Option.orElse (1 samples, 0.03%)</title><rect x="912.1" y="3331.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.1" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/SparkConfigProvider$$Lambda$190.0x000000080186fcb0.apply (1 samples, 0.03%)</title><rect x="912.1" y="3315.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="915.1" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/internal/config/SparkConfigProvider.$anonfun$get$1 (1 samples, 0.03%)</title><rect x="912.1" y="3299.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="915.1" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/SparkConf$.getDeprecatedConfig (1 samples, 0.03%)</title><rect x="912.1" y="3283.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="915.1" y="3294.0"></text>
</g>
<g>
<title>scala/Option.flatMap (1 samples, 0.03%)</title><rect x="912.1" y="3267.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="915.1" y="3278.0"></text>
</g>
<g>
<title>org/apache/spark/SparkConf$$$Lambda$191.0x00000008018943e0.apply (1 samples, 0.03%)</title><rect x="912.1" y="3251.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="915.1" y="3262.0"></text>
</g>
<g>
<title>org/apache/spark/SparkConf$.$anonfun$getDeprecatedConfig$1 (1 samples, 0.03%)</title><rect x="912.1" y="3235.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="915.1" y="3246.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.putSingle (7 samples, 0.18%)</title><rect x="912.4" y="3491.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="915.4" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.putIterator (7 samples, 0.18%)</title><rect x="912.4" y="3475.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="915.4" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.doPutIterator (7 samples, 0.18%)</title><rect x="912.4" y="3459.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="915.4" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$doPut (7 samples, 0.18%)</title><rect x="912.4" y="3443.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="915.4" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$$Lambda$1736.0x00000008021527f0.apply (7 samples, 0.18%)</title><rect x="912.4" y="3427.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="915.4" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.$anonfun$doPutIterator$1 (7 samples, 0.18%)</title><rect x="912.4" y="3411.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="915.4" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.putIteratorAsValues (7 samples, 0.18%)</title><rect x="912.4" y="3395.0" width="2.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="915.4" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.putIterator (7 samples, 0.18%)</title><rect x="912.4" y="3379.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="915.4" y="3390.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1 samples, 0.03%)</title><rect x="912.4" y="3363.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="915.4" y="3374.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.newInvokeSpecial (1 samples, 0.03%)</title><rect x="912.4" y="3347.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="915.4" y="3358.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle.allocateInstance (1 samples, 0.03%)</title><rect x="912.4" y="3331.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="915.4" y="3342.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="912.4" y="3315.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="915.4" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.logInfo (4 samples, 0.10%)</title><rect x="912.7" y="3363.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="915.7" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (4 samples, 0.10%)</title><rect x="912.7" y="3347.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="915.7" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (4 samples, 0.10%)</title><rect x="912.7" y="3331.0" width="1.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="915.7" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore$$Lambda$1750.0x000000080215b108.apply (4 samples, 0.10%)</title><rect x="912.7" y="3315.0" width="1.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="915.7" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.$anonfun$putIterator$4 (4 samples, 0.10%)</title><rect x="912.7" y="3299.0" width="1.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="915.7" y="3310.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.bytesToString (4 samples, 0.10%)</title><rect x="912.7" y="3283.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="915.7" y="3294.0"></text>
</g>
<g>
<title>org/apache/spark/util/Utils$.bytesToString (4 samples, 0.10%)</title><rect x="912.7" y="3267.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="915.7" y="3278.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringOps.formatLocal (4 samples, 0.10%)</title><rect x="912.7" y="3251.0" width="1.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="915.7" y="3262.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.formatLocal$ (4 samples, 0.10%)</title><rect x="912.7" y="3235.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.7" y="3246.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.formatLocal (4 samples, 0.10%)</title><rect x="912.7" y="3219.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="915.7" y="3230.0"></text>
</g>
<g>
<title>java/lang/String.format (3 samples, 0.08%)</title><rect x="912.7" y="3203.0" width="0.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="915.7" y="3214.0"></text>
</g>
<g>
<title>java/util/Formatter.format (3 samples, 0.08%)</title><rect x="912.7" y="3187.0" width="0.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="915.7" y="3198.0"></text>
</g>
<g>
<title>java/util/Formatter.format (3 samples, 0.08%)</title><rect x="912.7" y="3171.0" width="0.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="915.7" y="3182.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (2 samples, 0.05%)</title><rect x="912.7" y="3155.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="915.7" y="3166.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.printFloat (2 samples, 0.05%)</title><rect x="912.7" y="3139.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="915.7" y="3150.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (2 samples, 0.05%)</title><rect x="912.7" y="3123.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="915.7" y="3134.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier.print (2 samples, 0.05%)</title><rect x="912.7" y="3107.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="915.7" y="3118.0"></text>
</g>
<g>
<title>java/math/BigDecimal.&lt;init&gt; (1 samples, 0.03%)</title><rect x="912.7" y="3091.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="915.7" y="3102.0"></text>
</g>
<g>
<title>java/math/BigDecimal.divideAndRoundByTenPow (1 samples, 0.03%)</title><rect x="912.7" y="3075.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="915.7" y="3086.0"></text>
</g>
<g>
<title>java/math/BigDecimal.divideAndRound (1 samples, 0.03%)</title><rect x="912.7" y="3059.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="915.7" y="3070.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divide (1 samples, 0.03%)</title><rect x="912.7" y="3043.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="915.7" y="3054.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.divideLongMagnitude (1 samples, 0.03%)</title><rect x="912.7" y="3027.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.7" y="3038.0"></text>
</g>
<g>
<title>java/math/MutableBigInteger.rightShift (1 samples, 0.03%)</title><rect x="912.7" y="3011.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="915.7" y="3022.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier$BigDecimalLayout.&lt;init&gt; (1 samples, 0.03%)</title><rect x="913.0" y="3091.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="916.0" y="3102.0"></text>
</g>
<g>
<title>java/util/Formatter$FormatSpecifier$BigDecimalLayout.layout (1 samples, 0.03%)</title><rect x="913.0" y="3075.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="916.0" y="3086.0"></text>
</g>
<g>
<title>java/math/BigInteger.toString (1 samples, 0.03%)</title><rect x="913.0" y="3059.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="916.0" y="3070.0"></text>
</g>
<g>
<title>java/math/BigInteger.toString (1 samples, 0.03%)</title><rect x="913.0" y="3043.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="916.0" y="3054.0"></text>
</g>
<g>
<title>java/util/Formatter.parse (1 samples, 0.03%)</title><rect x="913.3" y="3155.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="916.3" y="3166.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.find (1 samples, 0.03%)</title><rect x="913.3" y="3139.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="916.3" y="3150.0"></text>
</g>
<g>
<title>java/util/regex/Matcher.search (1 samples, 0.03%)</title><rect x="913.3" y="3123.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="916.3" y="3134.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Start.match (1 samples, 0.03%)</title><rect x="913.3" y="3107.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="916.3" y="3118.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (1 samples, 0.03%)</title><rect x="913.3" y="3091.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="916.3" y="3102.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.03%)</title><rect x="913.3" y="3075.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="916.3" y="3086.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.03%)</title><rect x="913.3" y="3059.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="916.3" y="3070.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (1 samples, 0.03%)</title><rect x="913.3" y="3043.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="916.3" y="3054.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharPropertyGreedy.match (1 samples, 0.03%)</title><rect x="913.3" y="3027.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="916.3" y="3038.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupTail.match (1 samples, 0.03%)</title><rect x="913.3" y="3011.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="916.3" y="3022.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BranchConn.match (1 samples, 0.03%)</title><rect x="913.3" y="2995.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="916.3" y="3006.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.03%)</title><rect x="913.3" y="2979.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="916.3" y="2990.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$Branch.match (1 samples, 0.03%)</title><rect x="913.3" y="2963.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="916.3" y="2974.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$GroupHead.match (1 samples, 0.03%)</title><rect x="913.3" y="2947.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="916.3" y="2958.0"></text>
</g>
<g>
<title>java/util/regex/Pattern$BmpCharProperty.match (1 samples, 0.03%)</title><rect x="913.3" y="2931.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="916.3" y="2942.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.map (1 samples, 0.03%)</title><rect x="913.6" y="3203.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="916.6" y="3214.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map$ (1 samples, 0.03%)</title><rect x="913.6" y="3187.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="916.6" y="3198.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.map (1 samples, 0.03%)</title><rect x="913.6" y="3171.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="916.6" y="3182.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.builder$1 (1 samples, 0.03%)</title><rect x="913.6" y="3155.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="916.6" y="3166.0"></text>
</g>
<g>
<title>scala/collection/generic/GenTraversableFactory$GenericCanBuildFrom.apply (1 samples, 0.03%)</title><rect x="913.6" y="3139.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="916.6" y="3150.0"></text>
</g>
<g>
<title>scala/collection/generic/GenTraversableFactory$GenericCanBuildFrom.apply (1 samples, 0.03%)</title><rect x="913.6" y="3123.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="916.6" y="3134.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.genericBuilder (1 samples, 0.03%)</title><rect x="913.6" y="3107.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="916.6" y="3118.0"></text>
</g>
<g>
<title>scala/collection/generic/GenericTraversableTemplate.genericBuilder$ (1 samples, 0.03%)</title><rect x="913.6" y="3091.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="916.6" y="3102.0"></text>
</g>
<g>
<title>scala/collection/generic/GenericTraversableTemplate.genericBuilder (1 samples, 0.03%)</title><rect x="913.6" y="3075.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="916.6" y="3086.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="913.6" y="3059.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="916.6" y="3070.0"></text>
</g>
<g>
<title>org/apache/spark/storage/memory/MemoryStore.reserveUnrollMemoryForThisTask (1 samples, 0.03%)</title><rect x="913.9" y="3363.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="916.9" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/memory/UnifiedMemoryManager.acquireUnrollMemory (1 samples, 0.03%)</title><rect x="913.9" y="3347.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="916.9" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/memory/UnifiedMemoryManager.acquireStorageMemory (1 samples, 0.03%)</title><rect x="913.9" y="3331.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="916.9" y="3342.0"></text>
</g>
<g>
<title>org/apache/spark/memory/MemoryPool.memoryFree (1 samples, 0.03%)</title><rect x="913.9" y="3315.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="916.9" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/memory/StorageMemoryPool.memoryUsed (1 samples, 0.03%)</title><rect x="913.9" y="3299.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="916.9" y="3310.0"></text>
</g>
<g>
<title>scala/util/Right$.apply (1 samples, 0.03%)</title><rect x="914.2" y="3363.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="917.2" y="3374.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.foreach (1 samples, 0.03%)</title><rect x="914.5" y="3491.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="917.5" y="3502.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (1 samples, 0.03%)</title><rect x="914.5" y="3475.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="917.5" y="3486.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (1 samples, 0.03%)</title><rect x="914.5" y="3459.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="917.5" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast$$Lambda$1773.0x000000080216b600.apply (1 samples, 0.03%)</title><rect x="914.5" y="3443.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="917.5" y="3454.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.$anonfun$writeBlocks$1$adapted (1 samples, 0.03%)</title><rect x="914.5" y="3427.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="917.5" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/broadcast/TorrentBroadcast.$anonfun$writeBlocks$1 (1 samples, 0.03%)</title><rect x="914.5" y="3411.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="917.5" y="3422.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.putBytes (1 samples, 0.03%)</title><rect x="914.5" y="3395.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="917.5" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater.save (1 samples, 0.03%)</title><rect x="914.5" y="3379.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="917.5" y="3390.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager.org$apache$spark$storage$BlockManager$$doPut (1 samples, 0.03%)</title><rect x="914.5" y="3363.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="917.5" y="3374.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater$$Lambda$1775.0x000000080216e588.apply (1 samples, 0.03%)</title><rect x="914.5" y="3347.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="917.5" y="3358.0"></text>
</g>
<g>
<title>org/apache/spark/storage/BlockManager$BlockStoreUpdater.$anonfun$save$1 (1 samples, 0.03%)</title><rect x="914.5" y="3331.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="917.5" y="3342.0"></text>
</g>
<g>
<title>I2C/C2I adapters (1 samples, 0.03%)</title><rect x="914.5" y="3315.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="917.5" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.partitions (1 samples, 0.03%)</title><rect x="914.8" y="3571.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="917.8" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.checkpointRDD (1 samples, 0.03%)</title><rect x="914.8" y="3555.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="917.8" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.logInfo (1 samples, 0.03%)</title><rect x="915.1" y="3571.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="918.1" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (1 samples, 0.03%)</title><rect x="915.1" y="3555.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="918.1" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (1 samples, 0.03%)</title><rect x="915.1" y="3539.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="918.1" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler$$Lambda$1978.0x00000008021e5d38.apply (1 samples, 0.03%)</title><rect x="915.1" y="3523.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="918.1" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.$anonfun$submitMissingTasks$7 (1 samples, 0.03%)</title><rect x="915.1" y="3507.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="918.1" y="3518.0"></text>
</g>
<g>
<title>java/lang/StringBuilder.append (1 samples, 0.03%)</title><rect x="915.1" y="3491.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="918.1" y="3502.0"></text>
</g>
<g>
<title>java/lang/String.valueOf (1 samples, 0.03%)</title><rect x="915.1" y="3475.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="918.1" y="3486.0"></text>
</g>
<g>
<title>scala/collection/AbstractSeq.toString (1 samples, 0.03%)</title><rect x="915.1" y="3459.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="918.1" y="3470.0"></text>
</g>
<g>
<title>scala/collection/SeqLike.toString$ (1 samples, 0.03%)</title><rect x="915.1" y="3443.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="918.1" y="3454.0"></text>
</g>
<g>
<title>scala/collection/SeqLike.toString (1 samples, 0.03%)</title><rect x="915.1" y="3427.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="918.1" y="3438.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.toString$ (1 samples, 0.03%)</title><rect x="915.1" y="3411.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="918.1" y="3422.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike.toString (1 samples, 0.03%)</title><rect x="915.1" y="3395.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="918.1" y="3406.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.mkString (1 samples, 0.03%)</title><rect x="915.1" y="3379.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="918.1" y="3390.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.mkString$ (1 samples, 0.03%)</title><rect x="915.1" y="3363.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="918.1" y="3374.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.mkString (1 samples, 0.03%)</title><rect x="915.1" y="3347.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="918.1" y="3358.0"></text>
</g>
<g>
<title>scala/collection/AbstractTraversable.addString (1 samples, 0.03%)</title><rect x="915.1" y="3331.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="918.1" y="3342.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.addString$ (1 samples, 0.03%)</title><rect x="915.1" y="3315.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="918.1" y="3326.0"></text>
</g>
<g>
<title>scala/collection/TraversableOnce.addString (1 samples, 0.03%)</title><rect x="915.1" y="3299.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="918.1" y="3310.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterable.foreach (1 samples, 0.03%)</title><rect x="915.1" y="3283.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="918.1" y="3294.0"></text>
</g>
<g>
<title>scala/collection/IterableLike.foreach$ (1 samples, 0.03%)</title><rect x="915.1" y="3267.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="918.1" y="3278.0"></text>
</g>
<g>
<title>scala/collection/IterableLike.foreach (1 samples, 0.03%)</title><rect x="915.1" y="3251.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="918.1" y="3262.0"></text>
</g>
<g>
<title>scala/collection/AbstractIterator.foreach (1 samples, 0.03%)</title><rect x="915.1" y="3235.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="918.1" y="3246.0"></text>
</g>
<g>
<title>scala/collection/Iterator.foreach$ (1 samples, 0.03%)</title><rect x="915.1" y="3219.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="918.1" y="3230.0"></text>
</g>
<g>
<title>scala/collection/Iterator.foreach (1 samples, 0.03%)</title><rect x="915.1" y="3203.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="918.1" y="3214.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="915.1" y="3187.0" width="0.3" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="918.1" y="3198.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/Stage.makeNewStageAttempt (1 samples, 0.03%)</title><rect x="915.4" y="3571.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="918.4" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/executor/TaskMetrics.register (1 samples, 0.03%)</title><rect x="915.4" y="3555.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="918.4" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/executor/TaskMetrics.nameToAccums (1 samples, 0.03%)</title><rect x="915.4" y="3539.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="918.4" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/executor/TaskMetrics.nameToAccums$lzycompute (1 samples, 0.03%)</title><rect x="915.4" y="3523.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="918.4" y="3534.0"></text>
</g>
<g>
<title>scala/Option$.option2Iterable (1 samples, 0.03%)</title><rect x="915.4" y="3507.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="918.4" y="3518.0"></text>
</g>
<g>
<title>scala/Option.toList (1 samples, 0.03%)</title><rect x="915.4" y="3491.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="918.4" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskSchedulerImpl.submitTasks (3 samples, 0.08%)</title><rect x="915.7" y="3571.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="918.7" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskSchedulerImpl.createTaskSetManager (3 samples, 0.08%)</title><rect x="915.7" y="3555.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="918.7" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskSetManager.&lt;init&gt; (3 samples, 0.08%)</title><rect x="915.7" y="3539.0" width="0.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="918.7" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/util/collection/MedianHeap.&lt;init&gt; (1 samples, 0.03%)</title><rect x="915.7" y="3523.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="918.7" y="3534.0"></text>
</g>
<g>
<title>scala/collection/generic/GenericOrderedCompanion.empty (1 samples, 0.03%)</title><rect x="915.7" y="3507.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="918.7" y="3518.0"></text>
</g>
<g>
<title>scala/collection/mutable/PriorityQueue$.newBuilder (1 samples, 0.03%)</title><rect x="915.7" y="3491.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="918.7" y="3502.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayOps$ofRef.zipWithIndex (1 samples, 0.03%)</title><rect x="916.0" y="3523.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="919.0" y="3534.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.zipWithIndex$ (1 samples, 0.03%)</title><rect x="916.0" y="3507.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="919.0" y="3518.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="916.0" y="3491.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="919.0" y="3502.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="916.0" y="3475.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="919.0" y="3486.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="916.0" y="3459.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="919.0" y="3470.0"></text>
</g>
<g>
<title>LinkResolver::runtime_resolve_special_method(CallInfo&amp;, LinkInfo const&amp;, methodHandle const&amp;, Handle, Thread*) (1 samples, 0.03%)</title><rect x="916.0" y="3443.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="919.0" y="3454.0"></text>
</g>
<g>
<title>CompilationPolicy::compile_if_required(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="916.0" y="3427.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="919.0" y="3438.0"></text>
</g>
<g>
<title>Method::is_not_compilable(int) const (1 samples, 0.03%)</title><rect x="916.0" y="3411.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="919.0" y="3422.0"></text>
</g>
<g>
<title>scala/runtime/RichDouble$.floor$extension (1 samples, 0.03%)</title><rect x="916.3" y="3523.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="919.3" y="3534.0"></text>
</g>
<g>
<title>scala/math/package$.floor (1 samples, 0.03%)</title><rect x="916.3" y="3507.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="919.3" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializerInstance.serialize (9 samples, 0.23%)</title><rect x="916.6" y="3571.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="919.6" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/serializer/JavaSerializationStream.writeObject (9 samples, 0.23%)</title><rect x="916.6" y="3555.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="919.6" y="3566.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (9 samples, 0.23%)</title><rect x="916.6" y="3539.0" width="2.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="919.6" y="3550.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (9 samples, 0.23%)</title><rect x="916.6" y="3523.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="919.6" y="3534.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (9 samples, 0.23%)</title><rect x="916.6" y="3507.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="919.6" y="3518.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (9 samples, 0.23%)</title><rect x="916.6" y="3491.0" width="2.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="919.6" y="3502.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (9 samples, 0.23%)</title><rect x="916.6" y="3475.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="919.6" y="3486.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (9 samples, 0.23%)</title><rect x="916.6" y="3459.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="919.6" y="3470.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (9 samples, 0.23%)</title><rect x="916.6" y="3443.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="919.6" y="3454.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (9 samples, 0.23%)</title><rect x="916.6" y="3427.0" width="2.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="919.6" y="3438.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (9 samples, 0.23%)</title><rect x="916.6" y="3411.0" width="2.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="919.6" y="3422.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (9 samples, 0.23%)</title><rect x="916.6" y="3395.0" width="2.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="919.6" y="3406.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (9 samples, 0.23%)</title><rect x="916.6" y="3379.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="919.6" y="3390.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (9 samples, 0.23%)</title><rect x="916.6" y="3363.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="919.6" y="3374.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.05%)</title><rect x="916.6" y="3347.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="919.6" y="3358.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="916.6" y="3331.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="919.6" y="3342.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="916.6" y="3315.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="919.6" y="3326.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="916.6" y="3299.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="919.6" y="3310.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="916.6" y="3283.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="919.6" y="3294.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="916.6" y="3267.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="919.6" y="3278.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="916.6" y="3251.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="919.6" y="3262.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="916.6" y="3235.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="919.6" y="3246.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="916.6" y="3219.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="919.6" y="3230.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="916.6" y="3203.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="919.6" y="3214.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="916.6" y="3187.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="919.6" y="3198.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="916.6" y="3171.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="919.6" y="3182.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="916.6" y="3155.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="919.6" y="3166.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="916.6" y="3139.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="919.6" y="3150.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="916.6" y="3123.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="919.6" y="3134.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="916.6" y="3107.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="919.6" y="3118.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="916.6" y="3091.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="919.6" y="3102.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="916.6" y="3075.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="919.6" y="3086.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="916.6" y="3059.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="919.6" y="3070.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="916.6" y="3043.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="919.6" y="3054.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="916.6" y="3027.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="919.6" y="3038.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.03%)</title><rect x="916.6" y="3011.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="919.6" y="3022.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.03%)</title><rect x="916.6" y="2995.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="919.6" y="3006.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.03%)</title><rect x="916.6" y="2979.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="919.6" y="2990.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.03%)</title><rect x="916.6" y="2963.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="919.6" y="2974.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDescriptor (1 samples, 0.03%)</title><rect x="916.6" y="2947.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="919.6" y="2958.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.writeNonProxy (1 samples, 0.03%)</title><rect x="916.6" y="2931.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="919.6" y="2942.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeTypeString (1 samples, 0.03%)</title><rect x="916.6" y="2915.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="919.6" y="2926.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (1 samples, 0.03%)</title><rect x="916.6" y="2899.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="919.6" y="2910.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.getUTFLength (1 samples, 0.03%)</title><rect x="916.6" y="2883.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="919.6" y="2894.0"></text>
</g>
<g>
<title>java/lang/String.getChars (1 samples, 0.03%)</title><rect x="916.6" y="2867.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="919.6" y="2878.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.03%)</title><rect x="916.9" y="3315.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="919.9" y="3326.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putIfAbsent (1 samples, 0.03%)</title><rect x="916.9" y="3299.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="919.9" y="3310.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (7 samples, 0.18%)</title><rect x="917.2" y="3347.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.2" y="3358.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (7 samples, 0.18%)</title><rect x="917.2" y="3331.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.2" y="3342.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (7 samples, 0.18%)</title><rect x="917.2" y="3315.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.2" y="3326.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor18.invoke (7 samples, 0.18%)</title><rect x="917.2" y="3299.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.2" y="3310.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.writeObject (7 samples, 0.18%)</title><rect x="917.2" y="3283.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="920.2" y="3294.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (7 samples, 0.18%)</title><rect x="917.2" y="3267.0" width="2.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="920.2" y="3278.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.18%)</title><rect x="917.2" y="3251.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.2" y="3262.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.18%)</title><rect x="917.2" y="3235.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.2" y="3246.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.18%)</title><rect x="917.2" y="3219.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.2" y="3230.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (7 samples, 0.18%)</title><rect x="917.2" y="3203.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.2" y="3214.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.18%)</title><rect x="917.2" y="3187.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.2" y="3198.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.18%)</title><rect x="917.2" y="3171.0" width="2.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="920.2" y="3182.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.18%)</title><rect x="917.2" y="3155.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="920.2" y="3166.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (7 samples, 0.18%)</title><rect x="917.2" y="3139.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.2" y="3150.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.18%)</title><rect x="917.2" y="3123.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="920.2" y="3134.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.18%)</title><rect x="917.2" y="3107.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.2" y="3118.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.18%)</title><rect x="917.2" y="3091.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="920.2" y="3102.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (7 samples, 0.18%)</title><rect x="917.2" y="3075.0" width="2.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="920.2" y="3086.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (7 samples, 0.18%)</title><rect x="917.2" y="3059.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.2" y="3070.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (7 samples, 0.18%)</title><rect x="917.2" y="3043.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.2" y="3054.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor18.invoke (7 samples, 0.18%)</title><rect x="917.2" y="3027.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.2" y="3038.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.writeObject (7 samples, 0.18%)</title><rect x="917.2" y="3011.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.2" y="3022.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (7 samples, 0.18%)</title><rect x="917.2" y="2995.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.2" y="3006.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.18%)</title><rect x="917.2" y="2979.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.2" y="2990.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.18%)</title><rect x="917.2" y="2963.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.2" y="2974.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.18%)</title><rect x="917.2" y="2947.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.2" y="2958.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (7 samples, 0.18%)</title><rect x="917.2" y="2931.0" width="2.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="920.2" y="2942.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.18%)</title><rect x="917.2" y="2915.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="920.2" y="2926.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.18%)</title><rect x="917.2" y="2899.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.2" y="2910.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.18%)</title><rect x="917.2" y="2883.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.2" y="2894.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (7 samples, 0.18%)</title><rect x="917.2" y="2867.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.2" y="2878.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.18%)</title><rect x="917.2" y="2851.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.2" y="2862.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.18%)</title><rect x="917.2" y="2835.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="920.2" y="2846.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.18%)</title><rect x="917.2" y="2819.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.2" y="2830.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (7 samples, 0.18%)</title><rect x="917.2" y="2803.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="920.2" y="2814.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (7 samples, 0.18%)</title><rect x="917.2" y="2787.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.2" y="2798.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (7 samples, 0.18%)</title><rect x="917.2" y="2771.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="920.2" y="2782.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor18.invoke (7 samples, 0.18%)</title><rect x="917.2" y="2755.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="920.2" y="2766.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.writeObject (7 samples, 0.18%)</title><rect x="917.2" y="2739.0" width="2.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.2" y="2750.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (7 samples, 0.18%)</title><rect x="917.2" y="2723.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.2" y="2734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.18%)</title><rect x="917.2" y="2707.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.2" y="2718.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.18%)</title><rect x="917.2" y="2691.0" width="2.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="920.2" y="2702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.18%)</title><rect x="917.2" y="2675.0" width="2.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="920.2" y="2686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (7 samples, 0.18%)</title><rect x="917.2" y="2659.0" width="2.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.2" y="2670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.18%)</title><rect x="917.2" y="2643.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.2" y="2654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.18%)</title><rect x="917.2" y="2627.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.2" y="2638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.18%)</title><rect x="917.2" y="2611.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.2" y="2622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (7 samples, 0.18%)</title><rect x="917.2" y="2595.0" width="2.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="920.2" y="2606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.18%)</title><rect x="917.2" y="2579.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.2" y="2590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.18%)</title><rect x="917.2" y="2563.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.2" y="2574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.18%)</title><rect x="917.2" y="2547.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.2" y="2558.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (7 samples, 0.18%)</title><rect x="917.2" y="2531.0" width="2.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.2" y="2542.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (7 samples, 0.18%)</title><rect x="917.2" y="2515.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.2" y="2526.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (7 samples, 0.18%)</title><rect x="917.2" y="2499.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.2" y="2510.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor18.invoke (7 samples, 0.18%)</title><rect x="917.2" y="2483.0" width="2.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.2" y="2494.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.writeObject (7 samples, 0.18%)</title><rect x="917.2" y="2467.0" width="2.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="920.2" y="2478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (7 samples, 0.18%)</title><rect x="917.2" y="2451.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="920.2" y="2462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.18%)</title><rect x="917.2" y="2435.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.2" y="2446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (7 samples, 0.18%)</title><rect x="917.2" y="2419.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="920.2" y="2430.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (7 samples, 0.18%)</title><rect x="917.2" y="2403.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.2" y="2414.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (7 samples, 0.18%)</title><rect x="917.2" y="2387.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.2" y="2398.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (7 samples, 0.18%)</title><rect x="917.2" y="2371.0" width="2.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.2" y="2382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (6 samples, 0.15%)</title><rect x="917.2" y="2355.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.2" y="2366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (6 samples, 0.15%)</title><rect x="917.2" y="2339.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.2" y="2350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (6 samples, 0.15%)</title><rect x="917.2" y="2323.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.2" y="2334.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (6 samples, 0.15%)</title><rect x="917.2" y="2307.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="920.2" y="2318.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (6 samples, 0.15%)</title><rect x="917.2" y="2291.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.2" y="2302.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (6 samples, 0.15%)</title><rect x="917.2" y="2275.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.2" y="2286.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (6 samples, 0.15%)</title><rect x="917.2" y="2259.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.2" y="2270.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (6 samples, 0.15%)</title><rect x="917.2" y="2243.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.2" y="2254.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (6 samples, 0.15%)</title><rect x="917.2" y="2227.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.2" y="2238.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor18.invoke (6 samples, 0.15%)</title><rect x="917.2" y="2211.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.2" y="2222.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.writeObject (6 samples, 0.15%)</title><rect x="917.2" y="2195.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.2" y="2206.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (6 samples, 0.15%)</title><rect x="917.2" y="2179.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="920.2" y="2190.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (6 samples, 0.15%)</title><rect x="917.2" y="2163.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="920.2" y="2174.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (6 samples, 0.15%)</title><rect x="917.2" y="2147.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.2" y="2158.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (6 samples, 0.15%)</title><rect x="917.2" y="2131.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.2" y="2142.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (6 samples, 0.15%)</title><rect x="917.2" y="2115.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.2" y="2126.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (6 samples, 0.15%)</title><rect x="917.2" y="2099.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.2" y="2110.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (6 samples, 0.15%)</title><rect x="917.2" y="2083.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.2" y="2094.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (6 samples, 0.15%)</title><rect x="917.2" y="2067.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="920.2" y="2078.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (6 samples, 0.15%)</title><rect x="917.2" y="2051.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.2" y="2062.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (6 samples, 0.15%)</title><rect x="917.2" y="2035.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.2" y="2046.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (6 samples, 0.15%)</title><rect x="917.2" y="2019.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="920.2" y="2030.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (6 samples, 0.15%)</title><rect x="917.2" y="2003.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.2" y="2014.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (6 samples, 0.15%)</title><rect x="917.2" y="1987.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="920.2" y="1998.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (6 samples, 0.15%)</title><rect x="917.2" y="1971.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="920.2" y="1982.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (6 samples, 0.15%)</title><rect x="917.2" y="1955.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="920.2" y="1966.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor18.invoke (5 samples, 0.13%)</title><rect x="917.2" y="1939.0" width="1.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.2" y="1950.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.writeObject (5 samples, 0.13%)</title><rect x="917.2" y="1923.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.2" y="1934.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (5 samples, 0.13%)</title><rect x="917.2" y="1907.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="920.2" y="1918.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (5 samples, 0.13%)</title><rect x="917.2" y="1891.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="920.2" y="1902.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (5 samples, 0.13%)</title><rect x="917.2" y="1875.0" width="1.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.2" y="1886.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (5 samples, 0.13%)</title><rect x="917.2" y="1859.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.2" y="1870.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (5 samples, 0.13%)</title><rect x="917.2" y="1843.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="920.2" y="1854.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (5 samples, 0.13%)</title><rect x="917.2" y="1827.0" width="1.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="920.2" y="1838.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (5 samples, 0.13%)</title><rect x="917.2" y="1811.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="920.2" y="1822.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (5 samples, 0.13%)</title><rect x="917.2" y="1795.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.2" y="1806.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (5 samples, 0.13%)</title><rect x="917.2" y="1779.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.2" y="1790.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (5 samples, 0.13%)</title><rect x="917.2" y="1763.0" width="1.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="920.2" y="1774.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (5 samples, 0.13%)</title><rect x="917.2" y="1747.0" width="1.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="920.2" y="1758.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (5 samples, 0.13%)</title><rect x="917.2" y="1731.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.2" y="1742.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="917.2" y="1715.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.2" y="1726.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.2" y="1699.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="920.2" y="1710.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="917.2" y="1683.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.2" y="1694.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.2" y="1667.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.2" y="1678.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.2" y="1651.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.2" y="1662.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.2" y="1635.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.2" y="1646.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="917.2" y="1619.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.2" y="1630.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.2" y="1603.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.2" y="1614.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="917.2" y="1587.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="920.2" y="1598.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.2" y="1571.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="920.2" y="1582.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.2" y="1555.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.2" y="1566.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.2" y="1539.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.2" y="1550.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="917.2" y="1523.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.2" y="1534.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.2" y="1507.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="920.2" y="1518.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.2" y="1491.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.2" y="1502.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.2" y="1475.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.2" y="1486.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="917.2" y="1459.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="920.2" y="1470.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.2" y="1443.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="920.2" y="1454.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.2" y="1427.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.2" y="1438.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.2" y="1411.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="920.2" y="1422.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.03%)</title><rect x="917.2" y="1395.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.2" y="1406.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="917.2" y="1379.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="920.2" y="1390.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="917.2" y="1363.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="920.2" y="1374.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor18.invoke (1 samples, 0.03%)</title><rect x="917.2" y="1347.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="920.2" y="1358.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.writeObject (1 samples, 0.03%)</title><rect x="917.2" y="1331.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.2" y="1342.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.03%)</title><rect x="917.2" y="1315.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.2" y="1326.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.2" y="1299.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="920.2" y="1310.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (1 samples, 0.03%)</title><rect x="917.2" y="1283.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.2" y="1294.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (1 samples, 0.03%)</title><rect x="917.2" y="1267.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="920.2" y="1278.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.insert (1 samples, 0.03%)</title><rect x="917.2" y="1251.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.2" y="1262.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.hash (1 samples, 0.03%)</title><rect x="917.2" y="1235.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.2" y="1246.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (4 samples, 0.10%)</title><rect x="917.5" y="1715.0" width="1.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.5" y="1726.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (4 samples, 0.10%)</title><rect x="917.5" y="1699.0" width="1.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.5" y="1710.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (4 samples, 0.10%)</title><rect x="917.5" y="1683.0" width="1.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="920.5" y="1694.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor18.invoke (4 samples, 0.10%)</title><rect x="917.5" y="1667.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.5" y="1678.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.writeObject (4 samples, 0.10%)</title><rect x="917.5" y="1651.0" width="1.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.5" y="1662.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (4 samples, 0.10%)</title><rect x="917.5" y="1635.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.5" y="1646.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (4 samples, 0.10%)</title><rect x="917.5" y="1619.0" width="1.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="920.5" y="1630.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (4 samples, 0.10%)</title><rect x="917.5" y="1603.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.5" y="1614.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (4 samples, 0.10%)</title><rect x="917.5" y="1587.0" width="1.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="920.5" y="1598.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (4 samples, 0.10%)</title><rect x="917.5" y="1571.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.5" y="1582.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (4 samples, 0.10%)</title><rect x="917.5" y="1555.0" width="1.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.5" y="1566.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (4 samples, 0.10%)</title><rect x="917.5" y="1539.0" width="1.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.5" y="1550.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (4 samples, 0.10%)</title><rect x="917.5" y="1523.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.5" y="1534.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (4 samples, 0.10%)</title><rect x="917.5" y="1507.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.5" y="1518.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (4 samples, 0.10%)</title><rect x="917.5" y="1491.0" width="1.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="920.5" y="1502.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (4 samples, 0.10%)</title><rect x="917.5" y="1475.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="920.5" y="1486.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (4 samples, 0.10%)</title><rect x="917.5" y="1459.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="920.5" y="1470.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.05%)</title><rect x="917.5" y="1443.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="1454.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="917.5" y="1427.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="920.5" y="1438.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 0.05%)</title><rect x="917.5" y="1411.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="920.5" y="1422.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="917.5" y="1395.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="1406.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.05%)</title><rect x="917.5" y="1379.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.5" y="1390.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.05%)</title><rect x="917.5" y="1363.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="920.5" y="1374.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.05%)</title><rect x="917.5" y="1347.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="920.5" y="1358.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="917.5" y="1331.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="920.5" y="1342.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 0.05%)</title><rect x="917.5" y="1315.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.5" y="1326.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="917.5" y="1299.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.5" y="1310.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 0.05%)</title><rect x="917.5" y="1283.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="920.5" y="1294.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="917.5" y="1267.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="1278.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.05%)</title><rect x="917.5" y="1251.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.5" y="1262.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.05%)</title><rect x="917.5" y="1235.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.5" y="1246.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.05%)</title><rect x="917.5" y="1219.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="920.5" y="1230.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="917.5" y="1203.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.5" y="1214.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.05%)</title><rect x="917.5" y="1187.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.5" y="1198.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.05%)</title><rect x="917.5" y="1171.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.5" y="1182.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.05%)</title><rect x="917.5" y="1155.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="920.5" y="1166.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="917.5" y="1139.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.5" y="1150.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.5" y="1123.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="1134.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.5" y="1107.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.5" y="1118.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="917.5" y="1091.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="920.5" y="1102.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.5" y="1075.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.5" y="1086.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.5" y="1059.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="920.5" y="1070.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.5" y="1043.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="920.5" y="1054.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="917.5" y="1027.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="1038.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.5" y="1011.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.5" y="1022.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="917.5" y="995.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.5" y="1006.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.5" y="979.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="920.5" y="990.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.5" y="963.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.5" y="974.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.5" y="947.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.5" y="958.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="917.5" y="931.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.5" y="942.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.5" y="915.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="920.5" y="926.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.5" y="899.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.5" y="910.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.5" y="883.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.5" y="894.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="917.5" y="867.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="920.5" y="878.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.5" y="851.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="920.5" y="862.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.5" y="835.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="920.5" y="846.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.5" y="819.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="920.5" y="830.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="917.5" y="803.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.5" y="787.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.5" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.5" y="771.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.5" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.5" y="755.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="920.5" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (1 samples, 0.03%)</title><rect x="917.5" y="739.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="920.5" y="750.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (1 samples, 0.03%)</title><rect x="917.5" y="723.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="920.5" y="734.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (1 samples, 0.03%)</title><rect x="917.5" y="707.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.5" y="718.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor18.invoke (1 samples, 0.03%)</title><rect x="917.5" y="691.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="920.5" y="702.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.writeObject (1 samples, 0.03%)</title><rect x="917.5" y="675.0" width="0.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="920.5" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (1 samples, 0.03%)</title><rect x="917.5" y="659.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.5" y="643.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="920.5" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.5" y="627.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="920.5" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.5" y="611.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.5" y="622.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="917.5" y="595.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="606.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.5" y="579.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="920.5" y="590.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.5" y="563.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="920.5" y="574.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="917.5" y="547.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.5" y="558.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="917.5" y="531.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="920.5" y="542.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="917.5" y="515.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="920.5" y="526.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="917.5" y="499.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="920.5" y="510.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.03%)</title><rect x="917.5" y="483.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="920.5" y="494.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.03%)</title><rect x="917.5" y="467.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="920.5" y="478.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.03%)</title><rect x="917.5" y="451.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="920.5" y="462.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.03%)</title><rect x="917.5" y="435.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="920.5" y="446.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDescriptor (1 samples, 0.03%)</title><rect x="917.5" y="419.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="920.5" y="430.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.writeNonProxy (1 samples, 0.03%)</title><rect x="917.5" y="403.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="920.5" y="414.0"></text>
</g>
<g>
<title>java/io/ObjectStreamField.getTypeString (1 samples, 0.03%)</title><rect x="917.5" y="387.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="920.5" y="398.0"></text>
</g>
<g>
<title>java/io/ObjectStreamField.isPrimitive (1 samples, 0.03%)</title><rect x="917.5" y="371.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="920.5" y="382.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (1 samples, 0.03%)</title><rect x="917.8" y="1123.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="920.8" y="1134.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.assign (1 samples, 0.03%)</title><rect x="917.8" y="1107.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="920.8" y="1118.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.growSpine (1 samples, 0.03%)</title><rect x="917.8" y="1091.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="920.8" y="1102.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$HandleTable.insert (1 samples, 0.03%)</title><rect x="917.8" y="1075.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="920.8" y="1086.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (2 samples, 0.05%)</title><rect x="918.1" y="1443.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.1" y="1454.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.05%)</title><rect x="918.1" y="1427.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="921.1" y="1438.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.05%)</title><rect x="918.1" y="1411.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="921.1" y="1422.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor18.invoke (2 samples, 0.05%)</title><rect x="918.1" y="1395.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="921.1" y="1406.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.writeObject (2 samples, 0.05%)</title><rect x="918.1" y="1379.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="921.1" y="1390.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 0.05%)</title><rect x="918.1" y="1363.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="921.1" y="1374.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="918.1" y="1347.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="921.1" y="1358.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.05%)</title><rect x="918.1" y="1331.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="921.1" y="1342.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.05%)</title><rect x="918.1" y="1315.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="921.1" y="1326.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.05%)</title><rect x="918.1" y="1299.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="921.1" y="1310.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="918.1" y="1283.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="921.1" y="1294.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.05%)</title><rect x="918.1" y="1267.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="921.1" y="1278.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.05%)</title><rect x="918.1" y="1251.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="921.1" y="1262.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.05%)</title><rect x="918.1" y="1235.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="921.1" y="1246.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="918.1" y="1219.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="921.1" y="1230.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.05%)</title><rect x="918.1" y="1203.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="921.1" y="1214.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.05%)</title><rect x="918.1" y="1187.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="921.1" y="1198.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.invokeWriteObject (2 samples, 0.05%)</title><rect x="918.1" y="1171.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="921.1" y="1182.0"></text>
</g>
<g>
<title>java/lang/reflect/Method.invoke (2 samples, 0.05%)</title><rect x="918.1" y="1155.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="921.1" y="1166.0"></text>
</g>
<g>
<title>jdk/internal/reflect/DelegatingMethodAccessorImpl.invoke (2 samples, 0.05%)</title><rect x="918.1" y="1139.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="921.1" y="1150.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor18.invoke (2 samples, 0.05%)</title><rect x="918.1" y="1123.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="921.1" y="1134.0"></text>
</g>
<g>
<title>scala/collection/immutable/List$SerializationProxy.writeObject (2 samples, 0.05%)</title><rect x="918.1" y="1107.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="921.1" y="1118.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject (2 samples, 0.05%)</title><rect x="918.1" y="1091.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="921.1" y="1102.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="918.1" y="1075.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="921.1" y="1086.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.05%)</title><rect x="918.1" y="1059.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="921.1" y="1070.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.05%)</title><rect x="918.1" y="1043.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="921.1" y="1054.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.05%)</title><rect x="918.1" y="1027.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="921.1" y="1038.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="918.1" y="1011.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="921.1" y="1022.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.05%)</title><rect x="918.1" y="995.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="921.1" y="1006.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.05%)</title><rect x="918.1" y="979.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="921.1" y="990.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.05%)</title><rect x="918.1" y="963.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="921.1" y="974.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="918.1" y="947.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="921.1" y="958.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.05%)</title><rect x="918.1" y="931.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="921.1" y="942.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.05%)</title><rect x="918.1" y="915.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="921.1" y="926.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.05%)</title><rect x="918.1" y="899.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="921.1" y="910.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="918.1" y="883.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="921.1" y="894.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.05%)</title><rect x="918.1" y="867.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="921.1" y="878.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (2 samples, 0.05%)</title><rect x="918.1" y="851.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="921.1" y="862.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (2 samples, 0.05%)</title><rect x="918.1" y="835.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="921.1" y="846.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="918.1" y="819.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="921.1" y="830.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (2 samples, 0.05%)</title><rect x="918.1" y="803.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="921.1" y="814.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (2 samples, 0.05%)</title><rect x="918.1" y="787.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="921.1" y="798.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (2 samples, 0.05%)</title><rect x="918.1" y="771.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="921.1" y="782.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.03%)</title><rect x="918.1" y="755.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="921.1" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.03%)</title><rect x="918.1" y="739.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="921.1" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDesc (1 samples, 0.03%)</title><rect x="918.1" y="723.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="921.1" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeNonProxyDesc (1 samples, 0.03%)</title><rect x="918.1" y="707.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="921.1" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeClassDescriptor (1 samples, 0.03%)</title><rect x="918.1" y="691.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="921.1" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.writeNonProxy (1 samples, 0.03%)</title><rect x="918.1" y="675.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="921.1" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeUTF (1 samples, 0.03%)</title><rect x="918.1" y="659.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="921.1" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeUTF (1 samples, 0.03%)</title><rect x="918.1" y="643.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="921.1" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.getUTFLength (1 samples, 0.03%)</title><rect x="918.1" y="627.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="921.1" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="918.4" y="755.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="921.4" y="766.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="918.4" y="739.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="921.4" y="750.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="918.4" y="723.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="921.4" y="734.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeArray (1 samples, 0.03%)</title><rect x="918.4" y="707.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="921.4" y="718.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="918.4" y="691.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="921.4" y="702.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeOrdinaryObject (1 samples, 0.03%)</title><rect x="918.4" y="675.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="921.4" y="686.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeSerialData (1 samples, 0.03%)</title><rect x="918.4" y="659.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="921.4" y="670.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.defaultWriteFields (1 samples, 0.03%)</title><rect x="918.4" y="643.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="921.4" y="654.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeObject0 (1 samples, 0.03%)</title><rect x="918.4" y="627.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="921.4" y="638.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.lookup (1 samples, 0.03%)</title><rect x="918.4" y="611.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="921.4" y="622.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentHashMap.putIfAbsent (1 samples, 0.03%)</title><rect x="918.4" y="595.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="921.4" y="606.0"></text>
</g>
<g>
<title>jdk/internal/reflect/GeneratedMethodAccessor37.invoke (1 samples, 0.03%)</title><rect x="918.7" y="1939.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="921.7" y="1950.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$SerializationProxy.writeObject (1 samples, 0.03%)</title><rect x="918.7" y="1923.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="921.7" y="1934.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike$WithFilter.foreach (1 samples, 0.03%)</title><rect x="918.7" y="1907.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="921.7" y="1918.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$HashTrieMap.foreach (1 samples, 0.03%)</title><rect x="918.7" y="1891.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="921.7" y="1902.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$HashMap1.foreach (1 samples, 0.03%)</title><rect x="918.7" y="1875.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="921.7" y="1886.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike$WithFilter$$Lambda$95.0x0000000801818be0.apply (1 samples, 0.03%)</title><rect x="918.7" y="1859.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="921.7" y="1870.0"></text>
</g>
<g>
<title>scala/collection/TraversableLike$WithFilter.$anonfun$foreach$1 (1 samples, 0.03%)</title><rect x="918.7" y="1843.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="921.7" y="1854.0"></text>
</g>
<g>
<title>scala/collection/immutable/HashMap$SerializationProxy$$Lambda$1975.0x00000008021ef820.apply (1 samples, 0.03%)</title><rect x="918.7" y="1827.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="921.7" y="1838.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream.writeString (1 samples, 0.03%)</title><rect x="919.0" y="2355.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.0" y="2366.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeUTF (1 samples, 0.03%)</title><rect x="919.0" y="2339.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.0" y="2350.0"></text>
</g>
<g>
<title>java/io/ObjectOutputStream$BlockDataOutputStream.writeBytes (1 samples, 0.03%)</title><rect x="919.0" y="2323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="922.0" y="2334.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.handleTaskCompletion (20 samples, 0.51%)</title><rect x="919.3" y="3619.0" width="6.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="922.3" y="3630.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.cleanupStateForJobAndIndependentStages (1 samples, 0.03%)</title><rect x="919.3" y="3603.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="922.3" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.postTaskEnd (2 samples, 0.05%)</title><rect x="919.6" y="3603.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="922.6" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/executor/TaskMetrics$.fromAccumulators (2 samples, 0.05%)</title><rect x="919.6" y="3587.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="922.6" y="3598.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayBuffer.foreach (2 samples, 0.05%)</title><rect x="919.6" y="3571.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="922.6" y="3582.0"></text>
</g>
<g>
<title>scala/collection/mutable/ResizableArray.foreach$ (2 samples, 0.05%)</title><rect x="919.6" y="3555.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="922.6" y="3566.0"></text>
</g>
<g>
<title>scala/collection/mutable/ResizableArray.foreach (2 samples, 0.05%)</title><rect x="919.6" y="3539.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="922.6" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/executor/TaskMetrics$$$Lambda$2180.0x00000008022782c8.apply (2 samples, 0.05%)</title><rect x="919.6" y="3523.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.6" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/executor/TaskMetrics$.$anonfun$fromAccumulators$1 (2 samples, 0.05%)</title><rect x="919.6" y="3507.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="922.6" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/executor/TaskMetrics.nameToAccums (2 samples, 0.05%)</title><rect x="919.6" y="3491.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="922.6" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/executor/TaskMetrics.nameToAccums$lzycompute (2 samples, 0.05%)</title><rect x="919.6" y="3475.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="922.6" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/InternalAccumulator$.EXECUTOR_DESERIALIZE_TIME (1 samples, 0.03%)</title><rect x="919.6" y="3459.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="922.6" y="3470.0"></text>
</g>
<g>
<title>scala/collection/generic/GenMapFactory.apply (1 samples, 0.03%)</title><rect x="919.9" y="3459.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.9" y="3470.0"></text>
</g>
<g>
<title>scala/collection/mutable/AbstractMap.$plus$plus$eq (1 samples, 0.03%)</title><rect x="919.9" y="3443.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="922.9" y="3454.0"></text>
</g>
<g>
<title>scala/collection/generic/Growable.$plus$plus$eq$ (1 samples, 0.03%)</title><rect x="919.9" y="3427.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="922.9" y="3438.0"></text>
</g>
<g>
<title>scala/collection/generic/Growable.$plus$plus$eq (1 samples, 0.03%)</title><rect x="919.9" y="3411.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="922.9" y="3422.0"></text>
</g>
<g>
<title>scala/collection/mutable/WrappedArray.foreach (1 samples, 0.03%)</title><rect x="919.9" y="3395.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="922.9" y="3406.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach$ (1 samples, 0.03%)</title><rect x="919.9" y="3379.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="922.9" y="3390.0"></text>
</g>
<g>
<title>scala/collection/IndexedSeqOptimized.foreach (1 samples, 0.03%)</title><rect x="919.9" y="3363.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="922.9" y="3374.0"></text>
</g>
<g>
<title>scala/collection/generic/Growable$$Lambda$85.0x00000008017fdcf0.apply (1 samples, 0.03%)</title><rect x="919.9" y="3347.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.9" y="3358.0"></text>
</g>
<g>
<title>scala/collection/generic/Growable.$anonfun$$plus$plus$eq$1 (1 samples, 0.03%)</title><rect x="919.9" y="3331.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="922.9" y="3342.0"></text>
</g>
<g>
<title>scala/collection/mutable/LinkedHashMap.$plus$eq (1 samples, 0.03%)</title><rect x="919.9" y="3315.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="922.9" y="3326.0"></text>
</g>
<g>
<title>scala/collection/mutable/LinkedHashMap.$plus$eq (1 samples, 0.03%)</title><rect x="919.9" y="3299.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="922.9" y="3310.0"></text>
</g>
<g>
<title>scala/collection/mutable/LinkedHashMap.put (1 samples, 0.03%)</title><rect x="919.9" y="3283.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="922.9" y="3294.0"></text>
</g>
<g>
<title>scala/collection/mutable/LinkedHashMap.findOrAddEntry (1 samples, 0.03%)</title><rect x="919.9" y="3267.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="922.9" y="3278.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.findOrAddEntry$ (1 samples, 0.03%)</title><rect x="919.9" y="3251.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="922.9" y="3262.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.findOrAddEntry (1 samples, 0.03%)</title><rect x="919.9" y="3235.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="922.9" y="3246.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.findEntry0 (1 samples, 0.03%)</title><rect x="919.9" y="3219.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.9" y="3230.0"></text>
</g>
<g>
<title>scala/collection/mutable/LinkedHashMap.elemEquals (1 samples, 0.03%)</title><rect x="919.9" y="3203.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="922.9" y="3214.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.elemEquals$ (1 samples, 0.03%)</title><rect x="919.9" y="3187.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="922.9" y="3198.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.elemEquals (1 samples, 0.03%)</title><rect x="919.9" y="3171.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="922.9" y="3182.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals (1 samples, 0.03%)</title><rect x="919.9" y="3155.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="922.9" y="3166.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equals2 (1 samples, 0.03%)</title><rect x="919.9" y="3139.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="922.9" y="3150.0"></text>
</g>
<g>
<title>scala/runtime/BoxesRunTime.equalsNumObject (1 samples, 0.03%)</title><rect x="919.9" y="3123.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="922.9" y="3134.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.shouldInterruptTaskThread (1 samples, 0.03%)</title><rect x="920.2" y="3603.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.2" y="3614.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringOps.toBoolean (1 samples, 0.03%)</title><rect x="920.2" y="3587.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="923.2" y="3598.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.toBoolean$ (1 samples, 0.03%)</title><rect x="920.2" y="3571.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="923.2" y="3582.0"></text>
</g>
<g>
<title>scala/collection/immutable/StringLike.toBoolean (1 samples, 0.03%)</title><rect x="920.2" y="3555.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="923.2" y="3566.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="920.2" y="3539.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="923.2" y="3550.0"></text>
</g>
<g>
<title>InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code) (1 samples, 0.03%)</title><rect x="920.2" y="3523.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="923.2" y="3534.0"></text>
</g>
<g>
<title>LinkResolver::resolve_invoke(CallInfo&amp;, Handle, constantPoolHandle const&amp;, int, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="920.2" y="3507.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="923.2" y="3518.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_call(CallInfo&amp;, Handle, Klass*, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="920.2" y="3491.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="923.2" y="3502.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="920.2" y="3475.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="923.2" y="3486.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="920.2" y="3459.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="923.2" y="3470.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="920.2" y="3443.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="923.2" y="3454.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0] (1 samples, 0.03%)</title><rect x="920.2" y="3427.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="923.2" y="3438.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.updateAccumulators (1 samples, 0.03%)</title><rect x="920.5" y="3603.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="923.5" y="3614.0"></text>
</g>
<g>
<title>scala/collection/mutable/ArrayBuffer.foreach (1 samples, 0.03%)</title><rect x="920.5" y="3587.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="923.5" y="3598.0"></text>
</g>
<g>
<title>scala/collection/mutable/ResizableArray.foreach$ (1 samples, 0.03%)</title><rect x="920.5" y="3571.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="923.5" y="3582.0"></text>
</g>
<g>
<title>scala/collection/mutable/ResizableArray.foreach (1 samples, 0.03%)</title><rect x="920.5" y="3555.0" width="0.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="923.5" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler$$Lambda$2178.0x0000000802277458.apply (1 samples, 0.03%)</title><rect x="920.5" y="3539.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="923.5" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.$anonfun$updateAccumulators$1$adapted (1 samples, 0.03%)</title><rect x="920.5" y="3523.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="923.5" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/DAGScheduler.$anonfun$updateAccumulators$1 (1 samples, 0.03%)</title><rect x="920.5" y="3507.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="923.5" y="3518.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashMap.update (1 samples, 0.03%)</title><rect x="920.5" y="3491.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="923.5" y="3502.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashMap.put (1 samples, 0.03%)</title><rect x="920.5" y="3475.0" width="0.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="923.5" y="3486.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashMap.findOrAddEntry (1 samples, 0.03%)</title><rect x="920.5" y="3459.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.5" y="3470.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.findOrAddEntry$ (1 samples, 0.03%)</title><rect x="920.5" y="3443.0" width="0.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="923.5" y="3454.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.findOrAddEntry (1 samples, 0.03%)</title><rect x="920.5" y="3427.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="923.5" y="3438.0"></text>
</g>
<g>
<title>scala/collection/mutable/HashTable.addEntry0 (1 samples, 0.03%)</title><rect x="920.5" y="3411.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="923.5" y="3422.0"></text>
</g>
<g>
<title>itable stub (1 samples, 0.03%)</title><rect x="920.5" y="3395.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="923.5" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/JobWaiter.taskSucceeded (12 samples, 0.31%)</title><rect x="920.8" y="3603.0" width="3.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="923.8" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD$$Lambda$2582.0x000000080244c7c0.apply (12 samples, 0.31%)</title><rect x="920.8" y="3587.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="923.8" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$fold$3$adapted (12 samples, 0.31%)</title><rect x="920.8" y="3571.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="923.8" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/rdd/RDD.$anonfun$fold$3 (12 samples, 0.31%)</title><rect x="920.8" y="3555.0" width="3.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="923.8" y="3566.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$CostFun$$Lambda$2569.0x0000000802446978.apply (12 samples, 0.31%)</title><rect x="920.8" y="3539.0" width="3.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="923.8" y="3550.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/optimization/LBFGS$CostFun.$anonfun$calculate$2 (12 samples, 0.31%)</title><rect x="920.8" y="3523.0" width="3.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="923.8" y="3534.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/BLAS$.axpy (8 samples, 0.20%)</title><rect x="920.8" y="3507.0" width="2.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="923.8" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/BLAS$.axpy (8 samples, 0.20%)</title><rect x="920.8" y="3491.0" width="2.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="923.8" y="3502.0"></text>
</g>
<g>
<title>com/github/fommil/netlib/F2jBLAS.daxpy (8 samples, 0.20%)</title><rect x="920.8" y="3475.0" width="2.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="923.8" y="3486.0"></text>
</g>
<g>
<title>org/netlib/blas/Daxpy.daxpy (8 samples, 0.20%)</title><rect x="920.8" y="3459.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="923.8" y="3470.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/SparseVector.toDense (4 samples, 0.10%)</title><rect x="923.2" y="3507.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="926.2" y="3518.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/Vector.toDense$ (4 samples, 0.10%)</title><rect x="923.2" y="3491.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="926.2" y="3502.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/Vector.toDense (4 samples, 0.10%)</title><rect x="923.2" y="3475.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="926.2" y="3486.0"></text>
</g>
<g>
<title>org/apache/spark/mllib/linalg/SparseVector.toArray (4 samples, 0.10%)</title><rect x="923.2" y="3459.0" width="1.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="926.2" y="3470.0"></text>
</g>
<g>
<title>InterpreterRuntime::newarray(JavaThread*, BasicType, int) (2 samples, 0.05%)</title><rect x="923.2" y="3443.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="926.2" y="3454.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="923.2" y="3427.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="926.2" y="3438.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="923.2" y="3411.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="926.2" y="3422.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="923.2" y="3395.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="926.2" y="3406.0"></text>
</g>
<g>
<title>Runtime1::new_type_array(JavaThread*, Klass*, int) (2 samples, 0.05%)</title><rect x="923.8" y="3443.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="926.8" y="3454.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.05%)</title><rect x="923.8" y="3427.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="926.8" y="3438.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.05%)</title><rect x="923.8" y="3411.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="926.8" y="3422.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="923.8" y="3395.0" width="0.6" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="926.8" y="3406.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/LiveListenerBus.post (1 samples, 0.03%)</title><rect x="924.4" y="3603.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="927.4" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/LiveListenerBus.postToQueues (1 samples, 0.03%)</title><rect x="924.4" y="3587.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="927.4" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/AsyncEventQueue.post (1 samples, 0.03%)</title><rect x="924.4" y="3571.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="927.4" y="3582.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1 samples, 0.03%)</title><rect x="924.4" y="3555.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="927.4" y="3566.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (1 samples, 0.03%)</title><rect x="924.4" y="3539.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="927.4" y="3550.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (1 samples, 0.03%)</title><rect x="924.4" y="3523.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="927.4" y="3534.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (1 samples, 0.03%)</title><rect x="924.4" y="3507.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="927.4" y="3518.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.signalNext (1 samples, 0.03%)</title><rect x="924.4" y="3491.0" width="0.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="927.4" y="3502.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (1 samples, 0.03%)</title><rect x="924.4" y="3475.0" width="0.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="927.4" y="3486.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (1 samples, 0.03%)</title><rect x="924.4" y="3459.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="927.4" y="3470.0"></text>
</g>
<g>
<title>__pthread_cond_signal (1 samples, 0.03%)</title><rect x="924.4" y="3443.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="927.4" y="3454.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="924.4" y="3427.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="927.4" y="3438.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="924.4" y="3411.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="927.4" y="3422.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="924.4" y="3395.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="927.4" y="3406.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="924.4" y="3379.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="927.4" y="3390.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="924.4" y="3363.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="927.4" y="3374.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="924.4" y="3347.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="927.4" y="3358.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="924.4" y="3331.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="927.4" y="3342.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="924.4" y="3315.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="927.4" y="3326.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskSchedulerImpl.killAllTaskAttempts (2 samples, 0.05%)</title><rect x="924.7" y="3603.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="927.7" y="3614.0"></text>
</g>
<g>
<title>org/apache/spark/scheduler/TaskSchedulerImpl.logInfo (2 samples, 0.05%)</title><rect x="924.7" y="3587.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="927.7" y="3598.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo$ (2 samples, 0.05%)</title><rect x="924.7" y="3571.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="927.7" y="3582.0"></text>
</g>
<g>
<title>org/apache/spark/internal/Logging.logInfo (2 samples, 0.05%)</title><rect x="924.7" y="3555.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="927.7" y="3566.0"></text>
</g>
<g>
<title>org/slf4j/impl/Log4jLoggerAdapter.info (2 samples, 0.05%)</title><rect x="924.7" y="3539.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="927.7" y="3550.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.log (2 samples, 0.05%)</title><rect x="924.7" y="3523.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="927.7" y="3534.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.forcedLog (2 samples, 0.05%)</title><rect x="924.7" y="3507.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="927.7" y="3518.0"></text>
</g>
<g>
<title>org/apache/log4j/Category.callAppenders (2 samples, 0.05%)</title><rect x="924.7" y="3491.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="927.7" y="3502.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/AppenderAttachableImpl.appendLoopOnAppenders (2 samples, 0.05%)</title><rect x="924.7" y="3475.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="927.7" y="3486.0"></text>
</g>
<g>
<title>org/apache/log4j/AppenderSkeleton.doAppend (2 samples, 0.05%)</title><rect x="924.7" y="3459.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="927.7" y="3470.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.append (2 samples, 0.05%)</title><rect x="924.7" y="3443.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="927.7" y="3454.0"></text>
</g>
<g>
<title>org/apache/log4j/WriterAppender.subAppend (2 samples, 0.05%)</title><rect x="924.7" y="3427.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="927.7" y="3438.0"></text>
</g>
<g>
<title>org/apache/log4j/helpers/QuietWriter.flush (2 samples, 0.05%)</title><rect x="924.7" y="3411.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="927.7" y="3422.0"></text>
</g>
<g>
<title>java/io/OutputStreamWriter.flush (2 samples, 0.05%)</title><rect x="924.7" y="3395.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="927.7" y="3406.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.flush (2 samples, 0.05%)</title><rect x="924.7" y="3379.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="927.7" y="3390.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlush (2 samples, 0.05%)</title><rect x="924.7" y="3363.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="927.7" y="3374.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.implFlushBuffer (2 samples, 0.05%)</title><rect x="924.7" y="3347.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="927.7" y="3358.0"></text>
</g>
<g>
<title>sun/nio/cs/StreamEncoder.writeBytes (2 samples, 0.05%)</title><rect x="924.7" y="3331.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="927.7" y="3342.0"></text>
</g>
<g>
<title>java/io/PrintStream.write (2 samples, 0.05%)</title><rect x="924.7" y="3315.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="927.7" y="3326.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flush (2 samples, 0.05%)</title><rect x="924.7" y="3299.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="927.7" y="3310.0"></text>
</g>
<g>
<title>java/io/BufferedOutputStream.flushBuffer (2 samples, 0.05%)</title><rect x="924.7" y="3283.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="927.7" y="3294.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.write (2 samples, 0.05%)</title><rect x="924.7" y="3267.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="927.7" y="3278.0"></text>
</g>
<g>
<title>java/io/FileOutputStream.writeBytes (2 samples, 0.05%)</title><rect x="924.7" y="3251.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="927.7" y="3262.0"></text>
</g>
<g>
<title>Java_java_io_FileOutputStream_writeBytes (2 samples, 0.05%)</title><rect x="924.7" y="3235.0" width="0.6" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="927.7" y="3246.0"></text>
</g>
<g>
<title>writeBytes (2 samples, 0.05%)</title><rect x="924.7" y="3219.0" width="0.6" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="927.7" y="3230.0"></text>
</g>
<g>
<title>__write (2 samples, 0.05%)</title><rect x="924.7" y="3203.0" width="0.6" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="927.7" y="3214.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.05%)</title><rect x="924.7" y="3187.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="927.7" y="3198.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.05%)</title><rect x="924.7" y="3171.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="927.7" y="3182.0"></text>
</g>
<g>
<title>__x64_sys_write (2 samples, 0.05%)</title><rect x="924.7" y="3155.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="927.7" y="3166.0"></text>
</g>
<g>
<title>ksys_write (2 samples, 0.05%)</title><rect x="924.7" y="3139.0" width="0.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="927.7" y="3150.0"></text>
</g>
<g>
<title>vfs_write (2 samples, 0.05%)</title><rect x="924.7" y="3123.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="927.7" y="3134.0"></text>
</g>
<g>
<title>__vfs_write (2 samples, 0.05%)</title><rect x="924.7" y="3107.0" width="0.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="927.7" y="3118.0"></text>
</g>
<g>
<title>tty_write (2 samples, 0.05%)</title><rect x="924.7" y="3091.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="927.7" y="3102.0"></text>
</g>
<g>
<title>n_tty_write (2 samples, 0.05%)</title><rect x="924.7" y="3075.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="927.7" y="3086.0"></text>
</g>
<g>
<title>pty_write (2 samples, 0.05%)</title><rect x="924.7" y="3059.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="927.7" y="3070.0"></text>
</g>
<g>
<title>tty_flip_buffer_push (2 samples, 0.05%)</title><rect x="924.7" y="3043.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="927.7" y="3054.0"></text>
</g>
<g>
<title>queue_work_on (2 samples, 0.05%)</title><rect x="924.7" y="3027.0" width="0.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="927.7" y="3038.0"></text>
</g>
<g>
<title>start_thread (881 samples, 22.43%)</title><rect x="925.3" y="3683.0" width="264.7" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="928.3" y="3694.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (881 samples, 22.43%)</title><rect x="925.3" y="3667.0" width="264.7" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="928.3" y="3678.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (881 samples, 22.43%)</title><rect x="925.3" y="3651.0" width="264.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="928.3" y="3662.0">Thread::call_run()</text>
</g>
<g>
<title>ConcurrentGCThread::run() (8 samples, 0.20%)</title><rect x="925.3" y="3635.0" width="2.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="928.3" y="3646.0"></text>
</g>
<g>
<title>G1ConcurrentRefineThread::run_service() (8 samples, 0.20%)</title><rect x="925.3" y="3619.0" width="2.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="928.3" y="3630.0"></text>
</g>
<g>
<title>G1DirtyCardQueueSet::refine_completed_buffer_concurrently(unsigned int, unsigned long, G1ConcurrentRefineStats*) (8 samples, 0.20%)</title><rect x="925.3" y="3603.0" width="2.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="928.3" y="3614.0"></text>
</g>
<g>
<title>G1DirtyCardQueueSet::refine_buffer(BufferNode*, unsigned int, G1ConcurrentRefineStats*) (7 samples, 0.18%)</title><rect x="925.3" y="3587.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="928.3" y="3598.0"></text>
</g>
<g>
<title>G1RemSet::refine_card_concurrently(unsigned char*, unsigned int) (6 samples, 0.15%)</title><rect x="925.6" y="3571.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="928.6" y="3582.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWordImpl**, HeapWordImpl**, void const*) (4 samples, 0.10%)</title><rect x="925.9" y="3555.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="928.9" y="3566.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ConcurrentRefineOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, narrowOop&gt;(G1ConcurrentRefineOopClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="927.1" y="3555.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="930.1" y="3566.0"></text>
</g>
<g>
<title>PtrQueueSet::deallocate_buffer(BufferNode*) (1 samples, 0.03%)</title><rect x="927.4" y="3587.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="930.4" y="3598.0"></text>
</g>
<g>
<title>NonJavaThread::Iterator::step() (1 samples, 0.03%)</title><rect x="927.4" y="3571.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="930.4" y="3582.0"></text>
</g>
<g>
<title>GangWorker::loop() (252 samples, 6.42%)</title><rect x="927.7" y="3635.0" width="75.7" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="930.7" y="3646.0">GangWork..</text>
</g>
<g>
<title>Dictionary::does_any_dictionary_needs_resizing() (1 samples, 0.03%)</title><rect x="927.7" y="3619.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="930.7" y="3630.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::work(unsigned int) (27 samples, 0.69%)</title><rect x="928.0" y="3619.0" width="8.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="931.0" y="3630.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (27 samples, 0.69%)</title><rect x="928.0" y="3603.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="931.0" y="3614.0"></text>
</g>
<g>
<title>G1ClearBitMapTask::G1ClearBitmapHRClosure::do_heap_region(HeapRegion*) (27 samples, 0.69%)</title><rect x="928.0" y="3587.0" width="8.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="931.0" y="3598.0"></text>
</g>
<g>
<title>MarkBitMap::do_clear(MemRegion, bool) (24 samples, 0.61%)</title><rect x="928.9" y="3571.0" width="7.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="931.9" y="3582.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (24 samples, 0.61%)</title><rect x="928.9" y="3555.0" width="7.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="931.9" y="3566.0"></text>
</g>
<g>
<title>G1EvacuateRegionsBaseTask::work(unsigned int) (192 samples, 4.89%)</title><rect x="936.1" y="3619.0" width="57.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="939.1" y="3630.0">G1Evac..</text>
</g>
<g>
<title>G1EvacuateRegionsTask::evacuate_live_objects(G1ParScanThreadState*, unsigned int) (88 samples, 2.24%)</title><rect x="936.1" y="3603.0" width="26.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="939.1" y="3614.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (88 samples, 2.24%)</title><rect x="936.1" y="3587.0" width="26.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="939.1" y="3598.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::steal_and_trim_queue(GenericTaskQueueSet&lt;OverflowTaskQueue&lt;ScannerTask, (MEMFLAGS)5, 131072u&gt;, (MEMFLAGS)5&gt;*) (66 samples, 1.68%)</title><rect x="936.1" y="3571.0" width="19.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="939.1" y="3582.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="938.5" y="3555.0" width="0.3" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="941.5" y="3566.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (53 samples, 1.35%)</title><rect x="938.8" y="3555.0" width="15.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="941.8" y="3566.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, narrowOop&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (5 samples, 0.13%)</title><rect x="953.2" y="3539.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="956.2" y="3550.0"></text>
</g>
<g>
<title>InstanceMirrorKlass::oop_size(oopDesc*) const (1 samples, 0.03%)</title><rect x="954.7" y="3555.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="957.7" y="3566.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, narrowOop&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (3 samples, 0.08%)</title><rect x="955.0" y="3555.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="958.0" y="3566.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (16 samples, 0.41%)</title><rect x="955.9" y="3571.0" width="4.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="958.9" y="3582.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, narrowOop&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.10%)</title><rect x="959.5" y="3555.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="962.5" y="3566.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.03%)</title><rect x="960.7" y="3571.0" width="0.3" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="963.7" y="3582.0"></text>
</g>
<g>
<title>TaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.03%)</title><rect x="961.0" y="3571.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="964.0" y="3582.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (4 samples, 0.10%)</title><rect x="961.3" y="3571.0" width="1.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="964.3" y="3582.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.10%)</title><rect x="961.3" y="3555.0" width="1.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="964.3" y="3566.0"></text>
</g>
<g>
<title>do_syscall_64 (4 samples, 0.10%)</title><rect x="961.3" y="3539.0" width="1.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="964.3" y="3550.0"></text>
</g>
<g>
<title>__x64_sys_futex (4 samples, 0.10%)</title><rect x="961.3" y="3523.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="964.3" y="3534.0"></text>
</g>
<g>
<title>do_futex (4 samples, 0.10%)</title><rect x="961.3" y="3507.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="964.3" y="3518.0"></text>
</g>
<g>
<title>futex_wake (4 samples, 0.10%)</title><rect x="961.3" y="3491.0" width="1.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="964.3" y="3502.0"></text>
</g>
<g>
<title>wake_up_q (4 samples, 0.10%)</title><rect x="961.3" y="3475.0" width="1.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="964.3" y="3486.0"></text>
</g>
<g>
<title>try_to_wake_up (4 samples, 0.10%)</title><rect x="961.3" y="3459.0" width="1.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="964.3" y="3470.0"></text>
</g>
<g>
<title>__lock_text_start (4 samples, 0.10%)</title><rect x="961.3" y="3443.0" width="1.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="964.3" y="3454.0"></text>
</g>
<g>
<title>G1EvacuateRegionsTask::scan_roots(G1ParScanThreadState*, unsigned int) (94 samples, 2.39%)</title><rect x="962.5" y="3603.0" width="28.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="965.5" y="3614.0">G1..</text>
</g>
<g>
<title>G1RemSet::scan_heap_roots(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, bool) (42 samples, 1.07%)</title><rect x="962.5" y="3587.0" width="12.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="965.5" y="3598.0"></text>
</g>
<g>
<title>G1ScanHRForRegionClosure::scan_heap_roots(HeapRegion*) (42 samples, 1.07%)</title><rect x="962.5" y="3571.0" width="12.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="965.5" y="3582.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="963.1" y="3555.0" width="0.3" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="966.1" y="3566.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWordImpl**, HeapWordImpl**, void const*) (5 samples, 0.13%)</title><rect x="963.4" y="3555.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="966.4" y="3566.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (31 samples, 0.79%)</title><rect x="964.9" y="3555.0" width="9.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="967.9" y="3566.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, narrowOop&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (4 samples, 0.10%)</title><rect x="972.8" y="3539.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="975.8" y="3550.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceRefKlass, narrowOop&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="974.0" y="3539.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="977.0" y="3550.0"></text>
</g>
<g>
<title>ReferenceProcessor::discover_reference(oopDesc*, ReferenceType) (1 samples, 0.03%)</title><rect x="974.0" y="3523.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="977.0" y="3534.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;397414ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 397414ul&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.03%)</title><rect x="974.0" y="3507.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="977.0" y="3518.0"></text>
</g>
<g>
<title>java_lang_ref_Reference::is_referent_field(oopDesc*, long) (1 samples, 0.03%)</title><rect x="974.0" y="3491.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="977.0" y="3502.0"></text>
</g>
<g>
<title>void G1ScanCardClosure::do_oop_work&lt;narrowOop&gt;(narrowOop*) (2 samples, 0.05%)</title><rect x="974.3" y="3555.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.3" y="3566.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1ScanCardClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, narrowOop&gt;(G1ScanCardClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="974.9" y="3555.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="977.9" y="3566.0"></text>
</g>
<g>
<title>void G1ScanCardClosure::do_oop_work&lt;narrowOop&gt;(narrowOop*) (1 samples, 0.03%)</title><rect x="974.9" y="3539.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="977.9" y="3550.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (52 samples, 1.32%)</title><rect x="975.2" y="3587.0" width="15.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="978.2" y="3598.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (52 samples, 1.32%)</title><rect x="975.2" y="3571.0" width="15.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.2" y="3582.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::roots_cld_do(CLDClosure*, CLDClosure*) (20 samples, 0.51%)</title><rect x="975.2" y="3555.0" width="6.0" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="978.2" y="3566.0"></text>
</g>
<g>
<title>G1CLDScanClosure::do_cld(ClassLoaderData*) (18 samples, 0.46%)</title><rect x="975.8" y="3539.0" width="5.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="978.8" y="3550.0"></text>
</g>
<g>
<title>ClassLoaderData::ChunkedHandleList::oops_do(OopClosure*) (18 samples, 0.46%)</title><rect x="975.8" y="3523.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="978.8" y="3534.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)1&gt;::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="977.0" y="3507.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.0" y="3518.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markWord) (1 samples, 0.03%)</title><rect x="977.0" y="3491.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="980.0" y="3502.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)1, (G1Mark)2&gt;::do_oop(oopDesc**) (13 samples, 0.33%)</title><rect x="977.3" y="3507.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="980.3" y="3518.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markWord) (2 samples, 0.05%)</title><rect x="977.9" y="3491.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="980.9" y="3502.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (9 samples, 0.23%)</title><rect x="978.5" y="3491.0" width="2.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="981.5" y="3502.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (32 samples, 0.81%)</title><rect x="981.2" y="3555.0" width="9.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="984.2" y="3566.0"></text>
</g>
<g>
<title>JavaThread::oops_do_frames(OopClosure*, CodeBlobClosure*) [clone .part.0] (23 samples, 0.59%)</title><rect x="981.8" y="3539.0" width="6.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="984.8" y="3550.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.03%)</title><rect x="981.8" y="3523.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="984.8" y="3534.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.03%)</title><rect x="982.1" y="3523.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.1" y="3534.0"></text>
</g>
<g>
<title>nmethod::oops_do_process_strong(nmethod::OopsDoProcessor*) (1 samples, 0.03%)</title><rect x="982.1" y="3507.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="985.1" y="3518.0"></text>
</g>
<g>
<title>G1NmethodProcessor::do_regular_processing(nmethod*) (1 samples, 0.03%)</title><rect x="982.1" y="3491.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="985.1" y="3502.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.03%)</title><rect x="982.1" y="3475.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="985.1" y="3486.0"></text>
</g>
<g>
<title>oop_Relocation::oop_value() (1 samples, 0.03%)</title><rect x="982.1" y="3459.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="985.1" y="3470.0"></text>
</g>
<g>
<title>frame::oops_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) const (5 samples, 0.13%)</title><rect x="982.4" y="3523.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="985.4" y="3534.0"></text>
</g>
<g>
<title>OopMapSet::all_do(frame const*, RegisterMap const*, OopClosure*, void (*)(oopDesc**, oopDesc**, OopClosure*), OopClosure*) (5 samples, 0.13%)</title><rect x="982.4" y="3507.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="985.4" y="3518.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)1&gt;::do_oop(oopDesc**) (4 samples, 0.10%)</title><rect x="982.4" y="3491.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="985.4" y="3502.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="983.0" y="3475.0" width="0.3" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="986.0" y="3486.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.03%)</title><rect x="983.3" y="3475.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="986.3" y="3486.0"></text>
</g>
<g>
<title>ImmutableOopMapSet::find_map_at_offset(int) const (1 samples, 0.03%)</title><rect x="983.6" y="3491.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="986.6" y="3502.0"></text>
</g>
<g>
<title>frame::oops_entry_do(OopClosure*, RegisterMap const*) const (1 samples, 0.03%)</title><rect x="983.9" y="3523.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="986.9" y="3534.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="983.9" y="3507.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="986.9" y="3518.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) const (12 samples, 0.31%)</title><rect x="984.2" y="3523.0" width="3.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="987.2" y="3534.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)1&gt;::do_oop(oopDesc**) (2 samples, 0.05%)</title><rect x="984.5" y="3507.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="987.5" y="3518.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (2 samples, 0.05%)</title><rect x="984.5" y="3491.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="987.5" y="3502.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, narrowOop&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="984.8" y="3475.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="987.8" y="3486.0"></text>
</g>
<g>
<title>InterpreterOopMap::iterate_oop(OffsetClosure*) const (7 samples, 0.18%)</title><rect x="985.1" y="3507.0" width="2.1" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="988.1" y="3518.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)1&gt;::do_oop(oopDesc**) (7 samples, 0.18%)</title><rect x="985.1" y="3491.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="988.1" y="3502.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.08%)</title><rect x="985.1" y="3475.0" width="0.9" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="988.1" y="3486.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (4 samples, 0.10%)</title><rect x="986.0" y="3475.0" width="1.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="989.0" y="3486.0"></text>
</g>
<g>
<title>void G1ScanEvacuatedObjClosure::do_oop_work&lt;narrowOop&gt;(narrowOop*) (1 samples, 0.03%)</title><rect x="986.9" y="3459.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="989.9" y="3470.0"></text>
</g>
<g>
<title>Method::mask_for(int, InterpreterOopMap*) (2 samples, 0.05%)</title><rect x="987.2" y="3507.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="990.2" y="3518.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle const&amp;, int, InterpreterOopMap*) (2 samples, 0.05%)</title><rect x="987.2" y="3491.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="990.2" y="3502.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (3 samples, 0.08%)</title><rect x="987.8" y="3523.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="990.8" y="3534.0"></text>
</g>
<g>
<title>frame::frame(long*, long*, long*, unsigned char*) (2 samples, 0.05%)</title><rect x="988.1" y="3507.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="991.1" y="3518.0"></text>
</g>
<g>
<title>JavaThread::oops_do_no_frames(OopClosure*, CodeBlobClosure*) (5 samples, 0.13%)</title><rect x="988.7" y="3539.0" width="1.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="991.7" y="3550.0"></text>
</g>
<g>
<title>HandleArea::oops_do(OopClosure*) (4 samples, 0.10%)</title><rect x="988.7" y="3523.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="991.7" y="3534.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)1&gt;::do_oop(oopDesc**) (4 samples, 0.10%)</title><rect x="988.7" y="3507.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="991.7" y="3518.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markWord) (1 samples, 0.03%)</title><rect x="988.7" y="3491.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="991.7" y="3502.0"></text>
</g>
<g>
<title>G1ParScanThreadState::allocate_copy_slow(G1HeapRegionAttr*, oopDesc*, unsigned long, unsigned int, unsigned int) (1 samples, 0.03%)</title><rect x="988.7" y="3475.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.7" y="3486.0"></text>
</g>
<g>
<title>G1PLABAllocator::allocate_direct_or_new_plab(G1HeapRegionAttr, unsigned long, bool*, unsigned int) (1 samples, 0.03%)</title><rect x="988.7" y="3459.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="991.7" y="3470.0"></text>
</g>
<g>
<title>G1Allocator::old_attempt_allocation(unsigned long, unsigned long, unsigned long*) (1 samples, 0.03%)</title><rect x="988.7" y="3443.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="991.7" y="3454.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="988.7" y="3427.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="991.7" y="3438.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (3 samples, 0.08%)</title><rect x="989.0" y="3491.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="992.0" y="3502.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, narrowOop&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (1 samples, 0.03%)</title><rect x="989.6" y="3475.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="992.6" y="3486.0"></text>
</g>
<g>
<title>JNIHandleBlock::oops_do(OopClosure*) (1 samples, 0.03%)</title><rect x="989.9" y="3523.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="992.9" y="3534.0"></text>
</g>
<g>
<title>JvmtiThreadState::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.03%)</title><rect x="990.2" y="3539.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="993.2" y="3550.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)1&gt;::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="990.2" y="3523.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="993.2" y="3534.0"></text>
</g>
<g>
<title>frame::oops_do(OopClosure*, CodeBlobClosure*, RegisterMap const*) const (1 samples, 0.03%)</title><rect x="990.5" y="3539.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="993.5" y="3550.0"></text>
</g>
<g>
<title>G1RemSet::scan_collection_set_regions(G1ParScanThreadState*, unsigned int, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases, G1GCPhaseTimes::GCParPhases) (10 samples, 0.25%)</title><rect x="990.8" y="3603.0" width="3.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="993.8" y="3614.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const (10 samples, 0.25%)</title><rect x="990.8" y="3587.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="993.8" y="3598.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const [clone .part.0] (10 samples, 0.25%)</title><rect x="990.8" y="3571.0" width="3.0" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="993.8" y="3582.0"></text>
</g>
<g>
<title>G1ScanCollectionSetRegionClosure::do_heap_region(HeapRegion*) (10 samples, 0.25%)</title><rect x="990.8" y="3555.0" width="3.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="993.8" y="3566.0"></text>
</g>
<g>
<title>G1CodeRootSet::nmethods_do(CodeBlobClosure*) const (10 samples, 0.25%)</title><rect x="990.8" y="3539.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.8" y="3550.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (10 samples, 0.25%)</title><rect x="990.8" y="3523.0" width="3.0" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="993.8" y="3534.0"></text>
</g>
<g>
<title>nmethod::oops_do_process_weak(nmethod::OopsDoProcessor*) (8 samples, 0.20%)</title><rect x="991.4" y="3507.0" width="2.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="994.4" y="3518.0"></text>
</g>
<g>
<title>G1NmethodProcessor::do_regular_processing(nmethod*) (6 samples, 0.15%)</title><rect x="991.4" y="3491.0" width="1.8" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="994.4" y="3502.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="991.4" y="3475.0" width="0.3" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="994.4" y="3486.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (5 samples, 0.13%)</title><rect x="991.7" y="3475.0" width="1.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="994.7" y="3486.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::HeapRegionGatheringOopClosure::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="992.6" y="3459.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="995.6" y="3470.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)2, (G1Mark)2&gt;::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="992.6" y="3443.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="995.6" y="3454.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(G1HeapRegionAttr, oopDesc*, markWord) (1 samples, 0.03%)</title><rect x="992.6" y="3427.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="995.6" y="3438.0"></text>
</g>
<g>
<title>RelocIterator::initialize(CompiledMethod*, unsigned char*, unsigned char*) (1 samples, 0.03%)</title><rect x="992.9" y="3459.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="995.9" y="3470.0"></text>
</g>
<g>
<title>nmethod::fix_oop_relocations(unsigned char*, unsigned char*, bool) (2 samples, 0.05%)</title><rect x="993.2" y="3491.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="996.2" y="3502.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (2 samples, 0.05%)</title><rect x="993.8" y="3619.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="996.8" y="3630.0"></text>
</g>
<g>
<title>G1CollectionSet::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const (2 samples, 0.05%)</title><rect x="993.8" y="3603.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="996.8" y="3614.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const [clone .part.0] (1 samples, 0.03%)</title><rect x="993.8" y="3587.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.8" y="3598.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::FreeCSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="993.8" y="3571.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="996.8" y="3582.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool) (1 samples, 0.03%)</title><rect x="993.8" y="3555.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="996.8" y="3566.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (1 samples, 0.03%)</title><rect x="993.8" y="3539.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="996.8" y="3550.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.03%)</title><rect x="993.8" y="3523.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="996.8" y="3534.0"></text>
</g>
<g>
<title>HeapRegionClaimer::claim_region(unsigned int) (1 samples, 0.03%)</title><rect x="994.1" y="3587.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="997.1" y="3598.0"></text>
</g>
<g>
<title>G1MergeHeapRootsTask::work(unsigned int) (6 samples, 0.15%)</title><rect x="994.4" y="3619.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="997.4" y="3630.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_incremental_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned int, unsigned int) const (3 samples, 0.08%)</title><rect x="995.0" y="3603.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="998.0" y="3614.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_part_from(HeapRegionClosure*, HeapRegionClaimer*, unsigned long, unsigned long, unsigned int, unsigned int) const [clone .part.0] (2 samples, 0.05%)</title><rect x="995.0" y="3587.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="998.0" y="3598.0"></text>
</g>
<g>
<title>G1MergeHeapRootsTask::G1MergeCardSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="995.3" y="3571.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="998.3" y="3582.0"></text>
</g>
<g>
<title>HeapRegionClaimer::claim_region(unsigned int) (1 samples, 0.03%)</title><rect x="995.6" y="3587.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="998.6" y="3598.0"></text>
</g>
<g>
<title>PtrQueueSet::deallocate_buffer(BufferNode*) (1 samples, 0.03%)</title><rect x="995.9" y="3603.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="998.9" y="3614.0"></text>
</g>
<g>
<title>G1PrepareEvacuationTask::work(unsigned int) (13 samples, 0.33%)</title><rect x="996.2" y="3619.0" width="3.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="999.2" y="3630.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (13 samples, 0.33%)</title><rect x="996.2" y="3603.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="999.2" y="3614.0"></text>
</g>
<g>
<title>G1PrepareEvacuationTask::G1PrepareRegionsClosure::do_heap_region(HeapRegion*) (3 samples, 0.08%)</title><rect x="998.0" y="3587.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.0" y="3598.0"></text>
</g>
<g>
<title>G1RemSet::prepare_region_for_scan(HeapRegion*) (4 samples, 0.10%)</title><rect x="998.9" y="3587.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1001.9" y="3598.0"></text>
</g>
<g>
<title>G1RebuildFreeListTask::work(unsigned int) (2 samples, 0.05%)</title><rect x="1000.1" y="3619.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1003.1" y="3630.0"></text>
</g>
<g>
<title>G1STWRefProcTaskProxy::work(unsigned int) (3 samples, 0.08%)</title><rect x="1000.7" y="3619.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1003.7" y="3630.0"></text>
</g>
<g>
<title>RefProcPhase2Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (2 samples, 0.05%)</title><rect x="1000.7" y="3603.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1003.7" y="3614.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (1 samples, 0.03%)</title><rect x="1000.7" y="3587.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1003.7" y="3598.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_to_threshold(unsigned int) (1 samples, 0.03%)</title><rect x="1000.7" y="3571.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1003.7" y="3582.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_weak_final_refs_work(DiscoveredList&amp;, BoolObjectClosure*, OopClosure*, bool) (1 samples, 0.03%)</title><rect x="1001.0" y="3587.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1004.0" y="3598.0"></text>
</g>
<g>
<title>RefProcPhase4Task::work(unsigned int, BoolObjectClosure&amp;, OopClosure&amp;, VoidClosure&amp;) (1 samples, 0.03%)</title><rect x="1001.3" y="3603.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1004.3" y="3614.0"></text>
</g>
<g>
<title>G1STWIsAliveClosure::do_object_b(oopDesc*) (1 samples, 0.03%)</title><rect x="1001.3" y="3587.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1004.3" y="3598.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (1 samples, 0.03%)</title><rect x="1001.6" y="3619.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1004.6" y="3630.0"></text>
</g>
<g>
<title>void WeakProcessor::Task::work&lt;G1STWIsAliveClosure, G1KeepAliveClosure&gt;(unsigned int, G1STWIsAliveClosure*, G1KeepAliveClosure*) (5 samples, 0.13%)</title><rect x="1001.9" y="3619.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1004.9" y="3630.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (607 samples, 15.46%)</title><rect x="1003.4" y="3635.0" width="182.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1006.4" y="3646.0">JavaThread::thread_main_..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (587 samples, 14.95%)</title><rect x="1003.4" y="3619.0" width="176.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.4" y="3630.0">CompileBroker::compiler..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (581 samples, 14.80%)</title><rect x="1003.7" y="3603.0" width="174.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1006.7" y="3614.0">CompileBroker::invoke_..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) (491 samples, 12.50%)</title><rect x="1003.7" y="3587.0" width="147.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1006.7" y="3598.0">C2Compiler::compile..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, ciMethod*, int, bool, bool, bool, bool, DirectiveSet*) (491 samples, 12.50%)</title><rect x="1003.7" y="3571.0" width="147.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1006.7" y="3582.0">Compile::Compile(ci..</text>
</g>
<g>
<title>CallGenerator::for_inline(ciMethod*, float) (1 samples, 0.03%)</title><rect x="1003.7" y="3555.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1006.7" y="3566.0"></text>
</g>
<g>
<title>InlineTree::check_can_parse(ciMethod*) (1 samples, 0.03%)</title><rect x="1003.7" y="3539.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1006.7" y="3550.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1003.7" y="3523.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1006.7" y="3534.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1003.7" y="3507.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1006.7" y="3518.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1003.7" y="3491.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1006.7" y="3502.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1003.7" y="3475.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1006.7" y="3486.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1003.7" y="3459.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1006.7" y="3470.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1003.7" y="3443.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1006.7" y="3454.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="1003.7" y="3427.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1006.7" y="3438.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1003.7" y="3411.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.7" y="3422.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1003.7" y="3395.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1006.7" y="3406.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.03%)</title><rect x="1003.7" y="3379.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1006.7" y="3390.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1003.7" y="3363.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1006.7" y="3374.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="1003.7" y="3347.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1006.7" y="3358.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="1003.7" y="3331.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1006.7" y="3342.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1003.7" y="3315.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1006.7" y="3326.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0] (1 samples, 0.03%)</title><rect x="1003.7" y="3299.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1006.7" y="3310.0"></text>
</g>
<g>
<title>Compile::Code_Gen() (326 samples, 8.30%)</title><rect x="1004.0" y="3555.0" width="98.0" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1007.0" y="3566.0">Compile::Co..</text>
</g>
<g>
<title>MachNode::ideal_Opcode() const (1 samples, 0.03%)</title><rect x="1004.0" y="3539.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1007.0" y="3550.0"></text>
</g>
<g>
<title>Matcher::match() (28 samples, 0.71%)</title><rect x="1004.3" y="3539.0" width="8.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1007.3" y="3550.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (3 samples, 0.08%)</title><rect x="1004.3" y="3523.0" width="0.9" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1007.3" y="3534.0"></text>
</g>
<g>
<title>CmpNNode::Opcode() const (1 samples, 0.03%)</title><rect x="1005.2" y="3523.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1008.2" y="3534.0"></text>
</g>
<g>
<title>Matcher::Fixup_Save_On_Entry() (1 samples, 0.03%)</title><rect x="1005.5" y="3523.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1008.5" y="3534.0"></text>
</g>
<g>
<title>Matcher::find_shared(Node*) (3 samples, 0.08%)</title><rect x="1005.8" y="3523.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1008.8" y="3534.0"></text>
</g>
<g>
<title>StoreCMNode::Opcode() const (1 samples, 0.03%)</title><rect x="1006.4" y="3507.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1009.4" y="3518.0"></text>
</g>
<g>
<title>Matcher::specialize_generic_vector_operands() (1 samples, 0.03%)</title><rect x="1006.7" y="3523.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1009.7" y="3534.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (18 samples, 0.46%)</title><rect x="1007.0" y="3523.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1010.0" y="3534.0"></text>
</g>
<g>
<title>Matcher::match_sfpt(SafePointNode*) (3 samples, 0.08%)</title><rect x="1007.9" y="3507.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1010.9" y="3518.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (2 samples, 0.05%)</title><rect x="1008.2" y="3491.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1011.2" y="3502.0"></text>
</g>
<g>
<title>Matcher::match_tree(Node const*) (12 samples, 0.31%)</title><rect x="1008.8" y="3507.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1011.8" y="3518.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (5 samples, 0.13%)</title><rect x="1009.4" y="3491.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1012.4" y="3502.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (4 samples, 0.10%)</title><rect x="1009.4" y="3475.0" width="1.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1012.4" y="3486.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.03%)</title><rect x="1009.7" y="3459.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1012.7" y="3470.0"></text>
</g>
<g>
<title>Matcher::Label_Root(Node const*, State*, Node*, Node*&amp;) (1 samples, 0.03%)</title><rect x="1009.7" y="3443.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1012.7" y="3454.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (1 samples, 0.03%)</title><rect x="1009.7" y="3427.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1012.7" y="3438.0"></text>
</g>
<g>
<title>State::_sub_Op_AddP(Node const*) (2 samples, 0.05%)</title><rect x="1010.0" y="3459.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1013.0" y="3470.0"></text>
</g>
<g>
<title>State::DFA(int, Node const*) (1 samples, 0.03%)</title><rect x="1010.6" y="3475.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1013.6" y="3486.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (1 samples, 0.03%)</title><rect x="1010.6" y="3459.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1013.6" y="3470.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (5 samples, 0.13%)</title><rect x="1010.9" y="3491.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1013.9" y="3502.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (4 samples, 0.10%)</title><rect x="1011.2" y="3475.0" width="1.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1014.2" y="3486.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.03%)</title><rect x="1011.8" y="3459.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1014.8" y="3470.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.03%)</title><rect x="1011.8" y="3443.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1014.8" y="3454.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.03%)</title><rect x="1011.8" y="3427.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1014.8" y="3438.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.03%)</title><rect x="1011.8" y="3411.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1014.8" y="3422.0"></text>
</g>
<g>
<title>Matcher::ReduceInst_Interior(State*, int, Node*&amp;, MachNode*, unsigned int) (1 samples, 0.03%)</title><rect x="1012.1" y="3459.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1015.1" y="3470.0"></text>
</g>
<g>
<title>Matcher::ReduceInst(State*, int, Node*&amp;) (1 samples, 0.03%)</title><rect x="1012.1" y="3443.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1015.1" y="3454.0"></text>
</g>
<g>
<title>State::MachOperGenerator(int) (1 samples, 0.03%)</title><rect x="1012.1" y="3427.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1015.1" y="3438.0"></text>
</g>
<g>
<title>ParmNode::Opcode() const (1 samples, 0.03%)</title><rect x="1012.4" y="3523.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1015.4" y="3534.0"></text>
</g>
<g>
<title>PhaseBlockLayout::PhaseBlockLayout(PhaseCFG&amp;) (4 samples, 0.10%)</title><rect x="1012.7" y="3539.0" width="1.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1015.7" y="3550.0"></text>
</g>
<g>
<title>PhaseBlockLayout::find_edges() (1 samples, 0.03%)</title><rect x="1012.7" y="3523.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1015.7" y="3534.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 0.03%)</title><rect x="1012.7" y="3507.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1015.7" y="3518.0"></text>
</g>
<g>
<title>PhaseBlockLayout::merge_traces(bool) (1 samples, 0.03%)</title><rect x="1013.0" y="3523.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1016.0" y="3534.0"></text>
</g>
<g>
<title>PhaseBlockLayout::reorder_traces(int) (2 samples, 0.05%)</title><rect x="1013.3" y="3523.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1016.3" y="3534.0"></text>
</g>
<g>
<title>Trace::fixup_blocks(PhaseCFG&amp;) (2 samples, 0.05%)</title><rect x="1013.3" y="3507.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1016.3" y="3518.0"></text>
</g>
<g>
<title>Block::num_fall_throughs() (2 samples, 0.05%)</title><rect x="1013.3" y="3491.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1016.3" y="3502.0"></text>
</g>
<g>
<title>PhaseCFG::PhaseCFG(Arena*, RootNode*, Matcher&amp;) (2 samples, 0.05%)</title><rect x="1013.9" y="3539.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1016.9" y="3550.0"></text>
</g>
<g>
<title>PhaseCFG::build_cfg() (2 samples, 0.05%)</title><rect x="1013.9" y="3523.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1016.9" y="3534.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (29 samples, 0.74%)</title><rect x="1014.5" y="3539.0" width="8.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1017.5" y="3550.0"></text>
</g>
<g>
<title>PhaseCFG::build_dominator_tree() (1 samples, 0.03%)</title><rect x="1014.5" y="3523.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1017.5" y="3534.0"></text>
</g>
<g>
<title>PhaseCFG::estimate_block_frequency() (1 samples, 0.03%)</title><rect x="1014.8" y="3523.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1017.8" y="3534.0"></text>
</g>
<g>
<title>CFGLoop::compute_freq() (1 samples, 0.03%)</title><rect x="1014.8" y="3507.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1017.8" y="3518.0"></text>
</g>
<g>
<title>Block::succ_prob(unsigned int) (1 samples, 0.03%)</title><rect x="1014.8" y="3491.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1017.8" y="3502.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (27 samples, 0.69%)</title><rect x="1015.1" y="3523.0" width="8.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1018.1" y="3534.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.05%)</title><rect x="1015.1" y="3507.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1018.1" y="3518.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1015.4" y="3491.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1018.4" y="3502.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_late(VectorSet&amp;, Node_Stack&amp;) (8 samples, 0.20%)</title><rect x="1015.7" y="3507.0" width="2.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1018.7" y="3518.0"></text>
</g>
<g>
<title>CProjNode::is_block_proj() const (2 samples, 0.05%)</title><rect x="1016.0" y="3491.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1019.0" y="3502.0"></text>
</g>
<g>
<title>Node_Backward_Iterator::next() (2 samples, 0.05%)</title><rect x="1016.6" y="3491.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1019.6" y="3502.0"></text>
</g>
<g>
<title>PhaseCFG::insert_anti_dependences(Block*, Node*, bool) (2 samples, 0.05%)</title><rect x="1017.2" y="3491.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1020.2" y="3502.0"></text>
</g>
<g>
<title>MachNode::adr_type() const (1 samples, 0.03%)</title><rect x="1017.2" y="3475.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1020.2" y="3486.0"></text>
</g>
<g>
<title>storeImmCM0_regNode::memory_operand() const (1 samples, 0.03%)</title><rect x="1017.2" y="3459.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1020.2" y="3470.0"></text>
</g>
<g>
<title>indOffset8NarrowOper::constant_disp() const (1 samples, 0.03%)</title><rect x="1017.5" y="3475.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1020.5" y="3486.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_node_into_block(Node*, Block*) (1 samples, 0.03%)</title><rect x="1017.8" y="3491.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1020.8" y="3502.0"></text>
</g>
<g>
<title>Node_Array::insert(unsigned int, Node*) (1 samples, 0.03%)</title><rect x="1017.8" y="3475.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1020.8" y="3486.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_local(Block*, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, long*) (3 samples, 0.08%)</title><rect x="1018.1" y="3507.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1021.1" y="3518.0"></text>
</g>
<g>
<title>PhaseCFG::adjust_register_pressure(Node*, Block*, long*, bool) (1 samples, 0.03%)</title><rect x="1018.4" y="3491.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1021.4" y="3502.0"></text>
</g>
<g>
<title>PhaseCFG::select(Block*, Node_List&amp;, GrowableArray&lt;int&gt;&amp;, VectorSet&amp;, unsigned int, long*) (1 samples, 0.03%)</title><rect x="1018.7" y="3491.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1021.7" y="3502.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_pinned_nodes(VectorSet&amp;) (1 samples, 0.03%)</title><rect x="1019.0" y="3507.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1022.0" y="3518.0"></text>
</g>
<g>
<title>PhaseCFG::is_dominator(Node*, Node*) (1 samples, 0.03%)</title><rect x="1019.0" y="3491.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1022.0" y="3502.0"></text>
</g>
<g>
<title>PhaseChaitin::PhaseChaitin(unsigned int, PhaseCFG&amp;, Matcher&amp;, bool) (2 samples, 0.05%)</title><rect x="1019.3" y="3507.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1022.3" y="3518.0"></text>
</g>
<g>
<title>PhaseRegAlloc::PhaseRegAlloc(unsigned int, PhaseCFG&amp;, Matcher&amp;, void (*)()) (1 samples, 0.03%)</title><rect x="1019.6" y="3491.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1022.6" y="3502.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (1 samples, 0.03%)</title><rect x="1019.9" y="3507.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1022.9" y="3518.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.03%)</title><rect x="1019.9" y="3491.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1022.9" y="3502.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (9 samples, 0.23%)</title><rect x="1020.2" y="3507.0" width="2.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1023.2" y="3518.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (1 samples, 0.03%)</title><rect x="1021.4" y="3491.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1024.4" y="3502.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1021.7" y="3491.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1024.7" y="3502.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (3 samples, 0.08%)</title><rect x="1022.0" y="3491.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1025.0" y="3502.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.03%)</title><rect x="1022.3" y="3475.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1025.3" y="3486.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1022.6" y="3475.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1025.6" y="3486.0"></text>
</g>
<g>
<title>rRegPOper::in_RegMask(int) const (1 samples, 0.03%)</title><rect x="1022.9" y="3507.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1025.9" y="3518.0"></text>
</g>
<g>
<title>PhaseCFG::remove_empty_blocks() (1 samples, 0.03%)</title><rect x="1023.2" y="3539.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1026.2" y="3550.0"></text>
</g>
<g>
<title>PhaseCFG::move_to_end(Block*, unsigned int) (1 samples, 0.03%)</title><rect x="1023.2" y="3523.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1026.2" y="3534.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (241 samples, 6.14%)</title><rect x="1023.5" y="3539.0" width="72.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1026.5" y="3550.0">PhaseCha..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.05%)</title><rect x="1023.8" y="3523.0" width="0.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1026.8" y="3534.0"></text>
</g>
<g>
<title>LiveRangeMap::compress_uf_map_for_nodes() (1 samples, 0.03%)</title><rect x="1024.4" y="3523.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1027.4" y="3534.0"></text>
</g>
<g>
<title>MachCallJavaNode::in_RegMask(unsigned int) const (1 samples, 0.03%)</title><rect x="1024.7" y="3523.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1027.7" y="3534.0"></text>
</g>
<g>
<title>MachNode::ideal_Opcode() const (1 samples, 0.03%)</title><rect x="1025.0" y="3523.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1028.0" y="3534.0"></text>
</g>
<g>
<title>MachNode::oper_input_base() const (1 samples, 0.03%)</title><rect x="1025.3" y="3523.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1028.3" y="3534.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.03%)</title><rect x="1025.6" y="3523.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1028.6" y="3534.0"></text>
</g>
<g>
<title>MergeMemNode::out_RegMask() const (1 samples, 0.03%)</title><rect x="1025.9" y="3523.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1028.9" y="3534.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (6 samples, 0.15%)</title><rect x="1026.2" y="3523.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1029.2" y="3534.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (17 samples, 0.43%)</title><rect x="1028.0" y="3523.0" width="5.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1031.0" y="3534.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1029.5" y="3507.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1032.5" y="3518.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (11 samples, 0.28%)</title><rect x="1029.8" y="3507.0" width="3.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1032.8" y="3518.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="1031.0" y="3491.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1034.0" y="3502.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (6 samples, 0.15%)</title><rect x="1031.3" y="3491.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1034.3" y="3502.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (15 samples, 0.38%)</title><rect x="1033.1" y="3523.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1036.1" y="3534.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1033.7" y="3507.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1036.7" y="3518.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (11 samples, 0.28%)</title><rect x="1034.3" y="3507.0" width="3.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1037.3" y="3518.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.05%)</title><rect x="1037.1" y="3491.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1040.1" y="3502.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (20 samples, 0.51%)</title><rect x="1037.7" y="3523.0" width="6.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1040.7" y="3534.0"></text>
</g>
<g>
<title>MachNode::rematerialize() const (1 samples, 0.03%)</title><rect x="1042.2" y="3507.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1045.2" y="3518.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.03%)</title><rect x="1042.5" y="3507.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1045.5" y="3518.0"></text>
</g>
<g>
<title>PhaseChaitin::split_DEF(Node*, Block*, int, unsigned int, Node**, Node**, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.03%)</title><rect x="1042.8" y="3507.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1045.8" y="3518.0"></text>
</g>
<g>
<title>TypeNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1042.8" y="3491.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1045.8" y="3502.0"></text>
</g>
<g>
<title>PhaseChaitin::split_Rematerialize(Node*, Block*, unsigned int, unsigned int&amp;, GrowableArray&lt;unsigned int&gt;, int, unsigned int*, Node**, bool) (1 samples, 0.03%)</title><rect x="1043.1" y="3507.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1046.1" y="3518.0"></text>
</g>
<g>
<title>PhaseChaitin::clone_projs(Block*, unsigned int, Node*, Node*, unsigned int&amp;) (1 samples, 0.03%)</title><rect x="1043.1" y="3491.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1046.1" y="3502.0"></text>
</g>
<g>
<title>PhaseChaitin::split_USE(MachSpillCopyNode::SpillType, Node*, Block*, Node*, unsigned int, unsigned int, bool, bool, GrowableArray&lt;unsigned int&gt;, int) (1 samples, 0.03%)</title><rect x="1043.4" y="3507.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1046.4" y="3518.0"></text>
</g>
<g>
<title>PhaseChaitin::get_spillcopy_wide(MachSpillCopyNode::SpillType, Node*, Node*, unsigned int) (1 samples, 0.03%)</title><rect x="1043.4" y="3491.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1046.4" y="3502.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.03%)</title><rect x="1043.4" y="3475.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1046.4" y="3486.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (41 samples, 1.04%)</title><rect x="1043.7" y="3523.0" width="12.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1046.7" y="3534.0"></text>
</g>
<g>
<title>IndexSet::IndexSet(IndexSet*) (2 samples, 0.05%)</title><rect x="1045.5" y="3507.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1048.5" y="3518.0"></text>
</g>
<g>
<title>JVMState::debug_start() const (1 samples, 0.03%)</title><rect x="1046.1" y="3507.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1049.1" y="3518.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (5 samples, 0.13%)</title><rect x="1046.4" y="3507.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1049.4" y="3518.0"></text>
</g>
<g>
<title>PhaseChaitin::compute_initial_block_pressure(Block*, IndexSet*, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;, double) [clone .part.0] (2 samples, 0.05%)</title><rect x="1047.9" y="3507.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1050.9" y="3518.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1048.2" y="3491.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.2" y="3502.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0] (22 samples, 0.56%)</title><rect x="1048.5" y="3507.0" width="6.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1051.5" y="3518.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (4 samples, 0.10%)</title><rect x="1053.0" y="3491.0" width="1.2" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1056.0" y="3502.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.08%)</title><rect x="1054.2" y="3491.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1057.2" y="3502.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) [clone .part.0] (3 samples, 0.08%)</title><rect x="1055.1" y="3507.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1058.1" y="3518.0"></text>
</g>
<g>
<title>RegMask::Size() const (1 samples, 0.03%)</title><rect x="1055.7" y="3491.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1058.7" y="3502.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_virtual() (2 samples, 0.05%)</title><rect x="1056.0" y="3523.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1059.0" y="3534.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) [clone .part.0] (1 samples, 0.03%)</title><rect x="1056.3" y="3507.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1059.3" y="3518.0"></text>
</g>
<g>
<title>PhaseChaitin::cache_lrg_info() (1 samples, 0.03%)</title><rect x="1056.6" y="3523.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1059.6" y="3534.0"></text>
</g>
<g>
<title>PhaseChaitin::fixup_spills() (1 samples, 0.03%)</title><rect x="1056.9" y="3523.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1059.9" y="3534.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (11 samples, 0.28%)</title><rect x="1057.2" y="3523.0" width="3.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1060.2" y="3534.0"></text>
</g>
<g>
<title>RegMask::is_misaligned_pair() const (1 samples, 0.03%)</title><rect x="1059.9" y="3507.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1062.9" y="3518.0"></text>
</g>
<g>
<title>rRegPOper::type() const (1 samples, 0.03%)</title><rect x="1060.2" y="3507.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1063.2" y="3518.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.0] (2 samples, 0.05%)</title><rect x="1060.5" y="3523.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1063.5" y="3534.0"></text>
</g>
<g>
<title>PhaseChaitin::merge_multidefs() (6 samples, 0.15%)</title><rect x="1061.1" y="3523.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1064.1" y="3534.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (21 samples, 0.53%)</title><rect x="1062.9" y="3523.0" width="6.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1065.9" y="3534.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (14 samples, 0.36%)</title><rect x="1064.7" y="3507.0" width="4.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1067.7" y="3518.0"></text>
</g>
<g>
<title>PhaseChaitin::yank_if_dead_recurse(Node*, Node*, Block*, Node_List*, Node_List*) [clone .part.0] (1 samples, 0.03%)</title><rect x="1068.9" y="3507.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1071.9" y="3518.0"></text>
</g>
<g>
<title>PhaseChaitin::yank(Node*, Block*, Node_List*, Node_List*) (1 samples, 0.03%)</title><rect x="1068.9" y="3491.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1071.9" y="3502.0"></text>
</g>
<g>
<title>Block::find_remove(Node const*) (1 samples, 0.03%)</title><rect x="1068.9" y="3475.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1071.9" y="3486.0"></text>
</g>
<g>
<title>Node_Array::remove(unsigned int) (1 samples, 0.03%)</title><rect x="1068.9" y="3459.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1071.9" y="3470.0"></text>
</g>
<g>
<title>PhaseChaitin::stretch_base_pointer_live_ranges(ResourceArea*) (2 samples, 0.05%)</title><rect x="1069.2" y="3523.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1072.2" y="3534.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.03%)</title><rect x="1069.5" y="3507.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1072.5" y="3518.0"></text>
</g>
<g>
<title>PhaseCoalesce::coalesce_driver() (45 samples, 1.15%)</title><rect x="1069.8" y="3523.0" width="13.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.8" y="3534.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::coalesce(Block*) (1 samples, 0.03%)</title><rect x="1069.8" y="3507.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.8" y="3518.0"></text>
</g>
<g>
<title>PhaseCoalesce::combine_these_two(Node*, Node*) (1 samples, 0.03%)</title><rect x="1069.8" y="3491.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1072.8" y="3502.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::coalesce(Block*) (44 samples, 1.12%)</title><rect x="1070.1" y="3507.0" width="13.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.1" y="3518.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::copy_copy(Node*, Node*, Block*, unsigned int) [clone .part.0] (42 samples, 1.07%)</title><rect x="1070.1" y="3491.0" width="12.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1073.1" y="3502.0"></text>
</g>
<g>
<title>IndexSet::free_block(unsigned int) (1 samples, 0.03%)</title><rect x="1070.1" y="3475.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.1" y="3486.0"></text>
</g>
<g>
<title>IndexSet::lrg_union(unsigned int, unsigned int, unsigned int, PhaseIFG const*, RegMask const&amp;) (13 samples, 0.33%)</title><rect x="1070.4" y="3475.0" width="3.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1073.4" y="3486.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (1 samples, 0.03%)</title><rect x="1074.0" y="3459.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1077.0" y="3470.0"></text>
</g>
<g>
<title>PhaseConservativeCoalesce::update_ifg(unsigned int, unsigned int, IndexSet*, IndexSet*) (23 samples, 0.59%)</title><rect x="1074.3" y="3475.0" width="6.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1077.3" y="3486.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (5 samples, 0.13%)</title><rect x="1081.2" y="3475.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1084.2" y="3486.0"></text>
</g>
<g>
<title>PhaseIFG::test_edge_sq(unsigned int, unsigned int) const (2 samples, 0.05%)</title><rect x="1082.7" y="3491.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1085.7" y="3502.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (6 samples, 0.15%)</title><rect x="1083.3" y="3523.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1086.3" y="3534.0"></text>
</g>
<g>
<title>PhaseIFG::effective_degree(unsigned int) const (6 samples, 0.15%)</title><rect x="1083.3" y="3507.0" width="1.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1086.3" y="3518.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (4 samples, 0.10%)</title><rect x="1083.9" y="3491.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1086.9" y="3502.0"></text>
</g>
<g>
<title>PhaseIFG::SquareUp() (10 samples, 0.25%)</title><rect x="1085.1" y="3523.0" width="3.0" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1088.1" y="3534.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (5 samples, 0.13%)</title><rect x="1086.6" y="3507.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1089.6" y="3518.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.08%)</title><rect x="1088.1" y="3523.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1091.1" y="3534.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.05%)</title><rect x="1088.4" y="3507.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1091.4" y="3518.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (19 samples, 0.48%)</title><rect x="1089.0" y="3523.0" width="5.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1092.0" y="3534.0"></text>
</g>
<g>
<title>IndexSet::alloc_block_containing(unsigned int) (1 samples, 0.03%)</title><rect x="1091.7" y="3507.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1094.7" y="3518.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (9 samples, 0.23%)</title><rect x="1092.0" y="3507.0" width="2.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1095.0" y="3518.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int, Arena*) (1 samples, 0.03%)</title><rect x="1093.5" y="3491.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1096.5" y="3502.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (3 samples, 0.08%)</title><rect x="1093.8" y="3491.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1096.8" y="3502.0"></text>
</g>
<g>
<title>RegMask::clear_to_sets(unsigned int) (1 samples, 0.03%)</title><rect x="1094.7" y="3523.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1097.7" y="3534.0"></text>
</g>
<g>
<title>RethrowExceptionNode::ideal_Opcode() const (1 samples, 0.03%)</title><rect x="1095.0" y="3523.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1098.0" y="3534.0"></text>
</g>
<g>
<title>TypeNode::ideal_reg() const (2 samples, 0.05%)</title><rect x="1095.3" y="3523.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1098.3" y="3534.0"></text>
</g>
<g>
<title>PhaseOutput::Output() (11 samples, 0.28%)</title><rect x="1095.9" y="3539.0" width="3.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1098.9" y="3550.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="1095.9" y="3523.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1098.9" y="3534.0"></text>
</g>
<g>
<title>PhaseOutput::BuildOopMaps() (5 samples, 0.13%)</title><rect x="1096.2" y="3523.0" width="1.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1099.2" y="3534.0"></text>
</g>
<g>
<title>OopFlow::compute_reach(PhaseRegAlloc*, int, Dict*) (3 samples, 0.08%)</title><rect x="1096.9" y="3507.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1099.9" y="3518.0"></text>
</g>
<g>
<title>OopFlow::build_oop_map(Node*, int, PhaseRegAlloc*, int*) (2 samples, 0.05%)</title><rect x="1097.2" y="3491.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1100.2" y="3502.0"></text>
</g>
<g>
<title>PhaseOutput::shorten_branches(unsigned int*) (5 samples, 0.13%)</title><rect x="1097.8" y="3523.0" width="1.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1100.8" y="3534.0"></text>
</g>
<g>
<title>PhaseOutput::scratch_emit_size(Node const*) (3 samples, 0.08%)</title><rect x="1098.1" y="3507.0" width="0.9" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1101.1" y="3518.0"></text>
</g>
<g>
<title>MachEpilogNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="1098.1" y="3491.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1101.1" y="3502.0"></text>
</g>
<g>
<title>MachPrologNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="1098.4" y="3491.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1101.4" y="3502.0"></text>
</g>
<g>
<title>MacroAssembler::verified_entry(int, int, bool, bool) (1 samples, 0.03%)</title><rect x="1098.4" y="3475.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1101.4" y="3486.0"></text>
</g>
<g>
<title>os::vm_page_size() (1 samples, 0.03%)</title><rect x="1098.4" y="3459.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1101.4" y="3470.0"></text>
</g>
<g>
<title>loadNNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="1098.7" y="3491.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1101.7" y="3502.0"></text>
</g>
<g>
<title>testI_regNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="1099.0" y="3507.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1102.0" y="3518.0"></text>
</g>
<g>
<title>PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*) (7 samples, 0.18%)</title><rect x="1099.3" y="3539.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1102.3" y="3550.0"></text>
</g>
<g>
<title>JVMState::of_depth(int) const (1 samples, 0.03%)</title><rect x="1099.6" y="3523.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1102.6" y="3534.0"></text>
</g>
<g>
<title>Label::patch_instructions(MacroAssembler*) (1 samples, 0.03%)</title><rect x="1099.9" y="3523.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1102.9" y="3534.0"></text>
</g>
<g>
<title>MachEpilogNode::emit(CodeBuffer&amp;, PhaseRegAlloc*) const (1 samples, 0.03%)</title><rect x="1100.2" y="3523.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1103.2" y="3534.0"></text>
</g>
<g>
<title>MacroAssembler::safepoint_poll(Label&amp;, RegisterImpl*, bool, bool) (1 samples, 0.03%)</title><rect x="1100.2" y="3507.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1103.2" y="3518.0"></text>
</g>
<g>
<title>Assembler::cmpq(RegisterImpl*, Address) (1 samples, 0.03%)</title><rect x="1100.2" y="3491.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.2" y="3502.0"></text>
</g>
<g>
<title>Assembler::emit_operand_helper(int, int, int, Address::ScaleFactor, int, RelocationHolder const&amp;, int) (1 samples, 0.03%)</title><rect x="1100.2" y="3475.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1103.2" y="3486.0"></text>
</g>
<g>
<title>Assembler::emit_data(int, RelocationHolder const&amp;, int) (1 samples, 0.03%)</title><rect x="1100.2" y="3459.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1103.2" y="3470.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (1 samples, 0.03%)</title><rect x="1100.5" y="3523.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1103.5" y="3534.0"></text>
</g>
<g>
<title>PhaseOutput::Process_OopMap_Node(MachNode*, int) (2 samples, 0.05%)</title><rect x="1100.8" y="3523.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1103.8" y="3534.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1101.1" y="3507.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1104.1" y="3518.0"></text>
</g>
<g>
<title>PhaseOutput::install() (2 samples, 0.05%)</title><rect x="1101.4" y="3539.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1104.4" y="3550.0"></text>
</g>
<g>
<title>PhaseOutput::install_code(ciMethod*, int, AbstractCompiler*, bool, bool, RTMState) (2 samples, 0.05%)</title><rect x="1101.4" y="3523.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1104.4" y="3534.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState, GrowableArrayView&lt;BufferBlob*&gt; const&amp;) (2 samples, 0.05%)</title><rect x="1101.4" y="3507.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1104.4" y="3518.0"></text>
</g>
<g>
<title>Dependencies::encode_content_bytes() (1 samples, 0.03%)</title><rect x="1101.4" y="3491.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1104.4" y="3502.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, GrowableArrayView&lt;BufferBlob*&gt; const&amp;, char*, int, int, char const*, FailedSpeculation**) (1 samples, 0.03%)</title><rect x="1101.7" y="3491.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1104.7" y="3502.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, int, int) (1 samples, 0.03%)</title><rect x="1101.7" y="3475.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1104.7" y="3486.0"></text>
</g>
<g>
<title>CodeHeap::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="1101.7" y="3459.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1104.7" y="3470.0"></text>
</g>
<g>
<title>CodeHeap::search_freelist(unsigned long) (1 samples, 0.03%)</title><rect x="1101.7" y="3443.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1104.7" y="3454.0"></text>
</g>
<g>
<title>Compile::Optimize() (116 samples, 2.95%)</title><rect x="1102.0" y="3555.0" width="34.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1105.0" y="3566.0">Co..</text>
</g>
<g>
<title>CmpINode::sub(Type const*, Type const*) const (1 samples, 0.03%)</title><rect x="1102.0" y="3539.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.0" y="3550.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping() [clone .part.0] (1 samples, 0.03%)</title><rect x="1102.3" y="3539.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1105.3" y="3550.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_walk(Node_Stack&amp;, Node*, Final_Reshape_Counts&amp;) (1 samples, 0.03%)</title><rect x="1102.3" y="3523.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.3" y="3534.0"></text>
</g>
<g>
<title>Compile::final_graph_reshaping_main_switch(Node*, Final_Reshape_Counts&amp;, unsigned int) (1 samples, 0.03%)</title><rect x="1102.3" y="3507.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1105.3" y="3518.0"></text>
</g>
<g>
<title>Node::replace_by(Node*) (1 samples, 0.03%)</title><rect x="1102.3" y="3491.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.3" y="3502.0"></text>
</g>
<g>
<title>Compile::inline_boxing_calls(PhaseIterGVN&amp;) (4 samples, 0.10%)</title><rect x="1102.6" y="3539.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.6" y="3550.0"></text>
</g>
<g>
<title>CallGenerator::do_late_inline_helper() (2 samples, 0.05%)</title><rect x="1102.6" y="3523.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1105.6" y="3534.0"></text>
</g>
<g>
<title>GraphKit::replace_call(CallNode*, Node*, bool) (1 samples, 0.03%)</title><rect x="1102.6" y="3507.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.6" y="3518.0"></text>
</g>
<g>
<title>Compile::gvn_replace_by(Node*, Node*) (1 samples, 0.03%)</title><rect x="1102.6" y="3491.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1105.6" y="3502.0"></text>
</g>
<g>
<title>NodeHash::hash_delete(Node const*) (1 samples, 0.03%)</title><rect x="1102.6" y="3475.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.6" y="3486.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1102.9" y="3507.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.9" y="3518.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1102.9" y="3491.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.9" y="3502.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.0] (1 samples, 0.03%)</title><rect x="1102.9" y="3475.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1105.9" y="3486.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.03%)</title><rect x="1102.9" y="3459.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1105.9" y="3470.0"></text>
</g>
<g>
<title>ciMethodData::load_remaining_extra_data() (1 samples, 0.03%)</title><rect x="1102.9" y="3443.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1105.9" y="3454.0"></text>
</g>
<g>
<title>ciMethodData::prepare_metadata() (1 samples, 0.03%)</title><rect x="1102.9" y="3427.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1105.9" y="3438.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_cleanup(PhaseIterGVN&amp;) (2 samples, 0.05%)</title><rect x="1103.2" y="3523.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1106.2" y="3534.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1103.2" y="3507.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1106.2" y="3518.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.03%)</title><rect x="1103.5" y="3507.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1106.5" y="3518.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.03%)</title><rect x="1103.5" y="3491.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1106.5" y="3502.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.03%)</title><rect x="1103.8" y="3539.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1106.8" y="3550.0"></text>
</g>
<g>
<title>Compile::inline_incrementally_cleanup(PhaseIterGVN&amp;) (1 samples, 0.03%)</title><rect x="1103.8" y="3523.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1106.8" y="3534.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1103.8" y="3507.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1106.8" y="3518.0"></text>
</g>
<g>
<title>ConnectionGraph::do_analysis(Compile*, PhaseIterGVN*) (6 samples, 0.15%)</title><rect x="1104.1" y="3539.0" width="1.8" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1107.1" y="3550.0"></text>
</g>
<g>
<title>ConnectionGraph::compute_escape() (6 samples, 0.15%)</title><rect x="1104.1" y="3523.0" width="1.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1107.1" y="3534.0"></text>
</g>
<g>
<title>ConnectionGraph::add_call_node(CallNode*) (1 samples, 0.03%)</title><rect x="1104.4" y="3507.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1107.4" y="3518.0"></text>
</g>
<g>
<title>ciMethod::get_bcea() (1 samples, 0.03%)</title><rect x="1104.4" y="3491.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.4" y="3502.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.03%)</title><rect x="1104.4" y="3475.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.4" y="3486.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.03%)</title><rect x="1104.4" y="3459.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1107.4" y="3470.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.03%)</title><rect x="1104.4" y="3443.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.4" y="3454.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.03%)</title><rect x="1104.4" y="3427.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1107.4" y="3438.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.03%)</title><rect x="1104.4" y="3411.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1107.4" y="3422.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.03%)</title><rect x="1104.4" y="3395.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1107.4" y="3406.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::compute_escape_info() (1 samples, 0.03%)</title><rect x="1104.4" y="3379.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1107.4" y="3390.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_blocks(Arena*) (1 samples, 0.03%)</title><rect x="1104.4" y="3363.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.4" y="3374.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::iterate_one_block(ciBlock*, BCEscapeAnalyzer::StateInfo&amp;, GrowableArray&lt;ciBlock*&gt;&amp;) (1 samples, 0.03%)</title><rect x="1104.4" y="3347.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1107.4" y="3358.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::invoke(BCEscapeAnalyzer::StateInfo&amp;, Bytecodes::Code, ciMethod*, ciKlass*) (1 samples, 0.03%)</title><rect x="1104.4" y="3331.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1107.4" y="3342.0"></text>
</g>
<g>
<title>BCEscapeAnalyzer::BCEscapeAnalyzer(ciMethod*, BCEscapeAnalyzer*) (1 samples, 0.03%)</title><rect x="1104.4" y="3315.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1107.4" y="3326.0"></text>
</g>
<g>
<title>ciMethod::method_data() [clone .part.0] (1 samples, 0.03%)</title><rect x="1104.4" y="3299.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1107.4" y="3310.0"></text>
</g>
<g>
<title>ciMethodData::load_data() (1 samples, 0.03%)</title><rect x="1104.4" y="3283.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.4" y="3294.0"></text>
</g>
<g>
<title>ConnectionGraph::add_final_edges(Node*) (1 samples, 0.03%)</title><rect x="1104.7" y="3507.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1107.7" y="3518.0"></text>
</g>
<g>
<title>GrowableArrayWithAllocator&lt;PointsToNode*, GrowableArray&lt;PointsToNode*&gt; &gt;::grow(int) (1 samples, 0.03%)</title><rect x="1104.7" y="3491.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1107.7" y="3502.0"></text>
</g>
<g>
<title>ConnectionGraph::add_node_to_connection_graph(Node*, Unique_Node_List*) (1 samples, 0.03%)</title><rect x="1105.0" y="3507.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1108.0" y="3518.0"></text>
</g>
<g>
<title>ConnectionGraph::add_to_congraph_unsafe_access(Node*, unsigned int, Unique_Node_List*) (1 samples, 0.03%)</title><rect x="1105.3" y="3507.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1108.3" y="3518.0"></text>
</g>
<g>
<title>ConnectionGraph::has_ea_local_in_scope(SafePointNode*) (1 samples, 0.03%)</title><rect x="1105.6" y="3507.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1108.6" y="3518.0"></text>
</g>
<g>
<title>LoadBNode::Opcode() const (1 samples, 0.03%)</title><rect x="1105.9" y="3539.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1108.9" y="3550.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (3 samples, 0.08%)</title><rect x="1106.2" y="3539.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1109.2" y="3550.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1106.8" y="3523.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1109.8" y="3534.0"></text>
</g>
<g>
<title>PhaseCCP::do_transform() (1 samples, 0.03%)</title><rect x="1107.1" y="3539.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1110.1" y="3550.0"></text>
</g>
<g>
<title>PhaseCCP::transform(Node*) (1 samples, 0.03%)</title><rect x="1107.1" y="3523.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1110.1" y="3534.0"></text>
</g>
<g>
<title>Type::is_nan() const (1 samples, 0.03%)</title><rect x="1107.1" y="3507.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1110.1" y="3518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (13 samples, 0.33%)</title><rect x="1107.4" y="3539.0" width="3.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1110.4" y="3550.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (1 samples, 0.03%)</title><rect x="1107.4" y="3523.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1110.4" y="3534.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.03%)</title><rect x="1107.4" y="3507.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1110.4" y="3518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.05%)</title><rect x="1107.7" y="3523.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1110.7" y="3534.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1108.0" y="3507.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.0" y="3518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (7 samples, 0.18%)</title><rect x="1108.3" y="3523.0" width="2.1" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1111.3" y="3534.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (3 samples, 0.08%)</title><rect x="1109.5" y="3507.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1112.5" y="3518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (2 samples, 0.05%)</title><rect x="1109.8" y="3491.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1112.8" y="3502.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="1109.8" y="3475.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.8" y="3486.0"></text>
</g>
<g>
<title>Arena::Arealloc(void*, unsigned long, unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1109.8" y="3459.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1112.8" y="3470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (1 samples, 0.03%)</title><rect x="1110.1" y="3475.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1113.1" y="3486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1110.1" y="3459.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1113.1" y="3470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (3 samples, 0.08%)</title><rect x="1110.4" y="3523.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1113.4" y="3534.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_split_if(Node*) (1 samples, 0.03%)</title><rect x="1110.4" y="3507.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1113.4" y="3518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::handle_use(Node*, Node*, small_cache*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1110.4" y="3491.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1113.4" y="3502.0"></text>
</g>
<g>
<title>PhaseIdealLoop::spinup(Node*, Node*, Node*, Node*, Node*, small_cache*) [clone .part.0] (1 samples, 0.03%)</title><rect x="1110.4" y="3475.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1113.4" y="3486.0"></text>
</g>
<g>
<title>cmpkey(void const*, void const*) (1 samples, 0.03%)</title><rect x="1110.4" y="3459.0" width="0.3" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1113.4" y="3470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1110.7" y="3507.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1113.7" y="3518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (1 samples, 0.03%)</title><rect x="1111.0" y="3507.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.0" y="3518.0"></text>
</g>
<g>
<title>PhaseIterGVN::replace_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1111.0" y="3491.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.0" y="3502.0"></text>
</g>
<g>
<title>PhaseIterGVN::add_users_to_worklist(Node*) (1 samples, 0.03%)</title><rect x="1111.0" y="3475.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.0" y="3486.0"></text>
</g>
<g>
<title>Node_Array::grow(unsigned int) (1 samples, 0.03%)</title><rect x="1111.0" y="3459.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.0" y="3470.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="1111.0" y="3443.0" width="0.3" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1114.0" y="3454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::optimize(PhaseIterGVN&amp;, LoopOptsMode) (59 samples, 1.50%)</title><rect x="1111.3" y="3539.0" width="17.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.3" y="3550.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (56 samples, 1.43%)</title><rect x="1111.3" y="3523.0" width="16.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.3" y="3534.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1111.3" y="3507.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1114.3" y="3518.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1111.3" y="3491.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1114.3" y="3502.0"></text>
</g>
<g>
<title>IdealLoopTree::counted_loop(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1111.3" y="3475.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.3" y="3486.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1111.6" y="3507.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1114.6" y="3518.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1111.6" y="3491.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.6" y="3502.0"></text>
</g>
<g>
<title>IdealLoopTree::iteration_split_impl(PhaseIdealLoop*, Node_List&amp;) (2 samples, 0.05%)</title><rect x="1111.6" y="3475.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.6" y="3486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::do_unroll(IdealLoopTree*, Node_List&amp;, bool) (2 samples, 0.05%)</title><rect x="1111.6" y="3459.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1114.6" y="3470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop(IdealLoopTree*, Node_List&amp;, int, PhaseIdealLoop::CloneLoopMode, Node*) (2 samples, 0.05%)</title><rect x="1111.6" y="3443.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1114.6" y="3454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::clone_loop_handle_data_uses(Node*, Node_List&amp;, IdealLoopTree*, IdealLoopTree*, Node_List*&amp;, Node_List*&amp;, Node_List*&amp;, Node_List&amp;, unsigned int, PhaseIdealLoop::CloneLoopMode) (1 samples, 0.03%)</title><rect x="1111.9" y="3427.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.9" y="3438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::sink_use(Node*, Node*) (1 samples, 0.03%)</title><rect x="1111.9" y="3411.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1114.9" y="3422.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1112.2" y="3507.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.2" y="3518.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1112.2" y="3491.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1115.2" y="3502.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1112.2" y="3475.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1115.2" y="3486.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1112.2" y="3459.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.2" y="3470.0"></text>
</g>
<g>
<title>IdealLoopTree::loop_predication(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1112.2" y="3443.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1115.2" y="3454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_impl(IdealLoopTree*) [clone .part.0] (1 samples, 0.03%)</title><rect x="1112.2" y="3427.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1115.2" y="3438.0"></text>
</g>
<g>
<title>PhaseIdealLoop::loop_predication_follow_branches(Node*, IdealLoopTree*, float, PathFrequency&amp;, Node_Stack&amp;, VectorSet&amp;, Node_List&amp;) (1 samples, 0.03%)</title><rect x="1112.2" y="3411.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.2" y="3422.0"></text>
</g>
<g>
<title>PathFrequency::to(Node*) (1 samples, 0.03%)</title><rect x="1112.2" y="3395.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1115.2" y="3406.0"></text>
</g>
<g>
<title>IdealLoopTree::reassociate_invariants(PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1112.5" y="3507.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1115.5" y="3518.0"></text>
</g>
<g>
<title>IdealLoopTree::reassociate(Node*, PhaseIdealLoop*) (1 samples, 0.03%)</title><rect x="1112.5" y="3491.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1115.5" y="3502.0"></text>
</g>
<g>
<title>IdealLoopTree::is_invariant(Node*) const (1 samples, 0.03%)</title><rect x="1112.5" y="3475.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1115.5" y="3486.0"></text>
</g>
<g>
<title>IfNode::pinned() const (1 samples, 0.03%)</title><rect x="1112.8" y="3507.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1115.8" y="3518.0"></text>
</g>
<g>
<title>Node::is_CFG() const (2 samples, 0.05%)</title><rect x="1113.1" y="3507.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1116.1" y="3518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (5 samples, 0.13%)</title><rect x="1113.7" y="3507.0" width="1.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1116.7" y="3518.0"></text>
</g>
<g>
<title>NTarjan::DFS(NTarjan*, VectorSet&amp;, PhaseIdealLoop*, unsigned int*) (1 samples, 0.03%)</title><rect x="1114.9" y="3491.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1117.9" y="3502.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (6 samples, 0.15%)</title><rect x="1115.2" y="3507.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1118.2" y="3518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_early_ctrl(Node*) (2 samples, 0.05%)</title><rect x="1116.4" y="3491.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1119.4" y="3502.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (25 samples, 0.64%)</title><rect x="1117.0" y="3507.0" width="7.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1120.0" y="3518.0"></text>
</g>
<g>
<title>Node_List::push(Node*) (1 samples, 0.03%)</title><rect x="1118.8" y="3491.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1121.8" y="3502.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post_work(Node*, bool) (18 samples, 0.46%)</title><rect x="1119.1" y="3491.0" width="5.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1122.1" y="3502.0"></text>
</g>
<g>
<title>CallStaticJavaNode::uncommon_trap_request() const (1 samples, 0.03%)</title><rect x="1121.5" y="3475.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1124.5" y="3486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1121.8" y="3475.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1124.8" y="3486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_late_ctrl(Node*, Node*) (7 samples, 0.18%)</title><rect x="1122.1" y="3475.0" width="2.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.1" y="3486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::compute_lca_of_uses(Node*, Node*, bool) (3 samples, 0.08%)</title><rect x="1122.1" y="3459.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1125.1" y="3470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (2 samples, 0.05%)</title><rect x="1122.4" y="3443.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1125.4" y="3454.0"></text>
</g>
<g>
<title>PhaseIdealLoop::dom_lca_for_get_late_ctrl_internal(Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1123.0" y="3459.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1126.0" y="3470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (3 samples, 0.08%)</title><rect x="1123.3" y="3459.0" width="0.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1126.3" y="3470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::is_dominator(Node*, Node*) (1 samples, 0.03%)</title><rect x="1124.2" y="3475.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1127.2" y="3486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.05%)</title><rect x="1124.5" y="3507.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1127.5" y="3518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;) (6 samples, 0.15%)</title><rect x="1125.1" y="3507.0" width="1.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1128.1" y="3518.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.03%)</title><rect x="1125.1" y="3491.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1128.1" y="3502.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_post(Node*) (1 samples, 0.03%)</title><rect x="1125.4" y="3491.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1128.4" y="3502.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (4 samples, 0.10%)</title><rect x="1125.7" y="3491.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1128.7" y="3502.0"></text>
</g>
<g>
<title>ConstraintCastNode::dominating_cast(PhaseGVN*, PhaseTransform*) const (1 samples, 0.03%)</title><rect x="1126.0" y="3475.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1129.0" y="3486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (1 samples, 0.03%)</title><rect x="1126.3" y="3475.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1129.3" y="3486.0"></text>
</g>
<g>
<title>PhaseIdealLoop::get_ctrl(Node*) (1 samples, 0.03%)</title><rect x="1126.3" y="3459.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1129.3" y="3470.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_thru_phi(Node*, Node*, int) (1 samples, 0.03%)</title><rect x="1126.6" y="3475.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1129.6" y="3486.0"></text>
</g>
<g>
<title>NodeHash::hash_find(Node const*) (1 samples, 0.03%)</title><rect x="1126.6" y="3459.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1129.6" y="3470.0"></text>
</g>
<g>
<title>PhiNode::pinned() const (1 samples, 0.03%)</title><rect x="1126.9" y="3507.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1129.9" y="3518.0"></text>
</g>
<g>
<title>ProjNode::pinned() const (2 samples, 0.05%)</title><rect x="1127.2" y="3507.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1130.2" y="3518.0"></text>
</g>
<g>
<title>StartNode::pinned() const (1 samples, 0.03%)</title><rect x="1127.8" y="3507.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1130.8" y="3518.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.08%)</title><rect x="1128.1" y="3523.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1131.1" y="3534.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.08%)</title><rect x="1128.1" y="3507.0" width="0.9" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.1" y="3518.0"></text>
</g>
<g>
<title>CallStaticJavaNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1128.1" y="3491.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1131.1" y="3502.0"></text>
</g>
<g>
<title>Node::remove_dead_region(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1128.1" y="3475.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1131.1" y="3486.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (2 samples, 0.05%)</title><rect x="1128.4" y="3491.0" width="0.6" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1131.4" y="3502.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (2 samples, 0.05%)</title><rect x="1128.4" y="3475.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1131.4" y="3486.0"></text>
</g>
<g>
<title>Node::replace_edge(Node*, Node*) (1 samples, 0.03%)</title><rect x="1128.7" y="3459.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1131.7" y="3470.0"></text>
</g>
<g>
<title>PhaseIterGVN::PhaseIterGVN(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1129.0" y="3539.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1132.0" y="3550.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (13 samples, 0.33%)</title><rect x="1129.3" y="3539.0" width="3.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.3" y="3550.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (13 samples, 0.33%)</title><rect x="1129.3" y="3523.0" width="3.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1132.3" y="3534.0"></text>
</g>
<g>
<title>ConvI2LNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1129.9" y="3507.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1132.9" y="3518.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1129.9" y="3491.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1132.9" y="3502.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1129.9" y="3475.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1132.9" y="3486.0"></text>
</g>
<g>
<title>IfNode::Ideal(PhaseGVN*, bool) (2 samples, 0.05%)</title><rect x="1130.2" y="3507.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.2" y="3518.0"></text>
</g>
<g>
<title>idealize_test(PhaseGVN*, IfNode*) (2 samples, 0.05%)</title><rect x="1130.2" y="3491.0" width="0.6" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1133.2" y="3502.0"></text>
</g>
<g>
<title>PhaseIterGVN::register_new_node_with_optimizer(Node*, Node*) (1 samples, 0.03%)</title><rect x="1130.2" y="3475.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1133.2" y="3486.0"></text>
</g>
<g>
<title>ProjNode::bottom_type() const (1 samples, 0.03%)</title><rect x="1130.2" y="3459.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1133.2" y="3470.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1130.5" y="3475.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1133.5" y="3486.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1130.5" y="3459.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1133.5" y="3470.0"></text>
</g>
<g>
<title>Unique_Node_List::remove(Node*) (1 samples, 0.03%)</title><rect x="1130.5" y="3443.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1133.5" y="3454.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1130.8" y="3507.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1133.8" y="3518.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.03%)</title><rect x="1130.8" y="3491.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1133.8" y="3502.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1130.8" y="3475.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1133.8" y="3486.0"></text>
</g>
<g>
<title>TypeOopPtr::TypeOopPtr(Type::TYPES, TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) (1 samples, 0.03%)</title><rect x="1130.8" y="3459.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1133.8" y="3470.0"></text>
</g>
<g>
<title>ciInstanceKlass::get_field_by_offset(int, bool) (1 samples, 0.03%)</title><rect x="1130.8" y="3443.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1133.8" y="3454.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (2 samples, 0.05%)</title><rect x="1131.1" y="3507.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1134.1" y="3518.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.03%)</title><rect x="1131.7" y="3507.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1134.7" y="3518.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1132.0" y="3507.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1135.0" y="3518.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.03%)</title><rect x="1132.0" y="3491.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1135.0" y="3502.0"></text>
</g>
<g>
<title>PhiNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1132.3" y="3507.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1135.3" y="3518.0"></text>
</g>
<g>
<title>PhiNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1132.6" y="3507.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1135.6" y="3518.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1132.9" y="3507.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1135.9" y="3518.0"></text>
</g>
<g>
<title>PhiNode::is_unsafe_data_reference(Node*) const [clone .part.0] (1 samples, 0.03%)</title><rect x="1132.9" y="3491.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1135.9" y="3502.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_macro_nodes() (9 samples, 0.23%)</title><rect x="1133.2" y="3539.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1136.2" y="3550.0"></text>
</g>
<g>
<title>MergeMemNode::memory_at(unsigned int) const (1 samples, 0.03%)</title><rect x="1133.2" y="3523.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1136.2" y="3534.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (3 samples, 0.08%)</title><rect x="1133.5" y="3523.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1136.5" y="3534.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (3 samples, 0.08%)</title><rect x="1133.5" y="3507.0" width="0.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1136.5" y="3518.0"></text>
</g>
<g>
<title>NodeHash::hash_find_insert(Node*) (1 samples, 0.03%)</title><rect x="1133.5" y="3491.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1136.5" y="3502.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1133.8" y="3491.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1136.8" y="3502.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1133.8" y="3475.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1136.8" y="3486.0"></text>
</g>
<g>
<title>LShiftLNode::Opcode() const (1 samples, 0.03%)</title><rect x="1133.8" y="3459.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1136.8" y="3470.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1134.1" y="3491.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.1" y="3502.0"></text>
</g>
<g>
<title>PhaseMacroExpand::eliminate_macro_nodes() (1 samples, 0.03%)</title><rect x="1134.4" y="3523.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1137.4" y="3534.0"></text>
</g>
<g>
<title>PhaseMacroExpand::mark_eliminated_locking_nodes(AbstractLockNode*) (1 samples, 0.03%)</title><rect x="1134.4" y="3507.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1137.4" y="3518.0"></text>
</g>
<g>
<title>LockNode::is_nested_lock_region(Compile*) (1 samples, 0.03%)</title><rect x="1134.4" y="3491.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1137.4" y="3502.0"></text>
</g>
<g>
<title>Node::uncast(bool) const (1 samples, 0.03%)</title><rect x="1134.4" y="3475.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1137.4" y="3486.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate(AllocateNode*) (1 samples, 0.03%)</title><rect x="1134.7" y="3523.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1137.7" y="3534.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_Type() (1 samples, 0.03%)</title><rect x="1134.7" y="3507.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1137.7" y="3518.0"></text>
</g>
<g>
<title>TypeTuple::make(unsigned int, Type const**) (1 samples, 0.03%)</title><rect x="1134.7" y="3491.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1137.7" y="3502.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1134.7" y="3475.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1137.7" y="3486.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_allocate_common(AllocateNode*, Node*, TypeFunc const*, unsigned char*) (2 samples, 0.05%)</title><rect x="1135.0" y="3523.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.0" y="3534.0"></text>
</g>
<g>
<title>BarrierSetC2::obj_allocate(PhaseMacroExpand*, Node*, Node*, Node*, Node*, Node*&amp;, Node*&amp;, Node*&amp;, Node*&amp;, long) const (1 samples, 0.03%)</title><rect x="1135.0" y="3507.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1138.0" y="3518.0"></text>
</g>
<g>
<title>PhaseMacroExpand::set_eden_pointers(Node*&amp;, Node*&amp;) (1 samples, 0.03%)</title><rect x="1135.0" y="3491.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1138.0" y="3502.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.03%)</title><rect x="1135.0" y="3475.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.0" y="3486.0"></text>
</g>
<g>
<title>TypeLong::make(long) (1 samples, 0.03%)</title><rect x="1135.0" y="3459.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1138.0" y="3470.0"></text>
</g>
<g>
<title>PhaseMacroExpand::initialize_object(AllocateNode*, Node*, Node*, Node*, Node*, Node*, Node*) (1 samples, 0.03%)</title><rect x="1135.3" y="3507.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1138.3" y="3518.0"></text>
</g>
<g>
<title>PhaseMacroExpand::make_store(Node*, Node*, Node*, int, Node*, BasicType) (1 samples, 0.03%)</title><rect x="1135.3" y="3491.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1138.3" y="3502.0"></text>
</g>
<g>
<title>StoreNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Node*, BasicType, MemNode::MemOrd) (1 samples, 0.03%)</title><rect x="1135.3" y="3475.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1138.3" y="3486.0"></text>
</g>
<g>
<title>PhaseMacroExpand::expand_subtypecheck_node(SubTypeCheckNode*) (1 samples, 0.03%)</title><rect x="1135.6" y="3523.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.6" y="3534.0"></text>
</g>
<g>
<title>PhaseIterGVN::subsume_node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1135.6" y="3507.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1138.6" y="3518.0"></text>
</g>
<g>
<title>PhaseIterGVN::remove_globally_dead_node(Node*) (1 samples, 0.03%)</title><rect x="1135.6" y="3491.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1138.6" y="3502.0"></text>
</g>
<g>
<title>PhaseRenumberLive::PhaseRenumberLive(PhaseGVN*, Unique_Node_List*, Unique_Node_List*, Phase::PhaseNumber) (2 samples, 0.05%)</title><rect x="1135.9" y="3539.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1138.9" y="3550.0"></text>
</g>
<g>
<title>PhaseRenumberLive::update_embedded_ids(Node*) (1 samples, 0.03%)</title><rect x="1136.2" y="3523.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1139.2" y="3534.0"></text>
</g>
<g>
<title>ProjNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1136.5" y="3539.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1139.5" y="3550.0"></text>
</g>
<g>
<title>Compile::inline_incrementally(PhaseIterGVN&amp;) (1 samples, 0.03%)</title><rect x="1136.8" y="3555.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1139.8" y="3566.0"></text>
</g>
<g>
<title>Compile::inline_string_calls(bool) (2 samples, 0.05%)</title><rect x="1137.1" y="3555.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.1" y="3566.0"></text>
</g>
<g>
<title>CallGenerator::do_late_inline_helper() (2 samples, 0.05%)</title><rect x="1137.1" y="3539.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.1" y="3550.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1137.1" y="3523.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.1" y="3534.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1137.1" y="3507.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1140.1" y="3518.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1137.1" y="3491.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.1" y="3502.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1137.1" y="3475.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.1" y="3486.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1137.1" y="3459.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="3470.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1137.1" y="3443.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1140.1" y="3454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1137.1" y="3427.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.1" y="3438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1137.1" y="3411.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.1" y="3422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1137.1" y="3395.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.1" y="3406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1137.1" y="3379.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.1" y="3390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1137.1" y="3363.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1140.1" y="3374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1137.1" y="3347.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1140.1" y="3358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1137.1" y="3331.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.1" y="3342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1137.1" y="3315.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.1" y="3326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1137.1" y="3299.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.1" y="3310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1137.1" y="3283.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.1" y="3294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1137.1" y="3267.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.1" y="3278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1137.1" y="3251.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1140.1" y="3262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1137.1" y="3235.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1140.1" y="3246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1137.1" y="3219.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1140.1" y="3230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1137.1" y="3203.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1140.1" y="3214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1137.1" y="3187.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1140.1" y="3198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1137.1" y="3171.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1140.1" y="3182.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.0] (1 samples, 0.03%)</title><rect x="1137.1" y="3155.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1140.1" y="3166.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.03%)</title><rect x="1137.1" y="3139.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.1" y="3150.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1137.1" y="3123.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.1" y="3134.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1137.1" y="3107.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1140.1" y="3118.0"></text>
</g>
<g>
<title>ConstraintCastNode::dominating_cast(PhaseGVN*, PhaseTransform*) const (1 samples, 0.03%)</title><rect x="1137.1" y="3091.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1140.1" y="3102.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1137.4" y="3347.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.4" y="3358.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.03%)</title><rect x="1137.4" y="3331.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1140.4" y="3342.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1137.4" y="3315.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1140.4" y="3326.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.03%)</title><rect x="1137.4" y="3299.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1140.4" y="3310.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.03%)</title><rect x="1137.4" y="3283.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1140.4" y="3294.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.03%)</title><rect x="1137.4" y="3267.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1140.4" y="3278.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.03%)</title><rect x="1137.4" y="3251.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1140.4" y="3262.0"></text>
</g>
<g>
<title>Compile::remove_useless_nodes(Unique_Node_List&amp;) (1 samples, 0.03%)</title><rect x="1137.7" y="3555.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1140.7" y="3566.0"></text>
</g>
<g>
<title>JVMState::JVMState(int) (1 samples, 0.03%)</title><rect x="1138.0" y="3555.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1141.0" y="3566.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (42 samples, 1.07%)</title><rect x="1138.3" y="3555.0" width="12.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1141.3" y="3566.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (42 samples, 1.07%)</title><rect x="1138.3" y="3539.0" width="12.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.3" y="3550.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (42 samples, 1.07%)</title><rect x="1138.3" y="3523.0" width="12.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1141.3" y="3534.0"></text>
</g>
<g>
<title>Parse::do_one_block() (42 samples, 1.07%)</title><rect x="1138.3" y="3507.0" width="12.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.3" y="3518.0"></text>
</g>
<g>
<title>Parse::do_exceptions() (1 samples, 0.03%)</title><rect x="1138.3" y="3491.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1141.3" y="3502.0"></text>
</g>
<g>
<title>Parse::catch_inline_exceptions(SafePointNode*) (1 samples, 0.03%)</title><rect x="1138.3" y="3475.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1141.3" y="3486.0"></text>
</g>
<g>
<title>LoadKlassNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, TypeKlassPtr const*) (1 samples, 0.03%)</title><rect x="1138.3" y="3459.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1141.3" y="3470.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1138.3" y="3443.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1141.3" y="3454.0"></text>
</g>
<g>
<title>TypeNarrowKlass::make(TypePtr const*) (1 samples, 0.03%)</title><rect x="1138.3" y="3427.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1141.3" y="3438.0"></text>
</g>
<g>
<title>Type::uhash(Type const*) (1 samples, 0.03%)</title><rect x="1138.3" y="3411.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1141.3" y="3422.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (40 samples, 1.02%)</title><rect x="1138.6" y="3491.0" width="12.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1141.6" y="3502.0"></text>
</g>
<g>
<title>Parse::do_call() (38 samples, 0.97%)</title><rect x="1138.6" y="3475.0" width="11.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1141.6" y="3486.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool) (4 samples, 0.10%)</title><rect x="1138.6" y="3459.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1141.6" y="3470.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (4 samples, 0.10%)</title><rect x="1138.6" y="3443.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1141.6" y="3454.0"></text>
</g>
<g>
<title>InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (2 samples, 0.05%)</title><rect x="1138.6" y="3427.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1141.6" y="3438.0"></text>
</g>
<g>
<title>ciMethod::has_unloaded_classes_in_signature() (1 samples, 0.03%)</title><rect x="1138.6" y="3411.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1141.6" y="3422.0"></text>
</g>
<g>
<title>ciMethod::is_accessor() const (1 samples, 0.03%)</title><rect x="1138.9" y="3411.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1141.9" y="3422.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (2 samples, 0.05%)</title><rect x="1139.2" y="3427.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.2" y="3438.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (2 samples, 0.05%)</title><rect x="1139.2" y="3411.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.2" y="3422.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (2 samples, 0.05%)</title><rect x="1139.2" y="3395.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.2" y="3406.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.05%)</title><rect x="1139.2" y="3379.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.2" y="3390.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (2 samples, 0.05%)</title><rect x="1139.2" y="3363.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1142.2" y="3374.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (2 samples, 0.05%)</title><rect x="1139.2" y="3347.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.2" y="3358.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (2 samples, 0.05%)</title><rect x="1139.2" y="3331.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1142.2" y="3342.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (2 samples, 0.05%)</title><rect x="1139.2" y="3315.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1142.2" y="3326.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1139.5" y="3299.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1142.5" y="3310.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1139.5" y="3283.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.5" y="3294.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1139.5" y="3267.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1142.5" y="3278.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1139.5" y="3251.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.5" y="3262.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.03%)</title><rect x="1139.5" y="3235.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1142.5" y="3246.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1139.5" y="3219.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1142.5" y="3230.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1139.5" y="3203.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1142.5" y="3214.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1139.5" y="3187.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1142.5" y="3198.0"></text>
</g>
<g>
<title>ciObjArrayKlass::ciObjArrayKlass(Klass*) (1 samples, 0.03%)</title><rect x="1139.5" y="3171.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1142.5" y="3182.0"></text>
</g>
<g>
<title>ciArrayKlass::ciArrayKlass(Klass*) (1 samples, 0.03%)</title><rect x="1139.5" y="3155.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1142.5" y="3166.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(Klass*) (1 samples, 0.03%)</title><rect x="1139.5" y="3139.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.5" y="3150.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.03%)</title><rect x="1139.5" y="3123.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.5" y="3134.0"></text>
</g>
<g>
<title>LateInlineVirtualCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1139.8" y="3459.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1142.8" y="3470.0"></text>
</g>
<g>
<title>VirtualCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1139.8" y="3443.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1142.8" y="3454.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1139.8" y="3427.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.8" y="3438.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.03%)</title><rect x="1139.8" y="3411.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1142.8" y="3422.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1139.8" y="3395.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1142.8" y="3406.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1139.8" y="3379.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1142.8" y="3390.0"></text>
</g>
<g>
<title>Type::cmp(Type const*, Type const*) (1 samples, 0.03%)</title><rect x="1139.8" y="3363.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1142.8" y="3374.0"></text>
</g>
<g>
<title>TypeInstPtr::eq(Type const*) const (1 samples, 0.03%)</title><rect x="1139.8" y="3347.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1142.8" y="3358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (24 samples, 0.61%)</title><rect x="1140.1" y="3459.0" width="7.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1143.1" y="3470.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (24 samples, 0.61%)</title><rect x="1140.1" y="3443.0" width="7.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.1" y="3454.0"></text>
</g>
<g>
<title>Parse::create_entry_map() (1 samples, 0.03%)</title><rect x="1140.1" y="3427.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1143.1" y="3438.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.0] (1 samples, 0.03%)</title><rect x="1140.1" y="3411.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.1" y="3422.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) [clone .part.0] (1 samples, 0.03%)</title><rect x="1140.1" y="3395.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1143.1" y="3406.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="1140.1" y="3379.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.1" y="3390.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1140.1" y="3363.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.1" y="3374.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.03%)</title><rect x="1140.1" y="3347.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.1" y="3358.0"></text>
</g>
<g>
<title>BitMap::set_union(BitMap const&amp;) (1 samples, 0.03%)</title><rect x="1140.1" y="3331.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.1" y="3342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (23 samples, 0.59%)</title><rect x="1140.4" y="3427.0" width="6.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.4" y="3438.0"></text>
</g>
<g>
<title>Parse::do_one_block() (23 samples, 0.59%)</title><rect x="1140.4" y="3411.0" width="6.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.4" y="3422.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (22 samples, 0.56%)</title><rect x="1140.4" y="3395.0" width="6.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1143.4" y="3406.0"></text>
</g>
<g>
<title>Parse::do_call() (21 samples, 0.53%)</title><rect x="1140.4" y="3379.0" width="6.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.4" y="3390.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool) (1 samples, 0.03%)</title><rect x="1140.4" y="3363.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1143.4" y="3374.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1140.4" y="3347.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.4" y="3358.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1140.4" y="3331.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1143.4" y="3342.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1140.4" y="3315.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1143.4" y="3326.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1140.4" y="3299.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1143.4" y="3310.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1140.4" y="3283.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.4" y="3294.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1140.4" y="3267.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1143.4" y="3278.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1140.4" y="3251.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1143.4" y="3262.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="1140.4" y="3235.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.4" y="3246.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1140.4" y="3219.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1143.4" y="3230.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1140.4" y="3203.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1143.4" y="3214.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1140.4" y="3187.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1143.4" y="3198.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1140.4" y="3171.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1143.4" y="3182.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1140.4" y="3155.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1143.4" y="3166.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.03%)</title><rect x="1140.4" y="3139.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1143.4" y="3150.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1140.4" y="3123.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1143.4" y="3134.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="1140.4" y="3107.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1143.4" y="3118.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="1140.4" y="3091.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.4" y="3102.0"></text>
</g>
<g>
<title>java_lang_ClassLoader::non_reflection_class_loader(oopDesc*) (1 samples, 0.03%)</title><rect x="1140.4" y="3075.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.4" y="3086.0"></text>
</g>
<g>
<title>GraphKit::gen_checkcast(Node*, Node*, Node**) (1 samples, 0.03%)</title><rect x="1140.7" y="3363.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1143.7" y="3374.0"></text>
</g>
<g>
<title>GraphKit::record_profile_for_speculation(Node*, ciKlass*, ProfilePtrKind) (1 samples, 0.03%)</title><rect x="1140.7" y="3347.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1143.7" y="3358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (18 samples, 0.46%)</title><rect x="1141.0" y="3363.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1144.0" y="3374.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (18 samples, 0.46%)</title><rect x="1141.0" y="3347.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.0" y="3358.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (18 samples, 0.46%)</title><rect x="1141.0" y="3331.0" width="5.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.0" y="3342.0"></text>
</g>
<g>
<title>Parse::do_one_block() (18 samples, 0.46%)</title><rect x="1141.0" y="3315.0" width="5.4" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1144.0" y="3326.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (18 samples, 0.46%)</title><rect x="1141.0" y="3299.0" width="5.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.0" y="3310.0"></text>
</g>
<g>
<title>Parse::do_call() (13 samples, 0.33%)</title><rect x="1141.0" y="3283.0" width="3.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.0" y="3294.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (13 samples, 0.33%)</title><rect x="1141.0" y="3267.0" width="3.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.0" y="3278.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (13 samples, 0.33%)</title><rect x="1141.0" y="3251.0" width="3.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.0" y="3262.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (12 samples, 0.31%)</title><rect x="1141.0" y="3235.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.0" y="3246.0"></text>
</g>
<g>
<title>Parse::do_one_block() (12 samples, 0.31%)</title><rect x="1141.0" y="3219.0" width="3.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.0" y="3230.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (12 samples, 0.31%)</title><rect x="1141.0" y="3203.0" width="3.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.0" y="3214.0"></text>
</g>
<g>
<title>Parse::do_call() (11 samples, 0.28%)</title><rect x="1141.0" y="3187.0" width="3.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.0" y="3198.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool) (1 samples, 0.03%)</title><rect x="1141.0" y="3171.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.0" y="3182.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1141.0" y="3155.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.0" y="3166.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1141.0" y="3139.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.0" y="3150.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1141.0" y="3123.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.0" y="3134.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1141.0" y="3107.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.0" y="3118.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1141.0" y="3091.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1144.0" y="3102.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1141.0" y="3075.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1144.0" y="3086.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="1141.3" y="3171.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.3" y="3182.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1141.3" y="3155.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.3" y="3166.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.03%)</title><rect x="1141.3" y="3139.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.3" y="3150.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::get_liveness_at(ciMethod*, int) (1 samples, 0.03%)</title><rect x="1141.3" y="3123.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.3" y="3134.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (9 samples, 0.23%)</title><rect x="1141.6" y="3171.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1144.6" y="3182.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (9 samples, 0.23%)</title><rect x="1141.6" y="3155.0" width="2.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.6" y="3166.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (7 samples, 0.18%)</title><rect x="1141.6" y="3139.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.6" y="3150.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.18%)</title><rect x="1141.6" y="3123.0" width="2.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.6" y="3134.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.18%)</title><rect x="1141.6" y="3107.0" width="2.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.6" y="3118.0"></text>
</g>
<g>
<title>Parse::do_call() (6 samples, 0.15%)</title><rect x="1141.6" y="3091.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.6" y="3102.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool) (1 samples, 0.03%)</title><rect x="1141.6" y="3075.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1144.6" y="3086.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool) (1 samples, 0.03%)</title><rect x="1141.6" y="3059.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.6" y="3070.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1141.6" y="3043.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.6" y="3054.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1141.6" y="3027.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1144.6" y="3038.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1141.6" y="3011.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.6" y="3022.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1141.6" y="2995.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1144.6" y="3006.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1141.6" y="2979.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1144.6" y="2990.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1141.6" y="2963.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.6" y="2974.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1141.6" y="2947.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.6" y="2958.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_invoke(ciBytecodeStream*, bool) (1 samples, 0.03%)</title><rect x="1141.6" y="2931.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1144.6" y="2942.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1141.6" y="2915.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.6" y="2926.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1141.6" y="2899.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.6" y="2910.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1141.6" y="2883.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.6" y="2894.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1141.6" y="2867.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1144.6" y="2878.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1141.6" y="2851.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.6" y="2862.0"></text>
</g>
<g>
<title>Symbol::increment_refcount() (1 samples, 0.03%)</title><rect x="1141.6" y="2835.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.6" y="2846.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.10%)</title><rect x="1141.9" y="3075.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1144.9" y="3086.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.10%)</title><rect x="1141.9" y="3059.0" width="1.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1144.9" y="3070.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.10%)</title><rect x="1141.9" y="3043.0" width="1.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.9" y="3054.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.10%)</title><rect x="1141.9" y="3027.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.9" y="3038.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.10%)</title><rect x="1141.9" y="3011.0" width="1.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.9" y="3022.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.08%)</title><rect x="1141.9" y="2995.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1144.9" y="3006.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (3 samples, 0.08%)</title><rect x="1141.9" y="2979.0" width="0.9" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1144.9" y="2990.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (3 samples, 0.08%)</title><rect x="1141.9" y="2963.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1144.9" y="2974.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (3 samples, 0.08%)</title><rect x="1141.9" y="2947.0" width="0.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1144.9" y="2958.0"></text>
</g>
<g>
<title>Parse::do_one_block() (3 samples, 0.08%)</title><rect x="1141.9" y="2931.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.9" y="2942.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (3 samples, 0.08%)</title><rect x="1141.9" y="2915.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1144.9" y="2926.0"></text>
</g>
<g>
<title>Parse::array_load(BasicType) (1 samples, 0.03%)</title><rect x="1141.9" y="2899.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1144.9" y="2910.0"></text>
</g>
<g>
<title>Parse::array_addressing(BasicType, int, Type const*&amp;) (1 samples, 0.03%)</title><rect x="1141.9" y="2883.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1144.9" y="2894.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.03%)</title><rect x="1141.9" y="2867.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.9" y="2878.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1141.9" y="2851.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1144.9" y="2862.0"></text>
</g>
<g>
<title>MergeMemNode::make(Node*) (1 samples, 0.03%)</title><rect x="1141.9" y="2835.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1144.9" y="2846.0"></text>
</g>
<g>
<title>MergeMemNode::MergeMemNode(Node*) (1 samples, 0.03%)</title><rect x="1141.9" y="2819.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1144.9" y="2830.0"></text>
</g>
<g>
<title>MergeMemNode::iteration_setup(MergeMemNode const*) (1 samples, 0.03%)</title><rect x="1141.9" y="2803.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1144.9" y="2814.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.03%)</title><rect x="1141.9" y="2787.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1144.9" y="2798.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1141.9" y="2771.0" width="0.3" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1144.9" y="2782.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1142.2" y="2899.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1145.2" y="2910.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1142.2" y="2883.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.2" y="2894.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1142.2" y="2867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.2" y="2878.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1142.2" y="2851.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1145.2" y="2862.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1142.2" y="2835.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1145.2" y="2846.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1142.2" y="2819.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.2" y="2830.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1142.2" y="2803.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.2" y="2814.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1142.2" y="2787.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1145.2" y="2798.0"></text>
</g>
<g>
<title>CallStaticJavaNode::CallStaticJavaNode(Compile*, TypeFunc const*, unsigned char*, ciMethod*, int) (1 samples, 0.03%)</title><rect x="1142.2" y="2771.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1145.2" y="2782.0"></text>
</g>
<g>
<title>Node::Node(unsigned int) (1 samples, 0.03%)</title><rect x="1142.2" y="2755.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1145.2" y="2766.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1142.5" y="2899.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1145.5" y="2910.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1142.5" y="2883.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1145.5" y="2894.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.03%)</title><rect x="1142.5" y="2867.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.5" y="2878.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1142.5" y="2851.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.5" y="2862.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1142.5" y="2835.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.5" y="2846.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.03%)</title><rect x="1142.5" y="2819.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.5" y="2830.0"></text>
</g>
<g>
<title>IdealKit::load(Node*, Node*, Type const*, BasicType, int, bool) (1 samples, 0.03%)</title><rect x="1142.5" y="2803.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1145.5" y="2814.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, unsigned char) (1 samples, 0.03%)</title><rect x="1142.5" y="2787.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1145.5" y="2798.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1142.5" y="2771.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1145.5" y="2782.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1142.5" y="2755.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.5" y="2766.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1142.5" y="2739.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.5" y="2750.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1142.8" y="2995.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1145.8" y="3006.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1142.8" y="2979.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1145.8" y="2990.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.03%)</title><rect x="1142.8" y="2963.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.8" y="2974.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1142.8" y="2947.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1145.8" y="2958.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1142.8" y="2931.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.8" y="2942.0"></text>
</g>
<g>
<title>G1BarrierSetC2::post_barrier(GraphKit*, Node*, Node*, Node*, Node*, unsigned int, Node*, BasicType, bool) const (1 samples, 0.03%)</title><rect x="1142.8" y="2915.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1145.8" y="2926.0"></text>
</g>
<g>
<title>PhaseTransform::longcon(long) (1 samples, 0.03%)</title><rect x="1142.8" y="2899.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.8" y="2910.0"></text>
</g>
<g>
<title>TypeLong::make(long) (1 samples, 0.03%)</title><rect x="1142.8" y="2883.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1145.8" y="2894.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1142.8" y="2867.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1145.8" y="2878.0"></text>
</g>
<g>
<title>Dict::doubhash() (1 samples, 0.03%)</title><rect x="1142.8" y="2851.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1145.8" y="2862.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1143.1" y="3075.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1146.1" y="3086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1143.1" y="3059.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.1" y="3070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1143.1" y="3043.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.1" y="3054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1143.1" y="3027.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.1" y="3038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1143.1" y="3011.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1146.1" y="3022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1143.1" y="2995.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.1" y="3006.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1143.1" y="2979.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.1" y="2990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1143.1" y="2963.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.1" y="2974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1143.1" y="2947.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.1" y="2958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1143.1" y="2931.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="2942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1143.1" y="2915.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.1" y="2926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1143.1" y="2899.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.1" y="2910.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1143.1" y="2883.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.1" y="2894.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1143.1" y="2867.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.1" y="2878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1143.1" y="2851.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1146.1" y="2862.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1143.1" y="2835.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1146.1" y="2846.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1143.1" y="2819.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.1" y="2830.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1143.1" y="2803.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.1" y="2814.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1143.1" y="2787.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1146.1" y="2798.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1143.1" y="2771.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1146.1" y="2782.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1143.1" y="2755.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.1" y="2766.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1143.1" y="2739.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.1" y="2750.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1143.1" y="2723.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.1" y="2734.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1143.1" y="2707.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1146.1" y="2718.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1143.1" y="2691.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1146.1" y="2702.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1143.1" y="2675.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1146.1" y="2686.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1143.1" y="2659.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1146.1" y="2670.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1143.1" y="2643.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="2654.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1143.1" y="2627.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.1" y="2638.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1143.1" y="2611.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.1" y="2622.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1143.1" y="2595.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.1" y="2606.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1143.1" y="2579.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1146.1" y="2590.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1143.1" y="2563.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1146.1" y="2574.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1143.1" y="2547.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1146.1" y="2558.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1143.1" y="2531.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1146.1" y="2542.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1143.1" y="2515.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.1" y="2526.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1143.1" y="2499.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1146.1" y="2510.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1143.1" y="2483.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1146.1" y="2494.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1143.1" y="2467.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1146.1" y="2478.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.03%)</title><rect x="1143.1" y="2451.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1146.1" y="2462.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1143.1" y="2435.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.1" y="2446.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1143.1" y="2419.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1146.1" y="2430.0"></text>
</g>
<g>
<title>TypeOopPtr::filter_helper(Type const*, bool) const (1 samples, 0.03%)</title><rect x="1143.1" y="2403.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1146.1" y="2414.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1143.1" y="2387.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1146.1" y="2398.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.03%)</title><rect x="1143.1" y="2371.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="2382.0"></text>
</g>
<g>
<title>TypeInstPtr::remove_speculative() const (1 samples, 0.03%)</title><rect x="1143.1" y="2355.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1146.1" y="2366.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1143.4" y="3091.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.4" y="3102.0"></text>
</g>
<g>
<title>Parse::do_exits() (2 samples, 0.05%)</title><rect x="1143.7" y="3139.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1146.7" y="3150.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1143.7" y="3123.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1146.7" y="3134.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1143.7" y="3107.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1146.7" y="3118.0"></text>
</g>
<g>
<title>PhaseValues::saturate(Type const*, Type const*, Type const*) const (1 samples, 0.03%)</title><rect x="1144.0" y="3123.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1147.0" y="3134.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1144.3" y="3187.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.3" y="3198.0"></text>
</g>
<g>
<title>Parse::do_put_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1144.3" y="3171.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1147.3" y="3182.0"></text>
</g>
<g>
<title>GraphKit::access_store_at(Node*, Node*, TypePtr const*, Node*, Type const*, BasicType, unsigned long) (1 samples, 0.03%)</title><rect x="1144.3" y="3155.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1147.3" y="3166.0"></text>
</g>
<g>
<title>BarrierSetC2::store_at(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1144.3" y="3139.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1147.3" y="3150.0"></text>
</g>
<g>
<title>ModRefBarrierSetC2::store_at_resolved(C2Access&amp;, C2AccessValue&amp;) const (1 samples, 0.03%)</title><rect x="1144.3" y="3123.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1147.3" y="3134.0"></text>
</g>
<g>
<title>G1BarrierSetC2::pre_barrier(GraphKit*, bool, Node*, Node*, Node*, unsigned int, Node*, TypeOopPtr const*, Node*, BasicType) const (1 samples, 0.03%)</title><rect x="1144.3" y="3107.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.3" y="3118.0"></text>
</g>
<g>
<title>IdealKit::if_then(Node*, BoolTest::mask, Node*, float, float, bool) (1 samples, 0.03%)</title><rect x="1144.3" y="3091.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1147.3" y="3102.0"></text>
</g>
<g>
<title>Node::Node(Node*, Node*) (1 samples, 0.03%)</title><rect x="1144.3" y="3075.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1147.3" y="3086.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="1144.3" y="3059.0" width="0.3" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="1147.3" y="3070.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.03%)</title><rect x="1144.6" y="3235.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.6" y="3246.0"></text>
</g>
<g>
<title>GraphKit::insert_mem_bar(int, Node*) (1 samples, 0.03%)</title><rect x="1144.6" y="3219.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1147.6" y="3230.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1144.6" y="3203.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1147.6" y="3214.0"></text>
</g>
<g>
<title>MergeMemNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1144.6" y="3187.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1147.6" y="3198.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (3 samples, 0.08%)</title><rect x="1144.9" y="3283.0" width="0.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1147.9" y="3294.0"></text>
</g>
<g>
<title>GraphKit::null_check_common(Node*, BasicType, bool, Node**, bool) [clone .part.0] (1 samples, 0.03%)</title><rect x="1144.9" y="3267.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1147.9" y="3278.0"></text>
</g>
<g>
<title>Type::meet_helper(Type const*, bool) const (1 samples, 0.03%)</title><rect x="1144.9" y="3251.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1147.9" y="3262.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1144.9" y="3235.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1147.9" y="3246.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (2 samples, 0.05%)</title><rect x="1145.2" y="3267.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1148.2" y="3278.0"></text>
</g>
<g>
<title>Compile::alias_type(ciField*) (1 samples, 0.03%)</title><rect x="1145.2" y="3251.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.2" y="3262.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1145.2" y="3235.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.2" y="3246.0"></text>
</g>
<g>
<title>TypeInstPtr::hash() const (1 samples, 0.03%)</title><rect x="1145.2" y="3219.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1148.2" y="3230.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.03%)</title><rect x="1145.5" y="3251.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1148.5" y="3262.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1145.5" y="3235.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.5" y="3246.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1145.5" y="3219.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1148.5" y="3230.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1145.5" y="3203.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1148.5" y="3214.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool, unsigned char) (1 samples, 0.03%)</title><rect x="1145.5" y="3187.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.5" y="3198.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, unsigned char) (1 samples, 0.03%)</title><rect x="1145.5" y="3171.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.5" y="3182.0"></text>
</g>
<g>
<title>TypeNarrowOop::make(TypePtr const*) (1 samples, 0.03%)</title><rect x="1145.5" y="3155.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1148.5" y="3166.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1145.5" y="3139.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1148.5" y="3150.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1145.8" y="3283.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.8" y="3294.0"></text>
</g>
<g>
<title>Parse::merge_common(Parse::Block*, int) (1 samples, 0.03%)</title><rect x="1145.8" y="3267.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1148.8" y="3278.0"></text>
</g>
<g>
<title>Parse::ensure_phi(int, bool) (1 samples, 0.03%)</title><rect x="1145.8" y="3251.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1148.8" y="3262.0"></text>
</g>
<g>
<title>Parse::Block::local_type_at(int) const (1 samples, 0.03%)</title><rect x="1145.8" y="3235.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1148.8" y="3246.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1145.8" y="3219.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1148.8" y="3230.0"></text>
</g>
<g>
<title>Type::hashcons() (1 samples, 0.03%)</title><rect x="1145.8" y="3203.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1148.8" y="3214.0"></text>
</g>
<g>
<title>Dict::Insert(void*, void*, bool) (1 samples, 0.03%)</title><rect x="1145.8" y="3187.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1148.8" y="3198.0"></text>
</g>
<g>
<title>Parse::do_ifnull(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1146.1" y="3283.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.1" y="3294.0"></text>
</g>
<g>
<title>Parse::adjust_map_after_if(BoolTest::mask, Node*, float, Parse::Block*, Parse::Block*) (1 samples, 0.03%)</title><rect x="1146.1" y="3267.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.1" y="3278.0"></text>
</g>
<g>
<title>Parse::sharpen_type_after_if(BoolTest::mask, Node*, Type const*, Node*, Type const*) (1 samples, 0.03%)</title><rect x="1146.1" y="3251.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.1" y="3262.0"></text>
</g>
<g>
<title>GraphKit::cast_not_null(Node*, bool) (1 samples, 0.03%)</title><rect x="1146.1" y="3235.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.1" y="3246.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1146.1" y="3219.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.1" y="3230.0"></text>
</g>
<g>
<title>ConstraintCastNode::Identity(PhaseGVN*) (1 samples, 0.03%)</title><rect x="1146.1" y="3203.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1149.1" y="3214.0"></text>
</g>
<g>
<title>TypePtr::xmeet(Type const*) const (1 samples, 0.03%)</title><rect x="1146.1" y="3187.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.1" y="3198.0"></text>
</g>
<g>
<title>TypeInstPtr::xmeet_helper(Type const*) const (1 samples, 0.03%)</title><rect x="1146.1" y="3171.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.1" y="3182.0"></text>
</g>
<g>
<title>TypeInstPtr::make(TypePtr::PTR, ciKlass*, bool, ciObject*, int, int, TypePtr const*, int) [clone .constprop.0] (1 samples, 0.03%)</title><rect x="1146.1" y="3155.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.1" y="3166.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1146.4" y="3363.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1149.4" y="3374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1146.4" y="3347.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.4" y="3358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1146.4" y="3331.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1149.4" y="3342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1146.4" y="3315.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.4" y="3326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1146.4" y="3299.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.4" y="3310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1146.4" y="3283.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.4" y="3294.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1146.4" y="3267.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.4" y="3278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1146.4" y="3251.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.4" y="3262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1146.4" y="3235.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.4" y="3246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1146.4" y="3219.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1149.4" y="3230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1146.4" y="3203.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1149.4" y="3214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1146.4" y="3187.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.4" y="3198.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1146.4" y="3171.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.4" y="3182.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1146.4" y="3155.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1149.4" y="3166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1146.4" y="3139.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.4" y="3150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1146.4" y="3123.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.4" y="3134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1146.4" y="3107.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.4" y="3118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1146.4" y="3091.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.4" y="3102.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1146.4" y="3075.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.4" y="3086.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool) (1 samples, 0.03%)</title><rect x="1146.4" y="3059.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.4" y="3070.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_call(JVMState*, ciMethod*, ciMethod*, bool) (1 samples, 0.03%)</title><rect x="1146.4" y="3043.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.4" y="3054.0"></text>
</g>
<g>
<title>CallGenerator::for_method_handle_inline(JVMState*, ciMethod*, ciMethod*, bool, bool&amp;) (1 samples, 0.03%)</title><rect x="1146.4" y="3027.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.4" y="3038.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool) (1 samples, 0.03%)</title><rect x="1146.4" y="3011.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1149.4" y="3022.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1146.4" y="2995.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.4" y="3006.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1146.4" y="2979.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.4" y="2990.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1146.4" y="2963.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.4" y="2974.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1146.4" y="2947.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1149.4" y="2958.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1146.4" y="2931.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.4" y="2942.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1146.4" y="2915.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.4" y="2926.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1146.4" y="2899.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.4" y="2910.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::do_getstatic(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1146.4" y="2883.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.4" y="2894.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="1146.4" y="2867.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.4" y="2878.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1146.4" y="2851.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1149.4" y="2862.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1146.4" y="2835.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.4" y="2846.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1146.4" y="2819.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1149.4" y="2830.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="1146.4" y="2803.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1149.4" y="2814.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="1146.4" y="2787.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1149.4" y="2798.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1146.7" y="3379.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1149.7" y="3390.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1146.7" y="3363.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1149.7" y="3374.0"></text>
</g>
<g>
<title>GraphKit::access_load_at(Node*, Node*, TypePtr const*, Type const*, BasicType, unsigned long) (1 samples, 0.03%)</title><rect x="1146.7" y="3347.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1149.7" y="3358.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1146.7" y="3331.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.7" y="3342.0"></text>
</g>
<g>
<title>G1BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1146.7" y="3315.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1149.7" y="3326.0"></text>
</g>
<g>
<title>BarrierSetC2::load_at_resolved(C2Access&amp;, Type const*) const (1 samples, 0.03%)</title><rect x="1146.7" y="3299.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1149.7" y="3310.0"></text>
</g>
<g>
<title>GraphKit::make_load(Node*, Node*, Type const*, BasicType, int, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, bool, unsigned char) (1 samples, 0.03%)</title><rect x="1146.7" y="3283.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1149.7" y="3294.0"></text>
</g>
<g>
<title>LoadNode::make(PhaseGVN&amp;, Node*, Node*, Node*, TypePtr const*, Type const*, BasicType, MemNode::MemOrd, LoadNode::ControlDependency, bool, bool, bool, unsigned char) (1 samples, 0.03%)</title><rect x="1146.7" y="3267.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1149.7" y="3278.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1146.7" y="3251.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1149.7" y="3262.0"></text>
</g>
<g>
<title>LoadNode::Ideal(PhaseGVN*, bool) (1 samples, 0.03%)</title><rect x="1146.7" y="3235.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1149.7" y="3246.0"></text>
</g>
<g>
<title>MemNode::find_previous_store(PhaseTransform*) (1 samples, 0.03%)</title><rect x="1146.7" y="3219.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.7" y="3230.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1146.7" y="3203.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1149.7" y="3214.0"></text>
</g>
<g>
<title>PhaseTransform::intcon(int) (1 samples, 0.03%)</title><rect x="1147.0" y="3395.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.0" y="3406.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (9 samples, 0.23%)</title><rect x="1147.3" y="3459.0" width="2.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1150.3" y="3470.0"></text>
</g>
<g>
<title>DirectCallGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1147.3" y="3443.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.3" y="3454.0"></text>
</g>
<g>
<title>GraphKit::set_results_for_java_call(CallJavaNode*, bool, bool) (1 samples, 0.03%)</title><rect x="1147.3" y="3427.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1150.3" y="3438.0"></text>
</g>
<g>
<title>GraphKit::make_slow_call_ex(Node*, ciInstanceKlass*, bool, bool) [clone .part.0] (1 samples, 0.03%)</title><rect x="1147.3" y="3411.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.3" y="3422.0"></text>
</g>
<g>
<title>Node::add_req(Node*) (1 samples, 0.03%)</title><rect x="1147.3" y="3395.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1150.3" y="3406.0"></text>
</g>
<g>
<title>GraphKit::type_check_receiver(Node*, ciKlass*, float, Node**) (1 samples, 0.03%)</title><rect x="1147.6" y="3443.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.6" y="3454.0"></text>
</g>
<g>
<title>TypeKlassPtr::as_instance_type() const (1 samples, 0.03%)</title><rect x="1147.6" y="3427.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.6" y="3438.0"></text>
</g>
<g>
<title>TypeOopPtr::make_from_klass_common(ciKlass*, bool, bool) (1 samples, 0.03%)</title><rect x="1147.6" y="3411.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1150.6" y="3422.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (5 samples, 0.13%)</title><rect x="1147.9" y="3443.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.9" y="3454.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (5 samples, 0.13%)</title><rect x="1147.9" y="3427.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.9" y="3438.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.10%)</title><rect x="1147.9" y="3411.0" width="1.2" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1150.9" y="3422.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.10%)</title><rect x="1147.9" y="3395.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1150.9" y="3406.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.10%)</title><rect x="1147.9" y="3379.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1150.9" y="3390.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.10%)</title><rect x="1147.9" y="3363.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.9" y="3374.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.10%)</title><rect x="1147.9" y="3347.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.9" y="3358.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.10%)</title><rect x="1147.9" y="3331.0" width="1.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.9" y="3342.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.10%)</title><rect x="1147.9" y="3315.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1150.9" y="3326.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.10%)</title><rect x="1147.9" y="3299.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1150.9" y="3310.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.10%)</title><rect x="1147.9" y="3283.0" width="1.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1150.9" y="3294.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.10%)</title><rect x="1147.9" y="3267.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.9" y="3278.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.10%)</title><rect x="1147.9" y="3251.0" width="1.2" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1150.9" y="3262.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.10%)</title><rect x="1147.9" y="3235.0" width="1.2" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.9" y="3246.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.10%)</title><rect x="1147.9" y="3219.0" width="1.2" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1150.9" y="3230.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.10%)</title><rect x="1147.9" y="3203.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1150.9" y="3214.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.10%)</title><rect x="1147.9" y="3187.0" width="1.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1150.9" y="3198.0"></text>
</g>
<g>
<title>Parse::do_call() (3 samples, 0.08%)</title><rect x="1147.9" y="3171.0" width="0.9" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1150.9" y="3182.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="1147.9" y="3155.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1150.9" y="3166.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1147.9" y="3139.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.9" y="3150.0"></text>
</g>
<g>
<title>MethodLiveness::compute_liveness() (1 samples, 0.03%)</title><rect x="1147.9" y="3123.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1150.9" y="3134.0"></text>
</g>
<g>
<title>MethodLiveness::init_basic_blocks() (1 samples, 0.03%)</title><rect x="1147.9" y="3107.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1150.9" y="3118.0"></text>
</g>
<g>
<title>MethodLiveness::BasicBlock::BasicBlock(MethodLiveness*, int, int) (1 samples, 0.03%)</title><rect x="1147.9" y="3091.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1150.9" y="3102.0"></text>
</g>
<g>
<title>ArenaBitMap::ArenaBitMap(Arena*, unsigned long) (1 samples, 0.03%)</title><rect x="1147.9" y="3075.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1150.9" y="3086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1148.2" y="3155.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.2" y="3166.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1148.2" y="3139.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1151.2" y="3150.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1148.2" y="3123.0" width="0.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1151.2" y="3134.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1148.2" y="3107.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.2" y="3118.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1148.2" y="3091.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.2" y="3102.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1148.2" y="3075.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.2" y="3086.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1148.2" y="3059.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.2" y="3070.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1148.2" y="3043.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.2" y="3054.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1148.2" y="3027.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1151.2" y="3038.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1148.2" y="3011.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.2" y="3022.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1148.2" y="2995.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.2" y="3006.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1148.2" y="2979.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.2" y="2990.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1148.2" y="2963.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.2" y="2974.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1148.2" y="2947.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.2" y="2958.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.05%)</title><rect x="1148.2" y="2931.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.2" y="2942.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.05%)</title><rect x="1148.2" y="2915.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1151.2" y="2926.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.05%)</title><rect x="1148.2" y="2899.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1151.2" y="2910.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.05%)</title><rect x="1148.2" y="2883.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.2" y="2894.0"></text>
</g>
<g>
<title>Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool) (1 samples, 0.03%)</title><rect x="1148.2" y="2867.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.2" y="2878.0"></text>
</g>
<g>
<title>InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&amp;, WarmCallInfo*, bool&amp;) (1 samples, 0.03%)</title><rect x="1148.2" y="2851.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.2" y="2862.0"></text>
</g>
<g>
<title>ciMethod::get_flow_analysis() (1 samples, 0.03%)</title><rect x="1148.2" y="2835.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.2" y="2846.0"></text>
</g>
<g>
<title>ciTypeFlow::do_flow() (1 samples, 0.03%)</title><rect x="1148.2" y="2819.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.2" y="2830.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_types() (1 samples, 0.03%)</title><rect x="1148.2" y="2803.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1151.2" y="2814.0"></text>
</g>
<g>
<title>ciTypeFlow::df_flow_types(ciTypeFlow::Block*, bool, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1148.2" y="2787.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1151.2" y="2798.0"></text>
</g>
<g>
<title>ciTypeFlow::flow_block(ciTypeFlow::Block*, ciTypeFlow::StateVector*, ciTypeFlow::JsrSet*) (1 samples, 0.03%)</title><rect x="1148.2" y="2771.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1151.2" y="2782.0"></text>
</g>
<g>
<title>ciTypeFlow::StateVector::apply_one_bytecode(ciBytecodeStream*) (1 samples, 0.03%)</title><rect x="1148.2" y="2755.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.2" y="2766.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_klass(bool&amp;) (1 samples, 0.03%)</title><rect x="1148.2" y="2739.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1151.2" y="2750.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1148.2" y="2723.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.2" y="2734.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1148.2" y="2707.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.2" y="2718.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="1148.2" y="2691.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.2" y="2702.0"></text>
</g>
<g>
<title>SignatureStream::find_symbol() (1 samples, 0.03%)</title><rect x="1148.2" y="2675.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1151.2" y="2686.0"></text>
</g>
<g>
<title>SymbolTable::new_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="1148.2" y="2659.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.2" y="2670.0"></text>
</g>
<g>
<title>SymbolTable::do_lookup(char const*, int, unsigned long) (1 samples, 0.03%)</title><rect x="1148.2" y="2643.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1151.2" y="2654.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;SymbolTableConfig, (MEMFLAGS)10&gt;::Node* ConcurrentHashTable&lt;SymbolTableConfig, (MEMFLAGS)10&gt;::get_node&lt;SymbolTableLookup&gt;(ConcurrentHashTable&lt;SymbolTableConfig, (MEMFLAGS)10&gt;::Bucket const*, SymbolTableLookup&amp;, bool*, unsigned long*) const (1 samples, 0.03%)</title><rect x="1148.2" y="2627.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1151.2" y="2638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1148.5" y="2867.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1151.5" y="2878.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1148.5" y="2851.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1151.5" y="2862.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.03%)</title><rect x="1148.5" y="2835.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1151.5" y="2846.0"></text>
</g>
<g>
<title>Parse::do_instanceof() (1 samples, 0.03%)</title><rect x="1148.8" y="3171.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1151.8" y="3182.0"></text>
</g>
<g>
<title>GraphKit::gen_instanceof(Node*, Node*, bool) (1 samples, 0.03%)</title><rect x="1148.8" y="3155.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1151.8" y="3166.0"></text>
</g>
<g>
<title>GraphKit::maybe_cast_profiled_receiver(Node*, ciKlass*, ciKlass*, bool) (1 samples, 0.03%)</title><rect x="1148.8" y="3139.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.8" y="3150.0"></text>
</g>
<g>
<title>Compile::too_many_traps(ciMethod*, int, Deoptimization::DeoptReason) (1 samples, 0.03%)</title><rect x="1148.8" y="3123.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1151.8" y="3134.0"></text>
</g>
<g>
<title>ciMethodData::bci_to_data(int, ciMethod*) (1 samples, 0.03%)</title><rect x="1148.8" y="3107.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1151.8" y="3118.0"></text>
</g>
<g>
<title>ciMethodData::data_from(DataLayout*) (1 samples, 0.03%)</title><rect x="1148.8" y="3091.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.8" y="3102.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1148.8" y="3075.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1151.8" y="3086.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1148.8" y="3059.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1151.8" y="3070.0"></text>
</g>
<g>
<title>Parse::do_exits() (1 samples, 0.03%)</title><rect x="1149.1" y="3411.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.1" y="3422.0"></text>
</g>
<g>
<title>PhiNode::Value(PhaseGVN*) const (1 samples, 0.03%)</title><rect x="1149.1" y="3395.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.1" y="3406.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1149.4" y="3443.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1152.4" y="3454.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.05%)</title><rect x="1149.4" y="3427.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1152.4" y="3438.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.05%)</title><rect x="1149.4" y="3411.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.4" y="3422.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1149.7" y="3395.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1152.7" y="3406.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1149.7" y="3379.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.7" y="3390.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1149.7" y="3363.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.7" y="3374.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1149.7" y="3347.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.7" y="3358.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1149.7" y="3331.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.7" y="3342.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1149.7" y="3315.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1152.7" y="3326.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1149.7" y="3299.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1152.7" y="3310.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1149.7" y="3283.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.7" y="3294.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1149.7" y="3267.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.7" y="3278.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1149.7" y="3251.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1152.7" y="3262.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1149.7" y="3235.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.7" y="3246.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1149.7" y="3219.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1152.7" y="3230.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1149.7" y="3203.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1152.7" y="3214.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1149.7" y="3187.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1152.7" y="3198.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1149.7" y="3171.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1152.7" y="3182.0"></text>
</g>
<g>
<title>Parse::do_call() (1 samples, 0.03%)</title><rect x="1149.7" y="3155.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1152.7" y="3166.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (1 samples, 0.03%)</title><rect x="1149.7" y="3139.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.7" y="3150.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (1 samples, 0.03%)</title><rect x="1149.7" y="3123.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1152.7" y="3134.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (1 samples, 0.03%)</title><rect x="1149.7" y="3107.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1152.7" y="3118.0"></text>
</g>
<g>
<title>Parse::do_one_block() (1 samples, 0.03%)</title><rect x="1149.7" y="3091.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.7" y="3102.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (1 samples, 0.03%)</title><rect x="1149.7" y="3075.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1152.7" y="3086.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1149.7" y="3059.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1152.7" y="3070.0"></text>
</g>
<g>
<title>PreserveJVMState::PreserveJVMState(GraphKit*, bool) (1 samples, 0.03%)</title><rect x="1149.7" y="3043.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1152.7" y="3054.0"></text>
</g>
<g>
<title>GraphKit::clone_map() (1 samples, 0.03%)</title><rect x="1149.7" y="3027.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1152.7" y="3038.0"></text>
</g>
<g>
<title>Node::clone() const (1 samples, 0.03%)</title><rect x="1149.7" y="3011.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.7" y="3022.0"></text>
</g>
<g>
<title>Parse::do_field_access(bool, bool) (1 samples, 0.03%)</title><rect x="1150.0" y="3475.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1153.0" y="3486.0"></text>
</g>
<g>
<title>Parse::do_get_xxx(Node*, ciField*, bool) (1 samples, 0.03%)</title><rect x="1150.0" y="3459.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.0" y="3470.0"></text>
</g>
<g>
<title>PhaseGVN::transform_no_reclaim(Node*) (1 samples, 0.03%)</title><rect x="1150.0" y="3443.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1153.0" y="3454.0"></text>
</g>
<g>
<title>TypeInstPtr::add_offset(long) const (1 samples, 0.03%)</title><rect x="1150.0" y="3427.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.0" y="3438.0"></text>
</g>
<g>
<title>ciInstanceKlass::is_boxed_value_offset(int) const (1 samples, 0.03%)</title><rect x="1150.0" y="3411.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.0" y="3422.0"></text>
</g>
<g>
<title>Parse::do_if(BoolTest::mask, Node*) (1 samples, 0.03%)</title><rect x="1150.3" y="3475.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1153.3" y="3486.0"></text>
</g>
<g>
<title>GraphKit::uncommon_trap(int, ciKlass*, char const*, bool, bool) [clone .part.0] (1 samples, 0.03%)</title><rect x="1150.3" y="3459.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1153.3" y="3470.0"></text>
</g>
<g>
<title>GraphKit::kill_dead_locals() (1 samples, 0.03%)</title><rect x="1150.3" y="3443.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1153.3" y="3454.0"></text>
</g>
<g>
<title>ciMethod::liveness_at_bci(int) (1 samples, 0.03%)</title><rect x="1150.3" y="3427.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.3" y="3438.0"></text>
</g>
<g>
<title>MethodLiveness::get_liveness_at(int) (1 samples, 0.03%)</title><rect x="1150.3" y="3411.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1153.3" y="3422.0"></text>
</g>
<g>
<title>PhaseTransform::makecon(Type const*) (1 samples, 0.03%)</title><rect x="1150.6" y="3491.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1153.6" y="3502.0"></text>
</g>
<g>
<title>PhaseRemoveUseless::PhaseRemoveUseless(PhaseGVN*, Unique_Node_List*, Phase::PhaseNumber) (1 samples, 0.03%)</title><rect x="1150.9" y="3555.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1153.9" y="3566.0"></text>
</g>
<g>
<title>Compile::identify_useful_nodes(Unique_Node_List&amp;) (1 samples, 0.03%)</title><rect x="1150.9" y="3539.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1153.9" y="3550.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) (81 samples, 2.06%)</title><rect x="1151.2" y="3587.0" width="24.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1154.2" y="3598.0">C..</text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*) (81 samples, 2.06%)</title><rect x="1151.2" y="3571.0" width="24.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1154.2" y="3582.0">C..</text>
</g>
<g>
<title>Compilation::compile_method() (81 samples, 2.06%)</title><rect x="1151.2" y="3555.0" width="24.4" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1154.2" y="3566.0">C..</text>
</g>
<g>
<title>Compilation::compile_java_method() (71 samples, 1.81%)</title><rect x="1151.2" y="3539.0" width="21.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1154.2" y="3550.0">C..</text>
</g>
<g>
<title>Base::as_Base() (1 samples, 0.03%)</title><rect x="1151.2" y="3523.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.2" y="3534.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.0] (29 samples, 0.74%)</title><rect x="1151.5" y="3523.0" width="8.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1154.5" y="3534.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (1 samples, 0.03%)</title><rect x="1151.5" y="3507.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1154.5" y="3518.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (1 samples, 0.03%)</title><rect x="1151.5" y="3491.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1154.5" y="3502.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1151.5" y="3475.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.5" y="3486.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1151.5" y="3459.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1154.5" y="3470.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (1 samples, 0.03%)</title><rect x="1151.5" y="3443.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1154.5" y="3454.0"></text>
</g>
<g>
<title>SubstitutionResolver::block_do(BlockBegin*) (1 samples, 0.03%)</title><rect x="1151.5" y="3427.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.5" y="3438.0"></text>
</g>
<g>
<title>Instruction::state_values_do(ValueVisitor*) (1 samples, 0.03%)</title><rect x="1151.5" y="3411.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1154.5" y="3422.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (25 samples, 0.64%)</title><rect x="1151.8" y="3507.0" width="7.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1154.8" y="3518.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (25 samples, 0.64%)</title><rect x="1151.8" y="3491.0" width="7.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.8" y="3502.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (24 samples, 0.61%)</title><rect x="1151.8" y="3475.0" width="7.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1154.8" y="3486.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (24 samples, 0.61%)</title><rect x="1151.8" y="3459.0" width="7.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.8" y="3470.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (23 samples, 0.59%)</title><rect x="1151.8" y="3443.0" width="6.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.8" y="3454.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="1151.8" y="3427.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1154.8" y="3438.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="1151.8" y="3411.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1154.8" y="3422.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1151.8" y="3395.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.8" y="3406.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1151.8" y="3379.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1154.8" y="3390.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1151.8" y="3363.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1154.8" y="3374.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_index_impl(constantPoolHandle const&amp;, int, bool&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1151.8" y="3347.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1154.8" y="3358.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1151.8" y="3331.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1154.8" y="3342.0"></text>
</g>
<g>
<title>SymbolTable::new_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="1151.8" y="3315.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1154.8" y="3326.0"></text>
</g>
<g>
<title>SymbolTable::do_lookup(char const*, int, unsigned long) (1 samples, 0.03%)</title><rect x="1151.8" y="3299.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1154.8" y="3310.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;SymbolTableConfig, (MEMFLAGS)10&gt;::Node* ConcurrentHashTable&lt;SymbolTableConfig, (MEMFLAGS)10&gt;::get_node&lt;SymbolTableLookup&gt;(ConcurrentHashTable&lt;SymbolTableConfig, (MEMFLAGS)10&gt;::Bucket const*, SymbolTableLookup&amp;, bool*, unsigned long*) const (1 samples, 0.03%)</title><rect x="1151.8" y="3283.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1154.8" y="3294.0"></text>
</g>
<g>
<title>apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1151.8" y="3267.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1154.8" y="3278.0"></text>
</g>
<g>
<title>smp_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="1151.8" y="3251.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1154.8" y="3262.0"></text>
</g>
<g>
<title>irq_exit (1 samples, 0.03%)</title><rect x="1151.8" y="3235.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1154.8" y="3246.0"></text>
</g>
<g>
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1151.8" y="3219.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1154.8" y="3230.0"></text>
</g>
<g>
<title>run_rebalance_domains (1 samples, 0.03%)</title><rect x="1151.8" y="3203.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1154.8" y="3214.0"></text>
</g>
<g>
<title>update_blocked_averages (1 samples, 0.03%)</title><rect x="1151.8" y="3187.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1154.8" y="3198.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1151.8" y="3171.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1154.8" y="3182.0"></text>
</g>
<g>
<title>GraphBuilder::if_node(Instruction*, Instruction::Condition, Instruction*, ValueStack*) (1 samples, 0.03%)</title><rect x="1152.1" y="3427.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1155.1" y="3438.0"></text>
</g>
<g>
<title>StateSplit::as_StateSplit() (1 samples, 0.03%)</title><rect x="1152.1" y="3411.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1155.1" y="3422.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (21 samples, 0.53%)</title><rect x="1152.4" y="3427.0" width="6.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1155.4" y="3438.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (15 samples, 0.38%)</title><rect x="1152.4" y="3411.0" width="4.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1155.4" y="3422.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) [clone .part.0] (15 samples, 0.38%)</title><rect x="1152.4" y="3395.0" width="4.5" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1155.4" y="3406.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (12 samples, 0.31%)</title><rect x="1152.4" y="3379.0" width="3.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1155.4" y="3390.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (12 samples, 0.31%)</title><rect x="1152.4" y="3363.0" width="3.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.4" y="3374.0"></text>
</g>
<g>
<title>GraphBuilder::instance_of(int) (1 samples, 0.03%)</title><rect x="1152.7" y="3347.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1155.7" y="3358.0"></text>
</g>
<g>
<title>GraphBuilder::direct_compare(ciKlass*) [clone .constprop.0] (1 samples, 0.03%)</title><rect x="1152.7" y="3331.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1155.7" y="3342.0"></text>
</g>
<g>
<title>Dependencies::assert_leaf_type(ciKlass*) (1 samples, 0.03%)</title><rect x="1152.7" y="3315.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1155.7" y="3326.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (10 samples, 0.25%)</title><rect x="1153.0" y="3347.0" width="3.0" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.0" y="3358.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (10 samples, 0.25%)</title><rect x="1153.0" y="3331.0" width="3.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.0" y="3342.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) [clone .part.0] (8 samples, 0.20%)</title><rect x="1153.0" y="3315.0" width="2.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.0" y="3326.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (7 samples, 0.18%)</title><rect x="1153.0" y="3299.0" width="2.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.0" y="3310.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (7 samples, 0.18%)</title><rect x="1153.0" y="3283.0" width="2.1" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="3294.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="1153.0" y="3267.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1156.0" y="3278.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_field(bool&amp;) (1 samples, 0.03%)</title><rect x="1153.0" y="3251.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1156.0" y="3262.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1153.0" y="3235.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1156.0" y="3246.0"></text>
</g>
<g>
<title>ciEnv::get_field_by_index_impl(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1153.0" y="3219.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.0" y="3230.0"></text>
</g>
<g>
<title>ciField::ciField(ciInstanceKlass*, int) (1 samples, 0.03%)</title><rect x="1153.0" y="3203.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.0" y="3214.0"></text>
</g>
<g>
<title>InstanceKlass::find_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="1153.0" y="3187.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1156.0" y="3198.0"></text>
</g>
<g>
<title>InstanceKlass::find_local_field(Symbol*, Symbol*, fieldDescriptor*) const (1 samples, 0.03%)</title><rect x="1153.0" y="3171.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.0" y="3182.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (5 samples, 0.13%)</title><rect x="1153.3" y="3267.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.3" y="3278.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (4 samples, 0.10%)</title><rect x="1153.3" y="3251.0" width="1.2" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.3" y="3262.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) [clone .part.0] (4 samples, 0.10%)</title><rect x="1153.3" y="3235.0" width="1.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1156.3" y="3246.0"></text>
</g>
<g>
<title>GraphBuilder::args_list_for_profiling(ciMethod*, int&amp;, bool) (1 samples, 0.03%)</title><rect x="1153.3" y="3219.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1156.3" y="3230.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.08%)</title><rect x="1153.6" y="3219.0" width="0.9" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.6" y="3230.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.08%)</title><rect x="1153.6" y="3203.0" width="0.9" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1156.6" y="3214.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.08%)</title><rect x="1153.6" y="3187.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1156.6" y="3198.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.05%)</title><rect x="1153.6" y="3171.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.6" y="3182.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) [clone .part.0] (2 samples, 0.05%)</title><rect x="1153.6" y="3155.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1156.6" y="3166.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (2 samples, 0.05%)</title><rect x="1153.6" y="3139.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.6" y="3150.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (2 samples, 0.05%)</title><rect x="1153.6" y="3123.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1156.6" y="3134.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (2 samples, 0.05%)</title><rect x="1153.6" y="3107.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="3118.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="1153.6" y="3091.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1156.6" y="3102.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) [clone .part.0] (1 samples, 0.03%)</title><rect x="1153.6" y="3075.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.6" y="3086.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="1153.6" y="3059.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1156.6" y="3070.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.03%)</title><rect x="1153.6" y="3043.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1156.6" y="3054.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="1153.6" y="3027.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.6" y="3038.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (1 samples, 0.03%)</title><rect x="1153.6" y="3011.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="3022.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) [clone .part.0] (1 samples, 0.03%)</title><rect x="1153.6" y="2995.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1156.6" y="3006.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="1153.6" y="2979.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1156.6" y="2990.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.03%)</title><rect x="1153.6" y="2963.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1156.6" y="2974.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="1153.6" y="2947.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="2958.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1153.6" y="2931.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1156.6" y="2942.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1153.6" y="2915.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1156.6" y="2926.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1153.6" y="2899.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.6" y="2910.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1153.6" y="2883.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.6" y="2894.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1153.6" y="2867.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1156.6" y="2878.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.03%)</title><rect x="1153.6" y="2851.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.6" y="2862.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (1 samples, 0.03%)</title><rect x="1153.6" y="2835.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1156.6" y="2846.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (1 samples, 0.03%)</title><rect x="1153.6" y="2819.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.6" y="2830.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (1 samples, 0.03%)</title><rect x="1153.6" y="2803.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1156.6" y="2814.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1153.9" y="3091.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1156.9" y="3102.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1153.9" y="3075.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1156.9" y="3086.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1153.9" y="3059.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1156.9" y="3070.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1153.9" y="3043.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1156.9" y="3054.0"></text>
</g>
<g>
<title>Dependencies::check_evol_method(Method*) (1 samples, 0.03%)</title><rect x="1153.9" y="3027.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1156.9" y="3038.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1154.2" y="3171.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.2" y="3182.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1154.2" y="3155.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.2" y="3166.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (1 samples, 0.03%)</title><rect x="1154.2" y="3139.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1157.2" y="3150.0"></text>
</g>
<g>
<title>LinkResolver::resolve_special_call_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1154.2" y="3123.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1157.2" y="3134.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_special_method(LinkInfo const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1154.2" y="3107.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1157.2" y="3118.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="1154.2" y="3091.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1157.2" y="3102.0"></text>
</g>
<g>
<title>LinkResolver::lookup_method_in_klasses(LinkInfo const&amp;, bool, bool) (1 samples, 0.03%)</title><rect x="1154.2" y="3075.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1157.2" y="3086.0"></text>
</g>
<g>
<title>InstanceKlass::uncached_lookup_method(Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1154.2" y="3059.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.2" y="3070.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) [clone .constprop.0] (1 samples, 0.03%)</title><rect x="1154.2" y="3043.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1157.2" y="3054.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (1 samples, 0.03%)</title><rect x="1154.5" y="3251.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1157.5" y="3262.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1154.5" y="3235.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.5" y="3246.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1154.5" y="3219.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1157.5" y="3230.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1154.5" y="3203.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1157.5" y="3214.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (1 samples, 0.03%)</title><rect x="1154.5" y="3187.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1157.5" y="3198.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (1 samples, 0.03%)</title><rect x="1154.5" y="3171.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.5" y="3182.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.03%)</title><rect x="1154.5" y="3155.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1157.5" y="3166.0"></text>
</g>
<g>
<title>GraphBuilder::method_return(Instruction*, bool) (1 samples, 0.03%)</title><rect x="1154.8" y="3267.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1157.8" y="3278.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1154.8" y="3251.0" width="0.3" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="1157.8" y="3262.0"></text>
</g>
<g>
<title>GraphBuilder::profile_call(ciMethod*, Instruction*, ciKlass*, GrowableArray&lt;Instruction*&gt;*, bool) (1 samples, 0.03%)</title><rect x="1155.1" y="3299.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1158.1" y="3310.0"></text>
</g>
<g>
<title>GraphBuilder::try_method_handle_inline(ciMethod*, bool) (2 samples, 0.05%)</title><rect x="1155.4" y="3315.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.4" y="3326.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) (2 samples, 0.05%)</title><rect x="1155.4" y="3299.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1158.4" y="3310.0"></text>
</g>
<g>
<title>GraphBuilder::try_inline_full(ciMethod*, bool, bool, Bytecodes::Code, Instruction*) [clone .part.0] (2 samples, 0.05%)</title><rect x="1155.4" y="3283.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1158.4" y="3294.0"></text>
</g>
<g>
<title>GraphBuilder::args_list_for_profiling(ciMethod*, int&amp;, bool) (1 samples, 0.03%)</title><rect x="1155.4" y="3267.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1158.4" y="3278.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1155.4" y="3251.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1158.4" y="3262.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="1155.7" y="3267.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1158.7" y="3278.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (1 samples, 0.03%)</title><rect x="1155.7" y="3251.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1158.7" y="3262.0"></text>
</g>
<g>
<title>GraphBuilder::access_field(Bytecodes::Code) (1 samples, 0.03%)</title><rect x="1155.7" y="3235.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1158.7" y="3246.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1155.7" y="3219.0" width="0.3" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1158.7" y="3230.0"></text>
</g>
<g>
<title>GraphBuilder::push_scope(ciMethod*, BlockBegin*) (1 samples, 0.03%)</title><rect x="1156.0" y="3379.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.0" y="3390.0"></text>
</g>
<g>
<title>BlockListBuilder::BlockListBuilder(Compilation*, IRScope*, int) (1 samples, 0.03%)</title><rect x="1156.0" y="3363.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1159.0" y="3374.0"></text>
</g>
<g>
<title>BlockListBuilder::set_entries(int) (1 samples, 0.03%)</title><rect x="1156.0" y="3347.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.0" y="3358.0"></text>
</g>
<g>
<title>BlockListBuilder::make_block_at(int, BlockBegin*) [clone .constprop.0] (1 samples, 0.03%)</title><rect x="1156.0" y="3331.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1159.0" y="3342.0"></text>
</g>
<g>
<title>ResourceBitMap::initialize(unsigned long) (1 samples, 0.03%)</title><rect x="1156.0" y="3315.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1159.0" y="3326.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1156.0" y="3299.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.0" y="3310.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (2 samples, 0.05%)</title><rect x="1156.3" y="3379.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1159.3" y="3390.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (2 samples, 0.05%)</title><rect x="1156.3" y="3363.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1159.3" y="3374.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (2 samples, 0.05%)</title><rect x="1156.3" y="3347.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1159.3" y="3358.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle const&amp;, Thread*) (2 samples, 0.05%)</title><rect x="1156.3" y="3331.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.3" y="3342.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.03%)</title><rect x="1156.3" y="3315.0" width="0.3" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1159.3" y="3326.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.03%)</title><rect x="1156.3" y="3299.0" width="0.3" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1159.3" y="3310.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="1156.3" y="3283.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1159.3" y="3294.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="1156.3" y="3267.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1159.3" y="3278.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="1156.3" y="3251.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1159.3" y="3262.0"></text>
</g>
<g>
<title>find_vma (1 samples, 0.03%)</title><rect x="1156.3" y="3235.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1159.3" y="3246.0"></text>
</g>
<g>
<title>Metaspace::allocate(ClassLoaderData*, unsigned long, MetaspaceObj::Type, Thread*) (1 samples, 0.03%)</title><rect x="1156.6" y="3315.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1159.6" y="3326.0"></text>
</g>
<g>
<title>metaspace::MetaspaceArena::allocate(unsigned long) (1 samples, 0.03%)</title><rect x="1156.6" y="3299.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.6" y="3310.0"></text>
</g>
<g>
<title>metaspace::FreeChunkListVector::search_chunk_descending(signed char, unsigned long) (1 samples, 0.03%)</title><rect x="1156.6" y="3283.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1159.6" y="3294.0"></text>
</g>
<g>
<title>Invoke::Invoke(Bytecodes::Code, ValueType*, Instruction*, GrowableArray&lt;Instruction*&gt;*, int, ciMethod*, ValueStack*) (1 samples, 0.03%)</title><rect x="1156.9" y="3411.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1159.9" y="3422.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_method(bool&amp;, ciSignature**) (4 samples, 0.10%)</title><rect x="1157.2" y="3411.0" width="1.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1160.2" y="3422.0"></text>
</g>
<g>
<title>ciEnv::get_method_by_index_impl(constantPoolHandle const&amp;, int, Bytecodes::Code, ciInstanceKlass*) (4 samples, 0.10%)</title><rect x="1157.2" y="3395.0" width="1.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.2" y="3406.0"></text>
</g>
<g>
<title>ciEnv::lookup_method(ciInstanceKlass*, ciKlass*, Symbol*, Symbol*, Bytecodes::Code, constantTag) (2 samples, 0.05%)</title><rect x="1157.2" y="3379.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1160.2" y="3390.0"></text>
</g>
<g>
<title>LinkResolver::linktime_resolve_interface_method_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1157.2" y="3363.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.2" y="3374.0"></text>
</g>
<g>
<title>LinkResolver::resolve_interface_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="1157.2" y="3347.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.2" y="3358.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.03%)</title><rect x="1157.2" y="3331.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.2" y="3342.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Klass*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="1157.2" y="3315.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1160.2" y="3326.0"></text>
</g>
<g>
<title>SignatureStream::find_symbol() (1 samples, 0.03%)</title><rect x="1157.2" y="3299.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.2" y="3310.0"></text>
</g>
<g>
<title>SymbolTable::new_symbol(char const*, int) (1 samples, 0.03%)</title><rect x="1157.2" y="3283.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.2" y="3294.0"></text>
</g>
<g>
<title>SymbolTable::lookup_shared(char const*, int, unsigned int) (1 samples, 0.03%)</title><rect x="1157.2" y="3267.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1160.2" y="3278.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call_or_null(LinkInfo const&amp;) (1 samples, 0.03%)</title><rect x="1157.5" y="3363.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1160.5" y="3374.0"></text>
</g>
<g>
<title>LinkResolver::resolve_static_call(CallInfo&amp;, LinkInfo const&amp;, bool, Thread*) (1 samples, 0.03%)</title><rect x="1157.5" y="3347.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1160.5" y="3358.0"></text>
</g>
<g>
<title>LinkResolver::resolve_method(LinkInfo const&amp;, Bytecodes::Code, Thread*) (1 samples, 0.03%)</title><rect x="1157.5" y="3331.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.5" y="3342.0"></text>
</g>
<g>
<title>LinkResolver::check_method_loader_constraints(LinkInfo const&amp;, methodHandle const&amp;, char const*, Thread*) (1 samples, 0.03%)</title><rect x="1157.5" y="3315.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1160.5" y="3326.0"></text>
</g>
<g>
<title>SystemDictionary::check_signature_loaders(Symbol*, Klass*, Handle, Handle, bool, Thread*) (1 samples, 0.03%)</title><rect x="1157.5" y="3299.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1160.5" y="3310.0"></text>
</g>
<g>
<title>Dictionary::find_class(int, unsigned int, Symbol*) (1 samples, 0.03%)</title><rect x="1157.5" y="3283.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.5" y="3294.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.05%)</title><rect x="1157.8" y="3379.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.8" y="3390.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.05%)</title><rect x="1157.8" y="3363.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1160.8" y="3374.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (2 samples, 0.05%)</title><rect x="1157.8" y="3347.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.8" y="3358.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (2 samples, 0.05%)</title><rect x="1157.8" y="3331.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1160.8" y="3342.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (2 samples, 0.05%)</title><rect x="1157.8" y="3315.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1160.8" y="3326.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (1 samples, 0.03%)</title><rect x="1157.8" y="3299.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1160.8" y="3310.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.03%)</title><rect x="1158.1" y="3299.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1161.1" y="3310.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.03%)</title><rect x="1158.1" y="3283.0" width="0.3" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="1161.1" y="3294.0"></text>
</g>
<g>
<title>ciMethod::find_monomorphic_target(ciInstanceKlass*, ciInstanceKlass*, ciInstanceKlass*, bool) (1 samples, 0.03%)</title><rect x="1158.4" y="3411.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1161.4" y="3422.0"></text>
</g>
<g>
<title>Dependencies::find_unique_concrete_method(Klass*, Method*) (1 samples, 0.03%)</title><rect x="1158.4" y="3395.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1161.4" y="3406.0"></text>
</g>
<g>
<title>ClassHierarchyWalker::find_witness_anywhere(Klass*, bool, bool) (1 samples, 0.03%)</title><rect x="1158.4" y="3379.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1161.4" y="3390.0"></text>
</g>
<g>
<title>InstanceKlass::find_instance_method(Symbol const*, Symbol const*, Klass::PrivateLookupMode) const (1 samples, 0.03%)</title><rect x="1158.4" y="3363.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1161.4" y="3374.0"></text>
</g>
<g>
<title>InstanceKlass::find_method_index(Array&lt;Method*&gt; const*, Symbol const*, Symbol const*, Klass::OverpassLookupMode, Klass::StaticLookupMode, Klass::PrivateLookupMode) (1 samples, 0.03%)</title><rect x="1158.4" y="3347.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1161.4" y="3358.0"></text>
</g>
<g>
<title>ciBytecodeStream::get_index() const (1 samples, 0.03%)</title><rect x="1158.7" y="3443.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1161.7" y="3454.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (1 samples, 0.03%)</title><rect x="1159.1" y="3475.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1162.1" y="3486.0"></text>
</g>
<g>
<title>IR::compute_use_counts() (1 samples, 0.03%)</title><rect x="1159.4" y="3507.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.4" y="3518.0"></text>
</g>
<g>
<title>BlockList::iterate_backward(BlockClosure*) (1 samples, 0.03%)</title><rect x="1159.4" y="3491.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1162.4" y="3502.0"></text>
</g>
<g>
<title>UseCountComputer::block_do(BlockBegin*) (1 samples, 0.03%)</title><rect x="1159.4" y="3475.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1162.4" y="3486.0"></text>
</g>
<g>
<title>UseCountComputer::visit(Instruction**) (1 samples, 0.03%)</title><rect x="1159.4" y="3459.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1162.4" y="3470.0"></text>
</g>
<g>
<title>IR::eliminate_null_checks() (1 samples, 0.03%)</title><rect x="1159.7" y="3507.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1162.7" y="3518.0"></text>
</g>
<g>
<title>Optimizer::eliminate_null_checks() (1 samples, 0.03%)</title><rect x="1159.7" y="3491.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1162.7" y="3502.0"></text>
</g>
<g>
<title>NullCheckEliminator::merge_state_for(BlockBegin*, ValueSet*) [clone .part.0] (1 samples, 0.03%)</title><rect x="1159.7" y="3475.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1162.7" y="3486.0"></text>
</g>
<g>
<title>IR::split_critical_edges() (1 samples, 0.03%)</title><rect x="1160.0" y="3507.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1163.0" y="3518.0"></text>
</g>
<g>
<title>BlockBegin::insert_block_between(BlockBegin*) (1 samples, 0.03%)</title><rect x="1160.0" y="3491.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1163.0" y="3502.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1160.0" y="3475.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.0" y="3486.0"></text>
</g>
<g>
<title>Compilation::emit_code_body() (11 samples, 0.28%)</title><rect x="1160.3" y="3523.0" width="3.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1163.3" y="3534.0"></text>
</g>
<g>
<title>CodeBuffer::initialize_section_size(CodeSection*, int) (1 samples, 0.03%)</title><rect x="1160.3" y="3507.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.3" y="3518.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1160.3" y="3491.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="1163.3" y="3502.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_code(BlockList*) (7 samples, 0.18%)</title><rect x="1160.6" y="3507.0" width="2.1" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1163.6" y="3518.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_lir_list(LIR_List*) (7 samples, 0.18%)</title><rect x="1160.6" y="3491.0" width="2.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1163.6" y="3502.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_call(LIR_OpJavaCall*) (4 samples, 0.10%)</title><rect x="1160.6" y="3475.0" width="1.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1163.6" y="3486.0"></text>
</g>
<g>
<title>LIR_Assembler::call(LIR_OpJavaCall*, relocInfo::relocType) (3 samples, 0.08%)</title><rect x="1160.6" y="3459.0" width="0.9" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1163.6" y="3470.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (3 samples, 0.08%)</title><rect x="1160.6" y="3443.0" width="0.9" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1163.6" y="3454.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (3 samples, 0.08%)</title><rect x="1160.6" y="3427.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1163.6" y="3438.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1160.6" y="3411.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1163.6" y="3422.0"></text>
</g>
<g>
<title>Location::write_on(DebugInfoWriteStream*) (1 samples, 0.03%)</title><rect x="1160.6" y="3395.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1163.6" y="3406.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.05%)</title><rect x="1160.9" y="3411.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1163.9" y="3422.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.03%)</title><rect x="1161.2" y="3395.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1164.2" y="3406.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_static_call_stub() (1 samples, 0.03%)</title><rect x="1161.5" y="3459.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1164.5" y="3470.0"></text>
</g>
<g>
<title>relocInfo::initialize(CodeSection*, Relocation*) (1 samples, 0.03%)</title><rect x="1161.5" y="3443.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1164.5" y="3454.0"></text>
</g>
<g>
<title>static_stub_Relocation::pack_data_to(CodeSection*) (1 samples, 0.03%)</title><rect x="1161.5" y="3427.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.5" y="3438.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_op1(LIR_Op1*) (1 samples, 0.03%)</title><rect x="1161.8" y="3475.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.8" y="3486.0"></text>
</g>
<g>
<title>Assembler::movq(RegisterImpl*, Address) (1 samples, 0.03%)</title><rect x="1161.8" y="3459.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1164.8" y="3470.0"></text>
</g>
<g>
<title>LIR_Assembler::process_debug_info(LIR_Op*) (1 samples, 0.03%)</title><rect x="1162.1" y="3475.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1165.1" y="3486.0"></text>
</g>
<g>
<title>LIR_Assembler::record_non_safepoint_debug_info() (1 samples, 0.03%)</title><rect x="1162.1" y="3459.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.1" y="3470.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.03%)</title><rect x="1162.1" y="3443.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1165.1" y="3454.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.03%)</title><rect x="1162.1" y="3427.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1165.1" y="3438.0"></text>
</g>
<g>
<title>Label::patch_instructions(MacroAssembler*) (1 samples, 0.03%)</title><rect x="1162.4" y="3475.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1165.4" y="3486.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_exception_handler() (1 samples, 0.03%)</title><rect x="1162.7" y="3507.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.7" y="3518.0"></text>
</g>
<g>
<title>MacroAssembler::stop(char const*) (1 samples, 0.03%)</title><rect x="1162.7" y="3491.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1165.7" y="3502.0"></text>
</g>
<g>
<title>AddressLiteral::AddressLiteral(unsigned char*, relocInfo::relocType) (1 samples, 0.03%)</title><rect x="1162.7" y="3475.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.7" y="3486.0"></text>
</g>
<g>
<title>LIR_Assembler::emit_slow_case_stubs() (2 samples, 0.05%)</title><rect x="1163.0" y="3507.0" width="0.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1166.0" y="3518.0"></text>
</g>
<g>
<title>CounterOverflowStub::emit_code(LIR_Assembler*) (1 samples, 0.03%)</title><rect x="1163.0" y="3491.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1166.0" y="3502.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1163.0" y="3475.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1166.0" y="3486.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.03%)</title><rect x="1163.0" y="3459.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1166.0" y="3470.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (1 samples, 0.03%)</title><rect x="1163.0" y="3443.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.0" y="3454.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.03%)</title><rect x="1163.0" y="3427.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.0" y="3438.0"></text>
</g>
<g>
<title>SimpleExceptionStub::emit_code(LIR_Assembler*) (1 samples, 0.03%)</title><rect x="1163.3" y="3491.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.3" y="3502.0"></text>
</g>
<g>
<title>LIR_Assembler::add_call_info(int, CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1163.3" y="3475.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1166.3" y="3486.0"></text>
</g>
<g>
<title>CodeEmitInfo::record_debug_info(DebugInformationRecorder*, int) (1 samples, 0.03%)</title><rect x="1163.3" y="3459.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1166.3" y="3470.0"></text>
</g>
<g>
<title>DebugInformationRecorder::create_scope_values(GrowableArray&lt;ScopeValue*&gt;*) (1 samples, 0.03%)</title><rect x="1163.3" y="3443.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1166.3" y="3454.0"></text>
</g>
<g>
<title>DebugInformationRecorder::find_sharable_decode_offset(int) (1 samples, 0.03%)</title><rect x="1163.3" y="3427.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1166.3" y="3438.0"></text>
</g>
<g>
<title>Compilation::emit_lir() (28 samples, 0.71%)</title><rect x="1163.6" y="3523.0" width="8.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1166.6" y="3534.0"></text>
</g>
<g>
<title>BlockList::iterate_forward(BlockClosure*) (3 samples, 0.08%)</title><rect x="1163.6" y="3507.0" width="0.9" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1166.6" y="3518.0"></text>
</g>
<g>
<title>non-virtual thunk to LIRGenerator::block_do(BlockBegin*) (3 samples, 0.08%)</title><rect x="1163.6" y="3491.0" width="0.9" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1166.6" y="3502.0"></text>
</g>
<g>
<title>LIRGenerator::do_ArithmeticOp_Long(ArithmeticOp*) (1 samples, 0.03%)</title><rect x="1163.6" y="3475.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.6" y="3486.0"></text>
</g>
<g>
<title>LIRGenerator::arithmetic_op_long(Bytecodes::Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1163.6" y="3459.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.6" y="3470.0"></text>
</g>
<g>
<title>LIRGenerator::arithmetic_op(Bytecodes::Code, LIR_OprDesc*, LIR_OprDesc*, LIR_OprDesc*, bool, LIR_OprDesc*, CodeEmitInfo*) (1 samples, 0.03%)</title><rect x="1163.6" y="3443.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.6" y="3454.0"></text>
</g>
<g>
<title>LIRGenerator::do_Invoke(Invoke*) (1 samples, 0.03%)</title><rect x="1163.9" y="3475.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1166.9" y="3486.0"></text>
</g>
<g>
<title>LIRGenerator::state_for(Instruction*, ValueStack*, bool) (1 samples, 0.03%)</title><rect x="1163.9" y="3459.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1166.9" y="3470.0"></text>
</g>
<g>
<title>LIRGenerator::do_LoadField(LoadField*) (1 samples, 0.03%)</title><rect x="1164.2" y="3475.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1167.2" y="3486.0"></text>
</g>
<g>
<title>ControlFlowOptimizer::delete_empty_blocks(BlockList*) (1 samples, 0.03%)</title><rect x="1164.5" y="3507.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1167.5" y="3518.0"></text>
</g>
<g>
<title>LinearScan::do_linear_scan() (24 samples, 0.61%)</title><rect x="1164.8" y="3507.0" width="7.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1167.8" y="3518.0"></text>
</g>
<g>
<title>LinearScan::allocate_registers() (7 samples, 0.18%)</title><rect x="1164.8" y="3491.0" width="2.1" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1167.8" y="3502.0"></text>
</g>
<g>
<title>LIR_List::append(LIR_InsertionBuffer*) (1 samples, 0.03%)</title><rect x="1165.7" y="3475.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.7" y="3486.0"></text>
</g>
<g>
<title>LinearScanWalker::activate_current() (3 samples, 0.08%)</title><rect x="1166.0" y="3475.0" width="0.9" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1169.0" y="3486.0"></text>
</g>
<g>
<title>LinearScanWalker::alloc_locked_reg(Interval*) (1 samples, 0.03%)</title><rect x="1166.3" y="3459.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1169.3" y="3470.0"></text>
</g>
<g>
<title>LinearScanWalker::spill_collect_inactive_any(Interval*) (1 samples, 0.03%)</title><rect x="1166.3" y="3443.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1169.3" y="3454.0"></text>
</g>
<g>
<title>LinearScanWalker::split_for_spilling(Interval*) (1 samples, 0.03%)</title><rect x="1166.6" y="3459.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.6" y="3470.0"></text>
</g>
<g>
<title>Interval::split_child_before_op_id(int) (1 samples, 0.03%)</title><rect x="1166.6" y="3443.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1169.6" y="3454.0"></text>
</g>
<g>
<title>LinearScan::assign_reg_num(GrowableArray&lt;LIR_Op*&gt;*, IntervalWalker*) (7 samples, 0.18%)</title><rect x="1166.9" y="3491.0" width="2.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1169.9" y="3502.0"></text>
</g>
<g>
<title>GrowableArrayResourceAllocator::allocate(int, int) (1 samples, 0.03%)</title><rect x="1167.5" y="3475.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1170.5" y="3486.0"></text>
</g>
<g>
<title>LIR_OpVisitState::visit(LIR_Op*) (1 samples, 0.03%)</title><rect x="1167.8" y="3475.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1170.8" y="3486.0"></text>
</g>
<g>
<title>LIR_OpVisitState::append(LIR_OprDesc*&amp;, LIR_OpVisitState::OprMode) (1 samples, 0.03%)</title><rect x="1167.8" y="3459.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1170.8" y="3470.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_OpVisitState const&amp;, LIR_Op*) (3 samples, 0.08%)</title><rect x="1168.1" y="3475.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1171.1" y="3486.0"></text>
</g>
<g>
<title>LIR_Op::is_patching() (1 samples, 0.03%)</title><rect x="1168.1" y="3459.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1171.1" y="3470.0"></text>
</g>
<g>
<title>LinearScan::compute_oop_map(IntervalWalker*, LIR_Op*, CodeEmitInfo*, bool) (1 samples, 0.03%)</title><rect x="1168.4" y="3459.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.4" y="3470.0"></text>
</g>
<g>
<title>IntervalWalker::walk_to(int) (1 samples, 0.03%)</title><rect x="1168.4" y="3443.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1171.4" y="3454.0"></text>
</g>
<g>
<title>ValueStack::total_locks_size() const (1 samples, 0.03%)</title><rect x="1168.7" y="3459.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1171.7" y="3470.0"></text>
</g>
<g>
<title>LinearScan::build_intervals() (4 samples, 0.10%)</title><rect x="1169.0" y="3491.0" width="1.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1172.0" y="3502.0"></text>
</g>
<g>
<title>LinearScan::add_use(LIR_OprDesc*, int, int, IntervalUseKind) (1 samples, 0.03%)</title><rect x="1169.9" y="3475.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1172.9" y="3486.0"></text>
</g>
<g>
<title>LinearScan::compute_local_live_sets() (2 samples, 0.05%)</title><rect x="1170.2" y="3491.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1173.2" y="3502.0"></text>
</g>
<g>
<title>LinearScan::eliminate_spill_moves() (2 samples, 0.05%)</title><rect x="1170.8" y="3491.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1173.8" y="3502.0"></text>
</g>
<g>
<title>LinearScan::init_compute_oop_maps() (1 samples, 0.03%)</title><rect x="1171.4" y="3491.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1174.4" y="3502.0"></text>
</g>
<g>
<title>LinearScan::number_instructions() (1 samples, 0.03%)</title><rect x="1171.7" y="3491.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1174.7" y="3502.0"></text>
</g>
<g>
<title>resource_allocate_bytes(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1171.7" y="3475.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1174.7" y="3486.0"></text>
</g>
<g>
<title>ciEnv::is_in_vm() (1 samples, 0.03%)</title><rect x="1172.0" y="3523.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1175.0" y="3534.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data() (1 samples, 0.03%)</title><rect x="1172.3" y="3523.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.3" y="3534.0"></text>
</g>
<g>
<title>ciMethod::ensure_method_data(methodHandle const&amp;) (1 samples, 0.03%)</title><rect x="1172.3" y="3507.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.3" y="3518.0"></text>
</g>
<g>
<title>Method::build_interpreter_method_data(methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1172.3" y="3491.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1175.3" y="3502.0"></text>
</g>
<g>
<title>MethodData::allocate(ClassLoaderData*, methodHandle const&amp;, Thread*) (1 samples, 0.03%)</title><rect x="1172.3" y="3475.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="3486.0"></text>
</g>
<g>
<title>MethodData::initialize() (1 samples, 0.03%)</title><rect x="1172.3" y="3459.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1175.3" y="3470.0"></text>
</g>
<g>
<title>CompilerConfig::scaled_freq_log(long, double) (1 samples, 0.03%)</title><rect x="1172.3" y="3443.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1175.3" y="3454.0"></text>
</g>
<g>
<title>Compilation::initialize() (1 samples, 0.03%)</title><rect x="1172.6" y="3539.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1175.6" y="3550.0"></text>
</g>
<g>
<title>PcDesc::PcDesc(int, int, int) (1 samples, 0.03%)</title><rect x="1172.6" y="3523.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1175.6" y="3534.0"></text>
</g>
<g>
<title>Compilation::install_code(int) (9 samples, 0.23%)</title><rect x="1172.9" y="3539.0" width="2.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1175.9" y="3550.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1172.9" y="3523.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1175.9" y="3534.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1172.9" y="3507.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1175.9" y="3518.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1172.9" y="3491.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1175.9" y="3502.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1172.9" y="3475.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1175.9" y="3486.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1172.9" y="3459.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1175.9" y="3470.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1172.9" y="3443.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1175.9" y="3454.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="1172.9" y="3427.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1175.9" y="3438.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="1172.9" y="3411.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1175.9" y="3422.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1172.9" y="3395.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1175.9" y="3406.0"></text>
</g>
<g>
<title>ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, RTMState, GrowableArrayView&lt;BufferBlob*&gt; const&amp;) (8 samples, 0.20%)</title><rect x="1173.2" y="3523.0" width="2.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.2" y="3534.0"></text>
</g>
<g>
<title>Dependencies::validate_dependencies(CompileTask*, char**) (1 samples, 0.03%)</title><rect x="1173.2" y="3507.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1176.2" y="3518.0"></text>
</g>
<g>
<title>Dependencies::DepStream::check_klass_dependency(KlassDepChange*) (1 samples, 0.03%)</title><rect x="1173.2" y="3491.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1176.2" y="3502.0"></text>
</g>
<g>
<title>nmethod::new_nmethod(methodHandle const&amp;, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, GrowableArrayView&lt;BufferBlob*&gt; const&amp;, char*, int, int, char const*, FailedSpeculation**) (7 samples, 0.18%)</title><rect x="1173.5" y="3507.0" width="2.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1176.5" y="3518.0"></text>
</g>
<g>
<title>CodeCache::allocate(int, int, int) (1 samples, 0.03%)</title><rect x="1173.8" y="3491.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1176.8" y="3502.0"></text>
</g>
<g>
<title>CodeCache::reverse_free_ratio(int) (1 samples, 0.03%)</title><rect x="1173.8" y="3475.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1176.8" y="3486.0"></text>
</g>
<g>
<title>nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, int, GrowableArrayView&lt;BufferBlob*&gt; const&amp;, char*, int, int) (5 samples, 0.13%)</title><rect x="1174.1" y="3491.0" width="1.5" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.1" y="3502.0"></text>
</g>
<g>
<title>CodeBuffer::copy_code_to(CodeBlob*) (2 samples, 0.05%)</title><rect x="1174.1" y="3475.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1177.1" y="3486.0"></text>
</g>
<g>
<title>CodeBuffer::relocate_code_to(CodeBuffer*) const (1 samples, 0.03%)</title><rect x="1174.1" y="3459.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1177.1" y="3470.0"></text>
</g>
<g>
<title>CodeBuffer::verify_section_allocation() (1 samples, 0.03%)</title><rect x="1174.4" y="3459.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1177.4" y="3470.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_nmethod(nmethod*) (2 samples, 0.05%)</title><rect x="1174.7" y="3475.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1177.7" y="3486.0"></text>
</g>
<g>
<title>RegisterNMethodOopClosure::do_oop(oopDesc**) (1 samples, 0.03%)</title><rect x="1174.7" y="3459.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1177.7" y="3470.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.03%)</title><rect x="1175.0" y="3459.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1178.0" y="3470.0"></text>
</g>
<g>
<title>RelocIterator::initialize(CompiledMethod*, unsigned char*, unsigned char*) (1 samples, 0.03%)</title><rect x="1175.0" y="3443.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1178.0" y="3454.0"></text>
</g>
<g>
<title>page_fault (1 samples, 0.03%)</title><rect x="1175.3" y="3475.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1178.3" y="3486.0"></text>
</g>
<g>
<title>do_page_fault (1 samples, 0.03%)</title><rect x="1175.3" y="3459.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1178.3" y="3470.0"></text>
</g>
<g>
<title>__do_page_fault (1 samples, 0.03%)</title><rect x="1175.3" y="3443.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1178.3" y="3454.0"></text>
</g>
<g>
<title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="1175.3" y="3427.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1178.3" y="3438.0"></text>
</g>
<g>
<title>find_vma (1 samples, 0.03%)</title><rect x="1175.3" y="3411.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1178.3" y="3422.0"></text>
</g>
<g>
<title>vmacache_find (1 samples, 0.03%)</title><rect x="1175.3" y="3395.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1178.3" y="3406.0"></text>
</g>
<g>
<title>ciEnv::ciEnv(CompileTask*) (2 samples, 0.05%)</title><rect x="1175.6" y="3587.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1178.6" y="3598.0"></text>
</g>
<g>
<title>ciObjectFactory::get(oopDesc*) (2 samples, 0.05%)</title><rect x="1175.6" y="3571.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1178.6" y="3582.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (2 samples, 0.05%)</title><rect x="1175.6" y="3555.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1178.6" y="3566.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (2 samples, 0.05%)</title><rect x="1175.6" y="3539.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1178.6" y="3550.0"></text>
</g>
<g>
<title>ciInstanceKlass::ciInstanceKlass(Klass*) (2 samples, 0.05%)</title><rect x="1175.6" y="3523.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1178.6" y="3534.0"></text>
</g>
<g>
<title>ciKlass::ciKlass(Klass*) (1 samples, 0.03%)</title><rect x="1175.6" y="3507.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1178.6" y="3518.0"></text>
</g>
<g>
<title>vmSymbols::find_sid(Symbol const*) (1 samples, 0.03%)</title><rect x="1175.6" y="3491.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1178.6" y="3502.0"></text>
</g>
<g>
<title>ciType::ciType(Klass*) (1 samples, 0.03%)</title><rect x="1175.9" y="3507.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1178.9" y="3518.0"></text>
</g>
<g>
<title>ciEnv::get_method_from_handle(Method*) (6 samples, 0.15%)</title><rect x="1176.2" y="3587.0" width="1.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1179.2" y="3598.0"></text>
</g>
<g>
<title>ciObjectFactory::get_metadata(Metadata*) (6 samples, 0.15%)</title><rect x="1176.2" y="3571.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.2" y="3582.0"></text>
</g>
<g>
<title>Metadata::is_klass() const (1 samples, 0.03%)</title><rect x="1176.2" y="3555.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.2" y="3566.0"></text>
</g>
<g>
<title>ciObjectFactory::create_new_metadata(Metadata*) (5 samples, 0.13%)</title><rect x="1176.5" y="3555.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1179.5" y="3566.0"></text>
</g>
<g>
<title>ciMethod::ciMethod(methodHandle const&amp;, ciInstanceKlass*) (5 samples, 0.13%)</title><rect x="1176.5" y="3539.0" width="1.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1179.5" y="3550.0"></text>
</g>
<g>
<title>ciSignature::ciSignature(ciKlass*, constantPoolHandle const&amp;, ciSymbol*) (5 samples, 0.13%)</title><rect x="1176.5" y="3523.0" width="1.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1179.5" y="3534.0"></text>
</g>
<g>
<title>SignatureStream::find_symbol() (2 samples, 0.05%)</title><rect x="1176.5" y="3507.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1179.5" y="3518.0"></text>
</g>
<g>
<title>SymbolTable::new_symbol(char const*, int) (2 samples, 0.05%)</title><rect x="1176.5" y="3491.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1179.5" y="3502.0"></text>
</g>
<g>
<title>SymbolTable::do_lookup(char const*, int, unsigned long) (2 samples, 0.05%)</title><rect x="1176.5" y="3475.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.5" y="3486.0"></text>
</g>
<g>
<title>ConcurrentHashTable&lt;SymbolTableConfig, (MEMFLAGS)10&gt;::Node* ConcurrentHashTable&lt;SymbolTableConfig, (MEMFLAGS)10&gt;::get_node&lt;SymbolTableLookup&gt;(ConcurrentHashTable&lt;SymbolTableConfig, (MEMFLAGS)10&gt;::Bucket const*, SymbolTableLookup&amp;, bool*, unsigned long*) const (1 samples, 0.03%)</title><rect x="1176.8" y="3459.0" width="0.3" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.8" y="3470.0"></text>
</g>
<g>
<title>ciEnv::get_klass_by_name_impl(ciKlass*, constantPoolHandle const&amp;, ciSymbol*, bool) (3 samples, 0.08%)</title><rect x="1177.1" y="3507.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1180.1" y="3518.0"></text>
</g>
<g>
<title>SystemDictionary::find_constrained_instance_or_array_klass(Symbol*, Handle, Thread*) (2 samples, 0.05%)</title><rect x="1177.1" y="3491.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1180.1" y="3502.0"></text>
</g>
<g>
<title>SystemDictionary::find(Symbol*, Handle, Handle, Thread*) (2 samples, 0.05%)</title><rect x="1177.1" y="3475.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1180.1" y="3486.0"></text>
</g>
<g>
<title>Dictionary::find(unsigned int, Symbol*, Handle) (2 samples, 0.05%)</title><rect x="1177.1" y="3459.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1180.1" y="3470.0"></text>
</g>
<g>
<title>ttyLocker::release_tty_if_locked() (1 samples, 0.03%)</title><rect x="1177.7" y="3491.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1180.7" y="3502.0"></text>
</g>
<g>
<title>syscall (1 samples, 0.03%)</title><rect x="1177.7" y="3475.0" width="0.3" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="1180.7" y="3486.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1177.7" y="3459.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1180.7" y="3470.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1177.7" y="3443.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1180.7" y="3454.0"></text>
</g>
<g>
<title>ciEnv::~ciEnv() (1 samples, 0.03%)</title><rect x="1178.0" y="3587.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1181.0" y="3598.0"></text>
</g>
<g>
<title>Symbol::decrement_refcount() (1 samples, 0.03%)</title><rect x="1178.0" y="3571.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1181.0" y="3582.0"></text>
</g>
<g>
<title>CompileBroker::possibly_add_compiler_threads(Thread*) (2 samples, 0.05%)</title><rect x="1178.3" y="3603.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1181.3" y="3614.0"></text>
</g>
<g>
<title>OSContainer::memory_limit_in_bytes() (1 samples, 0.03%)</title><rect x="1178.3" y="3587.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="3598.0"></text>
</g>
<g>
<title>sysinfo (1 samples, 0.03%)</title><rect x="1178.6" y="3587.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1181.6" y="3598.0"></text>
</g>
<g>
<title>CompileQueue::get() (2 samples, 0.05%)</title><rect x="1178.9" y="3603.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="3614.0"></text>
</g>
<g>
<title>CompileTask::select_for_compilation() (1 samples, 0.03%)</title><rect x="1178.9" y="3587.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1181.9" y="3598.0"></text>
</g>
<g>
<title>OopStorage::release(oopDesc* const*) (1 samples, 0.03%)</title><rect x="1178.9" y="3571.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.9" y="3582.0"></text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (1 samples, 0.03%)</title><rect x="1179.2" y="3587.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1182.2" y="3598.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1179.5" y="3603.0" width="0.3" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="1182.5" y="3614.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1179.5" y="3587.0" width="0.3" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1182.5" y="3598.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1179.5" y="3571.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1182.5" y="3582.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1179.5" y="3555.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="1182.5" y="3566.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1179.5" y="3539.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1182.5" y="3550.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1179.5" y="3523.0" width="0.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1182.5" y="3534.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="1179.5" y="3507.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="1182.5" y="3518.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="1179.5" y="3491.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1182.5" y="3502.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1179.5" y="3475.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1182.5" y="3486.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (10 samples, 0.25%)</title><rect x="1179.8" y="3619.0" width="3.0" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.8" y="3630.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep() (10 samples, 0.25%)</title><rect x="1179.8" y="3603.0" width="3.0" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.8" y="3614.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (10 samples, 0.25%)</title><rect x="1179.8" y="3587.0" width="3.0" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1182.8" y="3598.0"></text>
</g>
<g>
<title>CodeCache::next_blob(CodeHeap*, CodeBlob*) (1 samples, 0.03%)</title><rect x="1179.8" y="3571.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1182.8" y="3582.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (8 samples, 0.20%)</title><rect x="1180.1" y="3571.0" width="2.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1183.1" y="3582.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches(bool) (7 samples, 0.18%)</title><rect x="1180.1" y="3555.0" width="2.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1183.1" y="3566.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (2 samples, 0.05%)</title><rect x="1181.0" y="3539.0" width="0.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1184.0" y="3550.0"></text>
</g>
<g>
<title>NativeCall::destination() const (1 samples, 0.03%)</title><rect x="1181.6" y="3539.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1184.6" y="3550.0"></text>
</g>
<g>
<title>bool clean_if_nmethod_is_unloaded&lt;CompiledIC&gt;(CompiledIC*, unsigned char*, CompiledMethod*, bool) (1 samples, 0.03%)</title><rect x="1181.9" y="3539.0" width="0.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1184.9" y="3550.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_flush(nmethod*) (1 samples, 0.03%)</title><rect x="1182.2" y="3555.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1185.2" y="3566.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1182.5" y="3571.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1185.5" y="3582.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (9 samples, 0.23%)</title><rect x="1182.8" y="3619.0" width="2.7" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1185.8" y="3630.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (9 samples, 0.23%)</title><rect x="1182.8" y="3603.0" width="2.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1185.8" y="3614.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, jvmtiAddrLocationMap**, int*) (1 samples, 0.03%)</title><rect x="1182.8" y="3587.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1185.8" y="3598.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(JvmtiEnv*, nmethod*) (7 samples, 0.18%)</title><rect x="1183.1" y="3587.0" width="2.1" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1186.1" y="3598.0"></text>
</g>
<g>
<title>JvmtiCodeBlobEvents::build_jvmti_addr_location_map(nmethod*, jvmtiAddrLocationMap**, int*) (1 samples, 0.03%)</title><rect x="1183.1" y="3571.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1186.1" y="3582.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.03%)</title><rect x="1183.1" y="3555.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1186.1" y="3566.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (6 samples, 0.15%)</title><rect x="1183.4" y="3571.0" width="1.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1186.4" y="3582.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1184.0" y="3555.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1187.0" y="3566.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1184.0" y="3539.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.0" y="3550.0"></text>
</g>
<g>
<title>CompiledMethod::scope_desc_at(unsigned char*) (2 samples, 0.05%)</title><rect x="1184.3" y="3555.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.3" y="3566.0"></text>
</g>
<g>
<title>ScopeDesc::decode_body() (1 samples, 0.03%)</title><rect x="1184.6" y="3539.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.6" y="3550.0"></text>
</g>
<g>
<title>Arena::grow(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1184.6" y="3523.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1187.6" y="3534.0"></text>
</g>
<g>
<title>ChunkPool::allocate(unsigned long, AllocFailStrategy::AllocFailEnum) (1 samples, 0.03%)</title><rect x="1184.6" y="3507.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1187.6" y="3518.0"></text>
</g>
<g>
<title>pthread_mutex_lock (1 samples, 0.03%)</title><rect x="1184.6" y="3491.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1187.6" y="3502.0"></text>
</g>
<g>
<title>ScopeDesc::sender() const (1 samples, 0.03%)</title><rect x="1184.9" y="3555.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1187.9" y="3566.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.03%)</title><rect x="1184.9" y="3539.0" width="0.3" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1187.9" y="3550.0"></text>
</g>
<g>
<title>Profiler::CompiledMethodLoad(_jvmtiEnv*, _jmethodID*, int, void const*, int, _jvmtiAddrLocationMap const*, void const*) (1 samples, 0.03%)</title><rect x="1185.2" y="3587.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="3598.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (1 samples, 0.03%)</title><rect x="1185.5" y="3619.0" width="0.3" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1188.5" y="3630.0"></text>
</g>
<g>
<title>VMThread::run() (14 samples, 0.36%)</title><rect x="1185.8" y="3635.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="3646.0"></text>
</g>
<g>
<title>VMThread::inner_execute(VM_Operation*) (14 samples, 0.36%)</title><rect x="1185.8" y="3619.0" width="4.2" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.8" y="3630.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (2 samples, 0.05%)</title><rect x="1185.8" y="3603.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1188.8" y="3614.0"></text>
</g>
<g>
<title>SafepointSynchronize::synchronize_threads(long, int, int*) (1 samples, 0.03%)</title><rect x="1185.8" y="3587.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1188.8" y="3598.0"></text>
</g>
<g>
<title>ThreadSafepointState::examine_state_of_thread(unsigned long) (1 samples, 0.03%)</title><rect x="1186.1" y="3587.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.1" y="3598.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (12 samples, 0.31%)</title><rect x="1186.4" y="3603.0" width="3.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.4" y="3614.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (12 samples, 0.31%)</title><rect x="1186.4" y="3587.0" width="3.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.4" y="3598.0"></text>
</g>
<g>
<title>VM_G1TryInitiateConcMark::doit() (12 samples, 0.31%)</title><rect x="1186.4" y="3571.0" width="3.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.4" y="3582.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (12 samples, 0.31%)</title><rect x="1186.4" y="3555.0" width="3.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.4" y="3566.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint_helper(double) (12 samples, 0.31%)</title><rect x="1186.4" y="3539.0" width="3.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.4" y="3550.0"></text>
</g>
<g>
<title>ClassLoaderDataGraph::clear_claimed_marks() (2 samples, 0.05%)</title><rect x="1186.4" y="3523.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.4" y="3534.0"></text>
</g>
<g>
<title>G1CollectedHeap::post_evacuate_collection_set(G1EvacuationInfo&amp;, G1RedirtyCardsQueueSet*, G1ParScanThreadStateSet*) (5 samples, 0.13%)</title><rect x="1187.0" y="3523.0" width="1.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.0" y="3534.0"></text>
</g>
<g>
<title>G1CollectedHeap::eagerly_reclaim_humongous_regions() (3 samples, 0.08%)</title><rect x="1187.0" y="3507.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.0" y="3518.0"></text>
</g>
<g>
<title>G1FreeHumongousRegionClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1187.0" y="3491.0" width="0.3" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1190.0" y="3502.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (2 samples, 0.05%)</title><rect x="1187.3" y="3491.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.3" y="3502.0"></text>
</g>
<g>
<title>G1FreeHumongousRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.05%)</title><rect x="1187.3" y="3475.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1190.3" y="3486.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_region(HeapRegion*, FreeRegionList*) (2 samples, 0.05%)</title><rect x="1187.3" y="3459.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1190.3" y="3470.0"></text>
</g>
<g>
<title>HeapRegion::hr_clear(bool) (2 samples, 0.05%)</title><rect x="1187.3" y="3443.0" width="0.6" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1190.3" y="3454.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (1 samples, 0.03%)</title><rect x="1187.6" y="3427.0" width="0.3" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1190.6" y="3438.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.03%)</title><rect x="1187.6" y="3411.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1190.6" y="3422.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_collection_set(G1CollectionSet*, G1EvacuationInfo&amp;, unsigned long const*) (1 samples, 0.03%)</title><rect x="1187.9" y="3507.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.9" y="3518.0"></text>
</g>
<g>
<title>HeapRegionManager::rebuild_free_list(WorkGang*) (1 samples, 0.03%)</title><rect x="1187.9" y="3491.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1190.9" y="3502.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int, bool) (1 samples, 0.03%)</title><rect x="1187.9" y="3475.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.9" y="3486.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1187.9" y="3459.0" width="0.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="1190.9" y="3470.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1187.9" y="3443.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1190.9" y="3454.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1187.9" y="3427.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1190.9" y="3438.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1187.9" y="3411.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1190.9" y="3422.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1187.9" y="3395.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1190.9" y="3406.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1187.9" y="3379.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1190.9" y="3390.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="1187.9" y="3363.0" width="0.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1190.9" y="3374.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="1187.9" y="3347.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1190.9" y="3358.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1187.9" y="3331.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1190.9" y="3342.0"></text>
</g>
<g>
<title>G1CollectedHeap::process_discovered_references(G1ParScanThreadStateSet*) (1 samples, 0.03%)</title><rect x="1188.2" y="3507.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.2" y="3518.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_discovered_references(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (1 samples, 0.03%)</title><rect x="1188.2" y="3491.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.2" y="3502.0"></text>
</g>
<g>
<title>ReferenceProcessor::process_soft_weak_final_refs(BoolObjectClosure*, OopClosure*, VoidClosure*, AbstractRefProcTaskExecutor*, ReferenceProcessorPhaseTimes*) (1 samples, 0.03%)</title><rect x="1188.2" y="3475.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1191.2" y="3486.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;286822ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)3, 286822ul&gt;::oop_access_barrier(oopDesc*, long) (1 samples, 0.03%)</title><rect x="1188.2" y="3459.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1191.2" y="3470.0"></text>
</g>
<g>
<title>G1CollectedHeap::pre_evacuate_collection_set(G1EvacuationInfo&amp;, G1ParScanThreadStateSet*) (2 samples, 0.05%)</title><rect x="1188.5" y="3523.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.5" y="3534.0"></text>
</g>
<g>
<title>G1CollectedHeap::run_task_timed(AbstractGangTask*) (1 samples, 0.03%)</title><rect x="1188.5" y="3507.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1191.5" y="3518.0"></text>
</g>
<g>
<title>WorkGang::run_task(AbstractGangTask*, unsigned int, bool) (1 samples, 0.03%)</title><rect x="1188.5" y="3491.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1191.5" y="3502.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.03%)</title><rect x="1188.5" y="3475.0" width="0.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1191.5" y="3486.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1188.5" y="3459.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1191.5" y="3470.0"></text>
</g>
<g>
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1188.5" y="3443.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1191.5" y="3454.0"></text>
</g>
<g>
<title>__x64_sys_futex (1 samples, 0.03%)</title><rect x="1188.5" y="3427.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1191.5" y="3438.0"></text>
</g>
<g>
<title>do_futex (1 samples, 0.03%)</title><rect x="1188.5" y="3411.0" width="0.3" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1191.5" y="3422.0"></text>
</g>
<g>
<title>futex_wake (1 samples, 0.03%)</title><rect x="1188.5" y="3395.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1191.5" y="3406.0"></text>
</g>
<g>
<title>wake_up_q (1 samples, 0.03%)</title><rect x="1188.5" y="3379.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1191.5" y="3390.0"></text>
</g>
<g>
<title>try_to_wake_up (1 samples, 0.03%)</title><rect x="1188.5" y="3363.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1191.5" y="3374.0"></text>
</g>
<g>
<title>__lock_text_start (1 samples, 0.03%)</title><rect x="1188.5" y="3347.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1191.5" y="3358.0"></text>
</g>
<g>
<title>G1ConcurrentMark::pre_concurrent_start(GCCause::Cause) (1 samples, 0.03%)</title><rect x="1188.8" y="3507.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1191.8" y="3518.0"></text>
</g>
<g>
<title>NoteStartOfMarkHRClosure::do_heap_region(HeapRegion*) (1 samples, 0.03%)</title><rect x="1188.8" y="3491.0" width="0.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.8" y="3502.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::reset() (1 samples, 0.03%)</title><rect x="1189.1" y="3523.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1192.1" y="3534.0"></text>
</g>
<g>
<title>G1Policy::record_collection_pause_start(double) (2 samples, 0.05%)</title><rect x="1189.4" y="3523.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1192.4" y="3534.0"></text>
</g>
<g>
<title>G1Policy::record_concurrent_refinement_stats() (2 samples, 0.05%)</title><rect x="1189.4" y="3507.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1192.4" y="3518.0"></text>
</g>
<g>
<title>G1DirtyCardQueueSet::get_and_reset_refinement_stats() (2 samples, 0.05%)</title><rect x="1189.4" y="3491.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1192.4" y="3502.0"></text>
</g>
<g>
<title>Threads::threads_do(ThreadClosure*) (2 samples, 0.05%)</title><rect x="1189.4" y="3475.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1192.4" y="3486.0"></text>
</g>
<g>
<title>G1ConcurrentRefineStats::operator+=(G1ConcurrentRefineStats const&amp;) (2 samples, 0.05%)</title><rect x="1189.4" y="3459.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1192.4" y="3470.0"></text>
</g>
</g>
</svg>
